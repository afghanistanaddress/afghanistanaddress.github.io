<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1644.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>教你在 Java 中实现 Dijkstra 最短路算法的方法_java - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">教你在 Java 中实现 Dijkstra 最短路算法的方法_java</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li>定义</li> <li>带权有向图的实现</li> <ul class="second_class_ul"> <li>带权有向边</li> <li>带权有向图</li> </ul> <li>最短路算法</li> <ul class="second_class_ul"> <li>API</li> <li>Dijkstra 算法</li> </ul> <li>算法流程</li> <ul class="second_class_ul"> <li>最小索引优先队列</li> <li>实现算法</li> </ul> <li>后记</li> <ul class="second_class_ul"></ul> </ul> </div> <p class="maodian"></p> <h2>定义</h2> <p>最短路问题的定义为：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/826879e05d6250ecebf02f03c436ebc0.jpg"></p> <p>下图左侧是一幅带权有向图，以顶点 0 为起点到各个顶点的最短路径形成的最短路径树如下图右侧所示：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/5560c928257f28e9aaaa43fc2d0de059.jpg"></p> <p class="maodian"></p> <h2>带权有向图的实现</h2> <p>在实现最短路算法之前需要先实现带权有向图。在上一篇博客 《如何在 Java 中实现最小生成树算法》 中我们实现了带权无向图，只需一点修改就能实现带权有向图。</p> <p class="maodian"></p> <h3>带权有向边</h3> <p>首先应该实现带权有向图中的边 <code>DirectedEdge</code>，这个类有三个成员变量：指出边的顶点 <code>v</code>、边指向的顶点 <code>w</code> 和边的权重 <code>weight</code>。代码如下所示：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  /**   * 带权有向边   */  public class DirectedEdge {      int v, w;      double weight;      public DirectedEdge(int v, int w, double weight) {          this.v = v;          this.w = w;          this.weight = weight;      }      public int from() {          return v;      public int to() {          return w;      public double getWeight() {          return weight;      @Override      public String toString() {          return String.format("%d->%d(%.2f)", v, w, weight);  }  </pre> </div> <p class="maodian"></p> <h3>带权有向图</h3> <p>带权有向图的实现非常简单，只需将带权无向图使用的 <code>Edge</code> 类换成 <code>DirectedEdge</code> 类，并作出少许调整即可：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.stack.LinkStack;  import com.zhiyiyo.collection.stack.Stack;  public class WeightedDigraph {      private final int V;      protected int E;      protected LinkStack<DirectedEdge>[] adj;      public WeightedDigraph(int V) {          this.V = V;          adj = (LinkStack<DirectedEdge>[]) new LinkStack[V];          for (int i = 0; i < V; i++) {              adj[i] = new LinkStack<>();          }      }      public int V() {          return V;      }      public int E() {          return E;      }      public void addEdge(DirectedEdge edge) {          adj[edge.from()].push(edge);          E++;      }      public Iterable<DirectedEdge> adj(int v) {          return adj[v];      }      public Iterable<DirectedEdge> edges() {          Stack<DirectedEdge> edges = new LinkStack<>();          for (int v = 0; v < V; ++v) {              for (DirectedEdge edge : adj(v)) {                  edges.push(edge);              }          }          return edges;      }  }  </pre> </div> <p class="maodian"></p> <h2>最短路算法</h2> <p class="maodian"></p> <h3>API</h3> <p>最短路算法应该支持起始点 \(v_s\) 到任意顶点 \(v_t\) 的最短距离和最短路径的查询：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.stack.LinkStack;  import com.zhiyiyo.collection.stack.Stack;  public class WeightedDigraph {      private final int V;      protected int E;      protected LinkStack<DirectedEdge>[] adj;      public WeightedDigraph(int V) {          this.V = V;          adj = (LinkStack<DirectedEdge>[]) new LinkStack[V];          for (int i = 0; i < V; i++) {              adj[i] = new LinkStack<>();          }      }      public int V() {          return V;      public int E() {          return E;      public void addEdge(DirectedEdge edge) {          adj[edge.from()].push(edge);          E++;      public Iterable<DirectedEdge> adj(int v) {          return adj[v];      public Iterable<DirectedEdge> edges() {          Stack<DirectedEdge> edges = new LinkStack<>();          for (int v = 0; v < V; ++v) {              for (DirectedEdge edge : adj(v)) {                  edges.push(edge);              }          return edges;  }  </pre> </div> <p class="maodian"></p> <h3>Dijkstra 算法</h3> <p>我们可以使用一个距离数组 <code>distTo[]</code> 来保存起始点 \(v_s\) 到其余顶点 \(v_t\) 的最短路径，且 <code>distTo[]</code> 数组满足以下条件：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/7d71061681153df25ade354c067cf9e8.jpg"></p> <p>可以使用 <code>Double.POSITIVE_INFINITY</code> 来表示无穷大，有了这个数组之后我们可以实现 <code>ShortestPath</code> 前两个方法：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  public class DijkstraSP implements ShortestPath {      private double[] distTo;      @Override      public double distTo(int v) {          return distTo[v];      }      public boolean hasPathTo(int v) {          return distTo[v] < Double.POSITIVE_INFINITY;  }  </pre> </div> <p>为了实现保存 \(v_s\) 到 \(v_t\) 的最短路径，可以使用一个边数组 <code>edgeTo[]</code>，其中 <code>edgeTo[v] = e_wv</code> 表示要想到达 \(v_t\)，需要先经过顶点 \(v_w\)，接着从 <code>edgeTo[w]</code>获取到达 \(v_w\) 之前需要到达的上一个节点，重复上述步骤直到发现 <code>edgeTo[i] = null</code>，这时候就说明我们回到了 \(v_s\)。 获取最短路径的代码如下所示：</p> <div class="ay1code"> <pre class="brush:java;">@Override  public Iterable<DirectedEdge> pathTo(int v) {      if (!hasPathTo(v)) return null;      Stack<DirectedEdge> path = new LinkStack<>();      for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {          path.push(e);      }      return path;  }  </pre> </div> <p class="maodian"></p> <h2>算法流程</h2> <p>虽然我们已经实现了上述接口，但是如何得到 <code>distTo[]</code> 和 <code>edgeTo[]</code> 还是个问题，这就需要用到 Dijkstra 算法了。算法的思想是这样的：</p> <ul> <li>初始化 <code>distTo[]</code> 使得除了 <code>distTo<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = 0</code> 外，其余的元素都为 <code>Double.POSITIVE_INFINITY</code>。同时初始化 <code>edgeTo[]</code> 的每个元素都是 <code>null</code>；</li> <li>将顶点 s 的所有相邻顶点 \(v_j\) 加入集合 \(V'\) 中，设置 <code>distTo[j] = l_sj</code> 即初始化最短距离为邻边的权重；</li> <li>从 \(V'\) 中取出距离最短即 <code>distTo[m]</code> 最小的顶点 \(v_m\)，遍历 \(v_m\) 的所有邻边 \((v_m, v_w)\)，如果有 \(l_{mw}+l_{sw}<l_{sw}\)，就说明从 \(v_s\) 走到 \(v_m\) 再一步走到 \(v_w\) 距离最短，我们就去更新 <code>distTo[m]</code>，同时将 \(v_w\) 添加到 \(V'\) 中（如果 \(v_w\) 不在的话）；</li> </ul> <p>重复上述过程直到 \(V'\) 变为空，我们就已经找到了所有 \(v_s\) 可达的顶点的最短路径。</p> <p>上述过程中有个地方会影响算法的性能，就是如何从 \(V'\) 中取出最小距离对应的顶点 \(v_m\)。如果直接遍历 \(V'\) 最坏情况下时间复杂度为 \(O(|V|)\)，如果换成最小索引优先队列则可以将时间复杂度降至 \(O(\log|V|)\)。</p> <p class="maodian"></p> <h3>最小索引优先队列</h3> <p>上一篇博客 《如何在 Java 中实现最小生成树算法》 中介绍了最小堆的使用，最小堆可以在对数时间内取出数据集合中的最小值，对应到最短路算法中就是最短路径。但是有一个问题，就是我们想要的是最短路径对应的那个顶点 \(v_m\)，只使用最小堆是做不到这一点的。如何能将最小堆中的距离值和顶点进行绑定呢？这就要用到索引优先队列。</p> <p>索引优先队列的 API 如下所示，可以看到每个元素 <code>item</code> 都和一个索引 <code>k</code> 进行绑定，我们可以通过索引 <code>k</code> 读写优先队列中的元素。想象一下堆中的所有元素放在一个数组 <code>pq</code> 中，索引优先队列可以做到在对数时间内取出 <code>pq</code> 的最小值。</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.collection.queue;  /**   * 索引优先队列   */  public interface IndexPriorQueue<K extends Comparable<K>> {      /**       * 向堆中插入一个元素       *       * @param k 元素的索引       * @param item 插入的元素       */      void insert(int k, K item);       * 修改堆中指定索引的元素值       * @param item 新的元素值      void change(int k, K item);       * 向堆中插入或修改元素      void set(int k, K item);       * 堆是否包含索引为 k 的元素       * @param k 索引       * @return 是否包含      boolean contains(int k);       * 弹出堆顶的元素并返回其索引       * @return 堆顶元素的索引      int pop();       * 弹出堆中索引为 k 为元素       * @return 索引对应的元素      K delete(int k);       * 获取堆中索引为 k 的元素，如果 k 不存在则返回 null       * @return 索引为 k 的元素      K get(int k);       * 获取堆中的元素个数      int size();       * 堆是否为空      boolean isEmpty();  }  </pre> </div> <p>实现索引优先队列比优先队列麻烦一点，因为需要维护每个元素的索引。之前我们是将元素按照完全二叉树的存放顺序进行存储，现在可以换成索引，而元素只需根据索引值 <code>k</code> 放在数组 <code>keys[k]</code> 处即可。只有索引数组 <code>indexes[]</code> 和元素数组 <code>keys[]</code> 还不够，如果我们想实现 <code>contains(int k)</code> 方法，目前只能遍历一下 <code>indexes[]</code>，看看 <code>k</code> 在不在里面，时间复杂度是 \(O(|V|)\)。何不多维护一个数组 <code>nodeIndexes[]</code>，使得它满足下述关系：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/97e8708450797ea2f543f2af18a2edff.jpg"></p> <p>如果能在 <code>nodeIndexes[k]</code> 不是 -1，就说明索引 \(k\) 对应的元素存在与堆中，且索引 k 在 <code>indexes[]</code> 中的位置为 \(d\)，即有下述等式成立：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/7ae30cf7f450e31012f77950a8afb904.jpg"></p> <p>有了这三个数组之后我们就可以实现最小索引优先队列了：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.collection.queue;  import java.util.Arrays;  import java.util.NoSuchElementException;  /**   * 最小索引优先队列   */  public class IndexMinPriorQueue<K extends Comparable<K>> implements IndexPriorQueue<K> {      private K[] keys;           // 元素      private int[] indexes;      // 元素的索引，按照最小堆的顺序摆放      private int[] nodeIndexes;  // 元素的索引在完全二叉树中的编号      private int N;      public IndexMinPriorQueue(int maxSize) {          keys = (K[]) new Comparable[maxSize + 1];          indexes = new int[maxSize + 1];          nodeIndexes = new int[maxSize + 1];          Arrays.fill(nodeIndexes, -1);      }      @Override      public void insert(int k, K item) {          keys[k] = item;          indexes[++N] = k;          nodeIndexes[k] = N;          swim(N);      public void change(int k, K item) {          validateIndex(k);          swim(nodeIndexes[k]);          sink(nodeIndexes[k]);      public void set(int k, K item) {          if (!contains(k)) {              insert(k, item);          } else {              change(k, item);          }      public boolean contains(int k) {          return nodeIndexes[k] != -1;      public int pop() {          int k = indexes[1];          delete(k);          return k;      public K delete(int k) {          K item = keys[k];          // 交换之后 nodeIndexes[k] 发生变化，必须先保存为局部变量          int nodeIndex = nodeIndexes[k];          swap(nodeIndex, N--);          // 必须有上浮的操作，交换后的元素可能比上面的元素更小          swim(nodeIndex);          sink(nodeIndex);          keys[k] = null;          nodeIndexes[k] = -1;          return item;      public K get(int k) {          return contains(k) ? keys[k] : null;      public K min() {          return keys[indexes[1]];      /**       * 获取最小的元素对应的索引       */      public int minIndex() {          return indexes[1];      public int size() {          return N;      public boolean isEmpty() {          return N == 0;       * 元素上浮       *       * @param k 元素的索引      private void swim(int k) {          while (k > 1 && less(k, k / 2)) {              swap(k, k / 2);              k /= 2;       * 元素下沉      private void sink(int k) {          while (2 * k <= N) {              int j = 2 * k;              // 检查是否有两个子节点              if (j < N && less(j + 1, j)) j++;              if (less(k, j)) break;              swap(k, j);              k = j;       * 交换完全二叉树中编号为 a 和 b 的节点       * @param a 索引 a       * @param b 索引 b      private void swap(int a, int b) {          int k1 = indexes[a], k2 = indexes[b];          nodeIndexes[k2] = a;          nodeIndexes[k1] = b;          indexes[a] = k2;          indexes[b] = k1;      private boolean less(int a, int b) {          return keys[indexes[a]].compareTo(keys[indexes[b]]) < 0;      private void validateIndex(int k) {              throw new NoSuchElementException("索引" + k + "不在优先队列中");  }  </pre> </div> <p>注意对比最小堆和最小索引堆的 <code>swap(int a, int b)</code> 方法以及 <code>less(int a, int b)</code> 方法，在交换堆中的元素时使用的依据是元素的大小，交换之后无需调整 <code>keys[]</code>，而是交换 <code>nodeIndexes[]</code> 和 <code>indexes[]</code> 中的元素。</p> <p class="maodian"></p> <h3>实现算法</h3> <p>通过上述的分析，实现 Dijkstra 算法就很简单了，时间复杂度为 \(O(|E|\log |V|)\)：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.queue.IndexMinPriorQueue;  import com.zhiyiyo.collection.stack.LinkStack;  import com.zhiyiyo.collection.stack.Stack;  import java.util.Arrays;  public class DijkstraSP implements ShortestPath {      private double[] distTo;      private DirectedEdge[] edgeTo;      private IndexMinPriorQueue<Double> pq;      private int s;      public DijkstraSP(WeightedDigraph graph, int s) {          pq = new IndexMinPriorQueue<>(graph.V());          edgeTo = new DirectedEdge[graph.V()];                    // 初始化距离          distTo = new double[graph.V()];          Arrays.fill(distTo, Double.POSITIVE_INFINITY);          distTo<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = 0;          visit(graph, s);          while (!pq.isEmpty()) {              visit(graph, pq.pop());          }      }      private void visit(WeightedDigraph graph, int v) {          for (DirectedEdge edge : graph.adj(v)) {              int w = edge.to();              if (distTo[w] > distTo[v] + edge.getWeight()) {                  distTo[w] = distTo[v] + edge.getWeight();                  edgeTo[w] = edge;                  pq.set(w, distTo[w]);              }      // 省略已实现的方法 ...  }  </pre> </div> <p class="maodian"></p> <h2>后记</h2> <p>Dijkstra 算法还能继续优化，将最小索引堆换成斐波那契堆之后时间复杂度为 \(O(|E|+|V|\log |V|)\)，这里就不写了（<s>因为还没学到斐波那契堆</s>），以上~~</p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1643.htm">Eureka详解系列(四)&#8211;Eureka Client部分的源码和配置</a></p>
                                                        <p>下一个：<a href="/html/category/article-1645.htm">pymysql 连接mysql（带参数变量）</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7454.htm" title="动物防疫疫苗种类大全及价格 动物防疫疫苗种类大全及价格表">动物防疫疫苗种类大全及价格 动物防疫疫苗种类大全及价格表</a></li>
                        <li class="py-2"><a href="/html/category/article-6161.htm" title="含钾高的食物一览表的水果和蔬菜(含钾高的食物一览表图片)">含钾高的食物一览表的水果和蔬菜(含钾高的食物一览表图片)</a></li>
                        <li class="py-2"><a href="/html/category/article-6673.htm" title="怎么样补脾的效果最好(怎么补脾?)">怎么样补脾的效果最好(怎么补脾?)</a></li>
                        <li class="py-2"><a href="/html/category/article-7041.htm" title="猫狗身上的跳蚤会跳到人身上吗（猫狗身上的跳蚤会跳到人身上吗视频）">猫狗身上的跳蚤会跳到人身上吗（猫狗身上的跳蚤会跳到人身上吗视频）</a></li>
                        <li class="py-2"><a href="/html/category/article-7133.htm" title="猫咪疫苗可以自己打吗怎么可以自己（猫咪疫苗自己能打吗）">猫咪疫苗可以自己打吗怎么可以自己（猫咪疫苗自己能打吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6581.htm" title="同城宠物狗免费领养在哪里（有没有同城领养宠物的小程序）">同城宠物狗免费领养在哪里（有没有同城领养宠物的小程序）</a></li>
                        <li class="py-2"><a href="/html/category/article-6204.htm" title="宠物粮食市场营销调查问卷 宠物粮食市场营销调查问卷模板">宠物粮食市场营销调查问卷 宠物粮食市场营销调查问卷模板</a></li>
                        <li class="py-2"><a href="/html/category/article-7316.htm" title="兽药十大排名（兽药十大排名最新）">兽药十大排名（兽药十大排名最新）</a></li>
                        <li class="py-2"><a href="/html/category/article-7547.htm" title="宠颐生全国多少家店 宠颐生总部在哪">宠颐生全国多少家店 宠颐生总部在哪</a></li>
                        <li class="py-2"><a href="/html/category/article-7270.htm" title="国内十大兽药厂排名（全国排名前十的兽药厂）">国内十大兽药厂排名（全国排名前十的兽药厂）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>