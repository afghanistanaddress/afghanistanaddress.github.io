<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1659.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>JAVA锁  ——  ReentrantLock公平锁和非公平锁原理详解 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">JAVA锁  ——  ReentrantLock公平锁和非公平锁原理详解</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <blockquote> <p><strong>一、简介：</strong></p> </blockquote> <p>ReentrantLock的实现是基于其内部类<span style="color:#f33b45;">FairSync</span>(公平锁)和<span style="color:#f33b45;">NonFairSync</span>(非公平锁)实现的。 其<span style="color:#f33b45;">可重入性</span>是基于<span style="color:#f33b45;">Thread.currentThread()</span>实现的：如果当前线程已经获得了执行序列中的锁， 那执行序列之后的所有方法都可以获得这个锁。</p> <h3>1、公平锁</h3> <ul> <li>公平和非公平锁的队列都基于<span style="color:#f33b45;">锁内部维护的一个双向链表</span>，表结点<span style="color:#f33b45;">Node的值</span>就是<span style="color:#f33b45;">每一个请求当前锁的线程</span>。<span style="color:#f33b45;">公平锁</span>则在于每次都是依次从<span style="color:#f33b45;">队首取值</span>。</li> <li>锁的实现方式是基于如下几点：<br /> &nbsp; &nbsp; &nbsp; &nbsp;1、表结点Node和状态state的volatile关键字。<br /> &nbsp; &nbsp; &nbsp; &nbsp; 2、sum.misc.Unsafe.compareAndSet的原子操作(见附录)</li> </ul> <h3>2、非公平锁</h3> <p>在等待锁的过程中， 如果有任意新的线程妄图获取锁，都是有很大的几率直接获取到锁的。</p> <ul> <li>ReentrantLock锁都不会使得线程中断，除非开发者自己设置了中断位。</li> <li>ReentrantLock获取锁里面有看似自旋的代码，但是它不是自旋锁。</li> <li>ReentrantLock<span style="color:#f33b45;">公平与非公平锁都是属于排它锁</span>。</li> </ul> <blockquote> <p><strong>二、ReentrantLock的可重入性分析</strong></p> </blockquote> <p>ReentrantLock重入性是基于Thread.currentThread()实现的: 如果当前线程已经获得了锁， 那该<span style="color:#f33b45;">线程下的所有方法都可以获得这个锁</span>。ReentrantLock的锁依赖只有 NonfairSync和FairSync两个实现类， 他们的锁获取方式大同小异。</p> <pre class="has"><code class="language-java">//可重入性的实现基于下面代码片段的 else if 语句 protected final boolean tryAcquire(int acquires) {     final Thread current = Thread.currentThread();     int c = getState();     if (c == 0) {         ...         // 尝试获取锁成功     }     else if (current == getExclusiveOwnerThread()) {         // 是当前线程，直接获取到锁。实现可重入性。         int nextc = c + acquires;         if (nextc < 0)             throw new Error("Maximum lock count exceeded");         setState(nextc);         return true;     }     return false; }</code></pre> <p>此处有两个值需要关心：</p> <pre class="has"><code class="language-java">  	 //持有该锁的当前线程     private transient Thread exclusiveOwnerThread;      -----------------两个值不在同一个类----------------     /**      * 同步状态      * 0： 初始状态-无任何线程得到了锁      * > 0: 被线程持有， 具体值表示被当前线程持有的执行次数      * 这个字段在解锁的时候也需要用到。      * 注意这个字段的修饰词: volatile      */     private volatile int state;</code></pre> <blockquote> <p><strong>三、ReentrantLock锁的实现分析</strong></p> </blockquote> <p><strong>1、公平锁和非公平锁</strong></p> <p>ReentrantLock 的公平锁和非公平锁都委托了<span style="color:#f33b45;">AbstractQueuedSynchronizer#acquire</span>去请求获取。</p> <pre class="has"><code class="language-java">public final void acquire(int arg) {     if (!tryAcquire(arg) &&         acquireQueued(addWaiter(Node.EXCLUSIVE), arg))         selfInterrupt(); }</code></pre> <ul> <li><span style="color:#f33b45;">tryAcquire</span> 是一个抽象方法，是公平与非公平的实现原理所在。</li> <li>addWaiter 是<span style="color:#f33b45;">将当前线程结点加入等待队列之中</span>。公平锁在锁释放后会严格按照等到队列去取后续值，而非公平锁在对于新晋线程有很大优势。</li> <li><span style="color:#f33b45;">acquireQueued</span>在多次循环中尝试获取到锁或者将当前线程阻塞。</li> <li><span style="color:#f33b45;">selfInterrupt</span> 如果线程在阻塞期间发生了中断，调用<span style="color:#f33b45;">Thread.currentThread().interrupt()</span> 中断当前线程。</li> <li>ReentrantLock 对线程的阻塞是基于<span style="color:#f33b45;">LockSupport.park(this)</span>; (AbstractQueuedSynchronizer#parkAndCheckInterrupt，先决条件是当前节点有限次尝试获取锁失败。）</li> </ul> <p>公平锁和非公平锁在锁的获取上都使用到了<span style="color:#f33b45;">volatile 关键字修饰的state字段</span>， 这是保证<span style="color:#f33b45;">多线程环境下锁的获取与否的核心</span>。但是当并发情况下<span style="color:#f33b45;">多个线程都读取到 state == 0</span>时，则必须用到<span style="color:#f33b45;">CAS</span>技术，一门CPU的原子锁技术，可通过CPU对共享变量加锁的形式，实现数据变更的原子操作。volatile 和 CAS的结合是并发抢占的关键。</p> <h3>2、公平锁FairSync</h3> <p>公平锁的实现机理在于每次有线程来抢占锁的时候，都会<span style="color:#f33b45;">检查一遍有没有等待队列</span>，如果有， 当前线程会执行如下步骤：</p> <pre class="has"><code class="language-java">if (!hasQueuedPredecessors() && compareAndSetState(0, acquires)) {     setExclusiveOwnerThread(current);     return true; }</code></pre> <p>其中hasQueuedPredecessors是用于检查是否有等待队列的。</p> <pre class="has"><code class="language-java"> public final boolean hasQueuedPredecessors() {         Node t = tail; // Read fields in reverse initialization order         Node h = head;         Node s;         return h != t &&             ((s = h.next) == null || s.thread != Thread.currentThread());     }</code></pre> <h3>3、非公平锁NonfairSync</h3> <p>非公平锁在实现的时候多次强调随机抢占：</p> <pre class="has"><code class="language-java">if (c == 0) {     if (compareAndSetState(0, acquires)) {         setExclusiveOwnerThread(current);         return true;     } }</code></pre> <p>与公平锁的区别在于<span style="color:#f33b45;">新晋获取锁的进程会有多次机会去抢占锁</span>。如果被加入了等待队列后则跟公平锁没有区别。</p> <h3>4、ReentrantLock锁的释放</h3> <p>ReentrantLock锁的释放是逐级释放的，也就是说在可重入性场景中，必须要等到<span style="color:#f33b45;">场景内所有的加锁的方法都释放了锁， 当前线程持有的锁才会被释放。</span><br /> 释放的方式很简单， state字段减一即可：</p> <pre class="has"><code class="language-java">protected final boolean tryRelease(int releases) {     //  releases = 1     int c = getState() - releases;     if (Thread.currentThread() != getExclusiveOwnerThread())         throw new IllegalMonitorStateException();     boolean free = false;     if (c == 0) {         free = true;         setExclusiveOwnerThread(null);     }     setState(c);     return free; }</code></pre> <h3>5、ReentrantLock等待队列中元素的唤醒</h3> <p>当前<span style="color:#f33b45;">拥有锁的线程释放锁之后， 且非公平锁无线程抢占</span>，就开始线程唤醒的流程。<br /> 通过tryRelease释放锁成功，调用LockSupport.unpark(s.thread); 终止线程阻塞。</p> <pre class="has"><code class="language-java">private void unparkSuccessor(Node node) {     // 强行回写将被唤醒线程的状态     int ws = node.waitStatus;     if (ws < 0)         compareAndSetWaitStatus(node, ws, 0);     Node s = node.next;     // s为h的下一个Node, 一般情况下都是非Null的     if (s == null || s.waitStatus > 0) {         s = null;         // 否则按照FIFO原则寻找最先入队列的并且没有被Cancel的Node         for (Node t = tail; t != null && t != node; t = t.prev)             if (t.waitStatus <= 0)                 s = t;     }     // 再唤醒它     if (s != null)         LockSupport.unpark(s.thread); }</code></pre> <h3>6、ReentrantLock内存可见性分析</h3> <pre class="has"><code class="language-java">try {     lock.lock();     i ++; } finally {     lock.unlock(); }</code></pre> <p>可以发现哪怕在不使用 volatile关键字修饰元素i的时候， 这里的i 也是没有并发问题的。<br /><span style="color:#f33b45;">volatile 是Java语言的关键字， 功能是保证被修饰的元素(共享变量)</span>：</p> <ul> <li>任何<span style="color:#f33b45;">进程在读取</span>的时候，都会清空本进程里面持有的共享变量的值，<span style="color:#f33b45;">强制从主存里面获取</span>；</li> <li>任何<span style="color:#f33b45;">进程在写入完毕</span>的时候，都会强制<span style="color:#f33b45;">将共享变量的值写会主存</span>。</li> <li>volatile 会干预指令重排。</li> <li>volatile 实现了<span style="color:#f33b45;">JMM规范的 happen-before 原则</span>。</li> </ul> <p>并发编程之ReentrantLock公平锁和非公平锁原理详解</p> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1658.htm">vue3使用vuex实现页面实时更新数据（setup）</a></p>
                                                        <p>下一个：<a href="/html/category/article-1660.htm">Vue2.0 Vue路由 全局后置路由守卫</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6856.htm" title="扬州宠物店在什么地方（扬州宠物店在什么地方开）">扬州宠物店在什么地方（扬州宠物店在什么地方开）</a></li>
                        <li class="py-2"><a href="/html/category/article-7455.htm" title="动物打一针疫苗多少钱啊（动物打疫苗的作用）">动物打一针疫苗多少钱啊（动物打疫苗的作用）</a></li>
                        <li class="py-2"><a href="/html/category/article-6949.htm" title="北京宠物鸟医院（北京哪家宠物医院能看鸟）">北京宠物鸟医院（北京哪家宠物医院能看鸟）</a></li>
                        <li class="py-2"><a href="/html/category/article-6902.htm" title="猫主动爬你身上说明了什么不是主人（猫主动爬你身上说明了什么不是主人的表现）">猫主动爬你身上说明了什么不是主人（猫主动爬你身上说明了什么不是主人的表现）</a></li>
                        <li class="py-2"><a href="/html/category/article-6626.htm" title="韩式烤肉做法（韩式烤肉做法牛肉腌制窍门）">韩式烤肉做法（韩式烤肉做法牛肉腌制窍门）</a></li>
                        <li class="py-2"><a href="/html/category/article-7225.htm" title="被猫抓伤渗了一点点血需要打疫苗吗（被猫抓伤渗了一点点血要打破伤风吗）">被猫抓伤渗了一点点血需要打疫苗吗（被猫抓伤渗了一点点血要打破伤风吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6028.htm" title="宠物粮食加工厂设备哪的好点 宠物粮食加工厂设备哪的好点呢">宠物粮食加工厂设备哪的好点 宠物粮食加工厂设备哪的好点呢</a></li>
                        <li class="py-2"><a href="/html/category/article-6811.htm" title="猫咪多长时间做一次体内外驱虫啊（猫咪多长时间驱虫）">猫咪多长时间做一次体内外驱虫啊（猫咪多长时间驱虫）</a></li>
                        <li class="py-2"><a href="/html/category/article-7500.htm" title="全国宠物粮食基地排名前十（全国宠物粮食基地排名前十名）">全国宠物粮食基地排名前十（全国宠物粮食基地排名前十名）</a></li>
                        <li class="py-2"><a href="/html/category/article-6011.htm" title="宠物店利润有多大（宠物店利润有多大啊）">宠物店利润有多大（宠物店利润有多大啊）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>