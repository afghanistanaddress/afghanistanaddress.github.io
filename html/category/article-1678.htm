<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1678.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>在Spring配置文件中自定义标签如何实现 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">在Spring配置文件中自定义标签如何实现</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h3 id="spring-配置文件自定义标签的前置条件">Spring 配置文件自定义标签的前置条件</h3> <p>在上一篇文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/redwinter/p/16165274.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/redwinter/p/16165274.html</a><code>Spring BeanFactory</code>的创建过程中了解了<code>BeanDefinition</code>的加载和<code>BeanFactory</code>的创建，并且提到了<code>Spring</code>留了一个扩展点就是用户可以自定义标签进行解析<code>BeanDefinition</code>。</p> <p>基于<code>Spring</code>源码在处理定制的标签时是通过定制的命名空间处理器和<code>xsd</code>文件进行解析的，在<code>spring</code>的<code>classpath</code>下的<code>META-INF/spring.schemas</code>和<code>META-INF/spring.handlers</code>，并且需要将标签的解析器注册到<code>BeanDefinition</code>的解析器中，这样说起来比较抽象，接下来我们自己定义一个标签就明了了。</p> <h3 id="定义标签属性类">定义标签属性类</h3> <p>创建一个需要解析的标签的属性，比如在<code>Spring</code>配置文件中经常看到的<code>&lt;context:component-scan base-package="com.redwinter.test"/&gt;</code> ，这里的<code>component-scan</code>就是标签属性。</p> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class Redwinter {  	private String username; 	private String email; 	private String password;  	public String getUsername() { 		return username; 	}  	public void setUsername(String username) { 		this.username = username; 	}  	public String getEmail() { 		return email; 	}  	public void setEmail(String email) { 		this.email = email; 	}  	public String getPassword() { 		return password; 	}  	public void setPassword(String password) { 		this.password = password; 	} }</code></pre> <p>定义一个<code>Redwinter</code>类，里面三个属性，当然你可以自己定义你需要的属性，我这里就随便写啦。</p> <h3 id="定义标签属性解析器类">定义标签属性解析器类</h3> <p>定义好标签的属性之后就需要定义一个解析器对这些属性进行解析，定义解析器需要继承<code>AbstractSingleBeanDefinitionParser</code>，这个类是实现了<code>BeanDefinitionParser</code>的类，他下面有很多实现类，一般来说我们的Bean都是单例的，那就继承<code>AbstractSingleBeanDefinitionParser</code>即可。</p> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class RedwinterBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {  	@Override 	protected Class&lt;?&gt; getBeanClass(Element element) { 		return Redwinter.class; 	}  	@Override 	protected void doParse(Element element, BeanDefinitionBuilder builder) { 		/** 		 * 自定义解析xml的自定义字段，并做相应的其他处理 		 */ 		String username = element.getAttribute("username"); 		String email = element.getAttribute("email"); 		String password = element.getAttribute("password"); 		if (StringUtils.hasText(username)){ 			builder.addPropertyValue("username",username); 		} 		if (StringUtils.hasText(email)){ 			builder.addPropertyValue("email",email); 		} 		if (StringUtils.hasText(password)){ 			builder.addPropertyValue("password",password); 		} 	} }</code></pre> <p>这个解析器主要是重写了父类的两个方法，一个是<code>getBeanClass</code>用于返回对应的标签属性类，一个是解析属性<code>doParser</code>，这里我只是从<code>element</code>中获取出来然后进行了下判断在加入到属性值中，当然这里你可以自定义自己的逻辑处理。</p> <h3 id="定义命名空间处理器类">定义命名空间处理器类</h3> <p>定义命名空间处理器需要继承NamespaceHandlerSupport，然后重写他的init方法，将解析器注册进去，这个解析器就是上面定义的用来解析标签属性的解析器。</p> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class RedwinterNameSpaceHandler extends NamespaceHandlerSupport { 	@Override 	public void init() { 		// 这里的属性必须和xsd中指定的属性一致，否则报错 		//org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Cannot locate BeanDefinitionParser for element [dl] 		registerBeanDefinitionParser("dl",new RedwinterBeanDefinitionParser()); 	} }</code></pre> <p><strong>这里需要注意的是</strong>，进行注册时需要指定一个<code>elementName</code>，这个值必须和xml中定义的名称一致，否者的话就会报如下错：</p> <pre><code class="language-java">org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Cannot locate BeanDefinitionParser for element [dl]</code></pre> <p>我这里定义的元素名称叫<strong>dl</strong>。</p> <h3 id="定义xsd文件">定义xsd文件</h3> <p>xsd文件就是spring进行xml解析时解析的标签，当然你可以定义dtd文件，不过现在一般都用xsd文件，我这里命名为redwinter.xsd，完整文件如下：</p> <pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;  &lt;xsd:schema xmlns="http://www.redwinter.com/schema/redwinter" 			xmlns:xsd="http://www.w3.org/2001/XMLSchema" 			targetNamespace="http://www.redwinter.com/schema/redwinter" 			elementFormDefault="qualified" 			attributeFormDefault="unqualified"&gt; 	&lt;xsd:element name="dl"&gt; 		&lt;xsd:complexType&gt; 			&lt;xsd:attribute name="id" type="xsd:string"/&gt; 			&lt;xsd:attribute name="username" type="xsd:string" use="required"/&gt; 			&lt;xsd:attribute name="email" type="xsd:string" use="required"/&gt; 			&lt;xsd:attribute name="password" type="xsd:string" use="required"/&gt; 		&lt;/xsd:complexType&gt; 	&lt;/xsd:element&gt; &lt;/xsd:schema&gt;</code></pre> <p><strong>这里有几个点需要注意：</strong><code>schema</code>标签下有个<code>targetNamespace</code>，这里指定了命名空间叫http://www.redwinter.com/schema/redwinter ，那么在进行<code>spring</code>配置文件的时候引入的<code>namespace</code>就是这个，然后有个<code>name="dl"</code>，这里的这个<code>dl</code>就是处理器中定义的元素名称，而且必须一致，不然解析不到，下面定义的属性就是标签属性类中定义的刷新，这个<code>id</code>是表示唯一的<code>Bean</code>名称。</p> <h3 id="编写springschemas和springhandlers文件">编写spring.schemas和spring.handlers文件</h3> <p>这里直接列出完整文件内容：</p> <ul> <li><code>spring.schemas</code>文件</li> </ul> <pre><code class="language-properties">http\://www.redwinter.com/schema/redwinter.xsd=META-INF/redwinter.xsd</code></pre> <p>这里需要注意的是，这里配置的<code>key</code>也是需要在<code>spring</code>配置文件中引入的，<code>value</code>就是上一步定义的<code>xsd</code>文件所在路径</p> <ul> <li><code>spring.handlers</code>文件</li> </ul> <pre><code class="language-properties">http\://www.redwinter.com/schema/redwinter=com.redwinter.test.RedwinterNameSpaceHandler</code></pre> <p>这里配置的<code>key</code>就是上一步定义的<code>xsd</code>文件中定义的<code>targetNamespace</code>，<code>value</code>就是定义的命名空间处理器。</p> <p>到这里自定义标签和解析就完成了，最后就需要在spring配置文件中引入并配置。</p> <h3 id="验证自定义属性标签">验证自定义属性标签</h3> <p>我这里定义个角<code>spring-test.xml</code>的文件进行配置</p> <pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" 	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" 	   xmlns:context="http://www.springframework.org/schema/context" 	   xmlns:redwinter="http://www.redwinter.com/schema/redwinter" 	   xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd 		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd 		http://www.redwinter.com/schema/redwinter  http://www.redwinter.com/schema/redwinter.xsd 		"&gt; 	&lt;!--自定义标签--&gt; 	&lt;redwinter:dl id ="redwinter" email="abc@qq.com" password="123456" username="冬玲记忆"/&gt; 	&lt;redwinter:dl id ="redwinter123456"  email="123456-abc@qq.com" password="123456" username="冬玲记忆"/&gt;  &lt;/beans&gt;</code></pre> <p>验证是否配置正确：</p> <pre><code class="language-java">public class BeanCreate {  	@Test 	public void classPathXml() { //		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:spring-test.xml"); 		ClassPathXmlApplicationContext context = new MyClassPathXmlApplicationContext("classpath:spring-test.xml");        		Redwinter redwinter = (Redwinter) context.getBean("redwinter"); 		System.out.println(redwinter.getEmail());  		Redwinter redwinter123456 = (Redwinter) context.getBean("redwinter123456"); 		System.out.println(redwinter123456.getEmail()); 	} }</code></pre> <p>输出：</p> <pre><code class="language-java">abc@qq.com 123456-abc@qq.com</code></pre> <p>那说明自定义标签生效了，并且成功解析出来。</p> <p>接下来就是继续介绍<code>Spring</code> 容器的实现<code>AbstractApplicationContex#refresh</code>的第三个方法，这个方法其实就是<code>BeanFactory</code>使用的前戏准备，而第一个方法是<code>BeanFactory</code>刷新的前戏准备。</p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1677.htm">Java中无法访问的语句错误</a></p>
                                                        <p>下一个：<a href="/html/category/article-1679.htm">vue实现无限消息无缝滚动_vue.js</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1884.htm" title="Springboot：拦截器和过滤器">Springboot：拦截器和过滤器</a></li>
                        <li class="py-2"><a href="/html/category/article-1853.htm" title="分布式服务请求报错：Read timed out executing POST http://businessApi/app/app/login">分布式服务请求报错：Read timed out executing POST http://businessApi/app/app/login</a></li>
                        <li class="py-2"><a href="/html/category/article-1879.htm" title="springMVC中的@RequestMapping注解">springMVC中的@RequestMapping注解</a></li>
                        <li class="py-2"><a href="/html/category/article-1874.htm" title="Vue中的插槽">Vue中的插槽</a></li>
                        <li class="py-2"><a href="/html/category/article-1852.htm" title="mysql 时间戳定义_mysql之TIMESTAMP（时间戳）用法详解">mysql 时间戳定义_mysql之TIMESTAMP（时间戳）用法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1881.htm" title="【Azure 应用服务】Azure Function 启用 Managed Identity后， Powershell Funciton出现 ERROR: ManagedIdentityCredential authentication failed">【Azure 应用服务】Azure Function 启用 Managed Identity后， Powershell Funciton出现 ERROR: ManagedIdentityCredential authentication failed</a></li>
                        <li class="py-2"><a href="/html/category/article-1886.htm" title="TensorFlow运行出错：UnicodeEncodeError: &#8216;utf-8&#8217; codec can&#8217;t encode character &#8216;\udcce&#8217; in position 2559: s">TensorFlow运行出错：UnicodeEncodeError: &#8216;utf-8&#8217; codec can&#8217;t encode character &#8216;\udcce&#8217; in position 2559: s</a></li>
                        <li class="py-2"><a href="/html/category/article-1851.htm" title="PHP可见性模式">PHP可见性模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1858.htm" title="Vue实现评论功能">Vue实现评论功能</a></li>
                        <li class="py-2"><a href="/html/category/article-1865.htm" title="java数据类型（8个基本数据类型+3个引用数据类型）与数据类型转换知识点">java数据类型（8个基本数据类型+3个引用数据类型）与数据类型转换知识点</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>