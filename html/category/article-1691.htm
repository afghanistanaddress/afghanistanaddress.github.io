<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1691.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>python+pytest接口自动化(13)-token关联登录 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">python+pytest接口自动化(13)-token关联登录</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<p>在PC端登录公司的后台管理系统或在手机上登录某个APP时，经常会发现登录成功后，返回参数中会包含token，它的值为一段较长的字符串，而后续去请求的请求头中都需要带上这个token作为参数，否则就提示需要先登录。</p> <p>这其实就是状态或会话保持的第三种方式<code>token</code>。</p> <h2 id="一-什么是token">一. 什么是token</h2> <p>token 由服务端产生，是客户端用于请求的身份令牌。第一次登录成功时，服务端会生成一个包含用户信息的加密字符串token，返回给客户端并保存在本地，后续客户端只需要带上token进行请求即可，无需带上用户名密码。</p> <p>token原理简单概括如下：</p> <ol> <li> <p>用户首次登录成功后，服务端会生成一个token值，服务端会将它保存保存在数据库中，同时也会将它返回给客户端；</p> </li> <li> <p>客户端拿到token值后，保存在本地；</p> </li> <li> <p>后续客户端再次发送除登录外的其他请求时，会把保存在本地的token值作为参数一起发送给服务端；</p> </li> <li> <p>服务端收到客户端的请求后，会拿发送过来的token值与保存在数据库中的token值进行比较；</p> </li> <li> <p>如果两个token值相同， 则说明当前用户处于登录状态；</p> </li> <li> <p>如果数据库中没有这个token值或者token值已经生效，则需用户重新登录。</p> </li> </ol> <h2 id="二-token场景处理">二. token场景处理</h2> <p>公司某管理后台系统，登录后返回token，接着去请求其他接口时请求头中都需要加上这个token，否则提示请先登录。</p> <p>请求该系统的登录接口如下：</p> <pre><code class="language-python"># @author: 给你一页白纸 # 微信公众号：测试上分之路  import requests import json  headers = {"Content-Type": "application/json;charset=utf8"} url = "http://127.0.0.1:5000/login" _data = {     "username": "刘德华",     "password": "123456" } res = requests.post(url=url, headers=headers, json=_data).text print(res)</code></pre> <p>结果如下：</p> <pre><code class="language-json">{   "code": 1000,    "msg": "登录成功！",    "token": "sh34ljjl08s32730djsh34ljjl08s32730djsh34ljjl08s32730djsh34ljjl08s32730djsh34ljjl08s32730djsh34ljjl08s32730dj" }</code></pre> <p>在对扎样的项目做接口自动化测试时，需要先请求登录接口拿到token，再去请求别的接口。每次请求其他接口时先请求一次登录接口，这样做虽然可行，但这样不仅会降低自动化的执行效率，而且每次都请求登录也会对服务器资源造成浪费。</p> <p>这里介绍如下两种处理思路。</p> <h3 id="1-思路一">1. 思路一</h3> <p>在执行用例之前，先请求登录接口，并将返回的token值存储在文件中(如yaml文件)，后续请求需要用到token值则从该文件。</p> <p>python中yaml文件的读写请参考我之前的文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/lfr0123/p/13652243.html"  target="_blank" rel="nofollow">Python读写yaml文件（使用PyYAML库）</a>。</p> <p>1，运行接口自动化测试框架，初始化时先请求登录接口，获取token值，并写入指定的yaml文件中。</p> <pre><code class="language-python"># @author: 给你一页白纸 # 微信公众号：测试上分之路  import requests import json import yaml  def get_token():     '''     请求登录接口，获取token     :return:     '''     headers = {"Content-Type": "application/json;charset=utf8"}     url = "http://127.0.0.1:5000/login"     _data = {         "username": "刘德华",         "password": "123456"     }     res = requests.post(url=url, headers=headers, json=_data).text     res = json.loads(res)     token = res["token"]     return token   def write_yaml(token):     '''     写入yaml文件     :return:     '''     t_data = {         "token": token     }     with open("yaml文件路径", "w", encoding="utf-8") as f:         yaml.dump(data=t_data,  stream=f, allow_unicode=True)   if __name__ == '__main__':     token = get_token() # 获取token     write_yaml(token)   # 将token值写入yaml文件</code></pre> <p>2，执行测试用例时先读取yaml文件中token值，并将token加入headers中(也有些是将token放在请求参数中，视被测试项目具体情况而定)，再发送请求。</p> <pre><code class="language-python"># @author: 给你一页白纸 # 微信公众号：测试上分之路  import requests import yaml import pytest import json  def read_yaml():     '''     读yaml文件     :return:     '''     with open('yaml文件路径', 'r', encoding='utf-8') as f:         result = yaml.load(f.read(), Loader=yaml.FullLoader)     token = result["token"]     return token   def test_check_user():     '''     查询个人信息（需要先登录系统）     :return:     '''     # 先从yaml文件中读取token     token = read_yaml()     # 再将token添加到请求头中     headers = {         "Content-Type": "application/json;charset=utf8",         "token": token     }      url = "http://127.0.0.1:5000/users/3"     res = requests.get(url=url, headers=headers).text     # 返回结果为json格式，转换为字典     res = json.loads(res)     # 断言code是否为1000     assert res["code"] == 1000   if __name__ == '__main__':     pytest.main()</code></pre> <p>这里仅仅只是举例说明，而在实际的框架中，我们需要把这些诸如yaml文件的读写这样的函数单独封装在某个模块中，供其他模块调用，这样会代码会更加清晰简洁。</p> <h3 id="2-思路二">2. 思路二</h3> <p>利用pytest中的Fixture函数，作用域设置为session，并返回token值，后续测试方法/函数调用该Fixture函数。</p> <p>pytest中Fixture的使用请参考我之前的文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/lfr0123/p/15894978.html"  target="_blank" rel="nofollow">pytest(6)-Fixture(固件)</a>。</p> <p>1，首先，在conftest中定义一个作用域为session的Fixture函数，用于请求登录接口返回token。</p> <pre><code class="language-python"># @author: 给你一页白纸 # 微信公众号：测试上分之路  import pytest import requests import json  @pytest.fixture(scope="session") def get_token_fixture():     '''     作用域为session的fixture函数，返回token     :return:     '''     headers = {"Content-Type": "application/json;charset=utf8"}     url = "http://127.0.0.1:5000/login"     _data = {         "username": "刘德华",         "password": "123456"     }     res = requests.post(url=url, headers=headers, json=_data).text     res = json.loads(res)     token = res["token"]     return token</code></pre> <p>2，接着，测试用例调用该Fixture。</p> <pre><code class="language-python">def test_check_user(get_token_fixture):     '''     查询个人信息（需要先登录系统）     :return:     '''     # 通过Fixture函数g获取et_token_fixture值，即token，再将token添加到请求头中     headers = {         "Content-Type": "application/json;charset=utf8",         "token": get_token_fixture     }      url = "http://127.0.0.1:5000/users/3"     res = requests.get(url=url, headers=headers).text     res = json.loads(res)     print(res)     print(headers)     assert res["code"] == 1000   if __name__ == '__main__':     pytest.main()</code></pre> <p>执行测试用例结果如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8efdc6a246a9a0a9c7c8cf766bd6bf02.jpg" alt="python+pytest接口自动化(13)-token关联登录"></p> <p>说明思路二也是可行的，当然这里只执行了一条测试用例，如果执行很多的用例，效果会是怎样还没去验证，大家可以试试看。</p> <h2 id="三-总结">三. 总结</h2> <ol> <li>相对于Session/Cookies来说，请求量较大或者涉及第三方接口的系统，使用token更适合。</li> <li>有些项目token是放在请求头中发送的，而有一些项目则是放在请求参数里发送的，做接口自动化时要明确是哪种方式。</li> <li>接口自动化处理token时这两种思路可任选一种，如果使用pytest框架的话建议尝试思路二。</li> </ol> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1690.htm">Parquet文件格式介绍和读写流程</a></p>
                                                        <p>下一个：<a href="/html/category/article-1692.htm">基于Composer的Laravel扩展包开发工作流 ，实现laravle项目的文件管理</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1870.htm" title="SpringBoot 简洁明了将导入Excel到数据库">SpringBoot 简洁明了将导入Excel到数据库</a></li>
                        <li class="py-2"><a href="/html/category/article-1873.htm" title="mysql用哪种时间_mysql存储日期使用什么类型">mysql用哪种时间_mysql存储日期使用什么类型</a></li>
                        <li class="py-2"><a href="/html/category/article-1898.htm" title="Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]">Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]</a></li>
                        <li class="py-2"><a href="/html/category/article-3134.htm" title="SpringMVC-@RequestMapping注解">SpringMVC-@RequestMapping注解</a></li>
                        <li class="py-2"><a href="/html/category/article-1900.htm" title="网页盒子水平布局方式">网页盒子水平布局方式</a></li>
                        <li class="py-2"><a href="/html/category/article-1901.htm" title="如何在MySQL中将算术运算符（+，-，*，/）与INTERVAL关键字的单位值一起使用？">如何在MySQL中将算术运算符（+，-，*，/）与INTERVAL关键字的单位值一起使用？</a></li>
                        <li class="py-2"><a href="/html/category/article-2835.htm" title="在C ++中验证堆栈序列">在C ++中验证堆栈序列</a></li>
                        <li class="py-2"><a href="/html/category/article-1923.htm" title="layUI利用JQuery设置select下拉列表的值重新渲染">layUI利用JQuery设置select下拉列表的值重新渲染</a></li>
                        <li class="py-2"><a href="/html/category/article-1881.htm" title="【Azure 应用服务】Azure Function 启用 Managed Identity后， Powershell Funciton出现 ERROR: ManagedIdentityCredential authentication failed">【Azure 应用服务】Azure Function 启用 Managed Identity后， Powershell Funciton出现 ERROR: ManagedIdentityCredential authentication failed</a></li>
                        <li class="py-2"><a href="/html/category/article-1887.htm" title="Vue.Draggable 文档总结">Vue.Draggable 文档总结</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>