<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1707.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>站在巨人的肩膀上重新审视C# Span&lt;T&gt;数据结构_在线工具 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">站在巨人的肩膀上重新审视C# Span&lt;T&gt;数据结构_在线工具</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<p>先谈一下我对Span的看法， span是指向任意连续内存空间的类型安全、内存安全的视图。</p> <p>如果你了解【滑动窗口】， 对Span的操作还可以理解为 针对连续内存空间的 滑动窗口。</p> <blockquote> <p>Span和Memory都是包装了可以在pipeline上使用的结构化数据的内存缓冲器,他们被设计用于在pipeline中高效传递数据。</p> </blockquote> <h2 id="定语解读">定语解读</h2> <ol> <li> <strong>指向任意连续内存空间</strong>： 支持托管堆，原生内存、堆栈， 这个可从Span<t>的几个重载构造函数窥视一二。</t> </li> <li> <strong>类型安全</strong>： Span<t> 是一个泛型</t> </li> <li> <strong>内存安全</strong>： <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Span.cs"  target="_blank"  rel="nofollow">Span<t></t></a>是一个<code>readonly ref struct</code>数据结构, 用于表征一段连续内存的关键属性被设置成只读readonly， 保证了所有的操作只能在这段内存块内，不存在内存越界的风险。</li> </ol> <pre><code>// 截取自Span源码，表征一段连续内存的关键属性 Pointer &amp; Length 都只能从构造函数赋值  public readonly ref struct Span&lt;T&gt; {     /// &lt;summary&gt;A byref or a native ptr.&lt;/summary&gt;     internal readonly ByReference&lt;T&gt; _reference;     /// &lt;summary&gt;The number of elements this Span contains.&lt;/summary&gt;     private readonly int _length;          [MethodImpl(MethodImplOptions.AggressiveInlining)]     public Span(T[]? array)     {        if (array == null)        {            this = default;            return; // returns default        }        if (!typeof(T).IsValueType &amp;&amp; array.GetType() != typeof(T[]))            ThrowHelper.ThrowArrayTypeMismatchException();       _reference = new ByReference&lt;T&gt;(ref MemoryMarshal.GetArrayDataReference(array));       _length = array.Length;    } } </code></pre> <ol start="4"> <li> <strong>视图</strong>：操作结果会直接体现在底层的连续内存。</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/9ae46d3d918149c698860898aed8ed54.jpg" alt="站在巨人的肩膀上重新审视C# Span&lt;T&gt;数据结构_在线工具"></p> <p>至此我们来看一个简单的用法， 利用span操作指向一段堆栈空间。</p> <pre><code>static  void  Main()         {              Span&lt;byte&gt; arraySpan = stackalloc byte[100];  // 包含指针和Length的只读指针, 类似于go里面的切片              byte data = 0;             for (int ctr = 0; ctr &lt; arraySpan.Length; ctr++)                 arraySpan[ctr] = data++;              arraySpan.Fill(1);              var arraySum = Sum(arraySpan);             Console.WriteLine($"The sum is {arraySum}");   // 输出100              arraySpan.Clear();              var slice  =  arraySpan.Slice(0,50); // 因为是只读属性， 内部New Span&lt;&gt;(), 产生新的切片             arraySum = Sum(slice);             Console.WriteLine($"The sum is {arraySum}");  // 输出0         }          [MethodImpl(MethodImplOptions.AggressiveInlining)]         static int  Sum(Span&lt;byte&gt; array)         {             int arraySum = 0;             foreach (var value in array)                 arraySum += value;              return arraySum;         } </code></pre> <ul> <li>此处Span<byte> 指向了特定的堆栈空间， Fill,Clear 等操作的效果直接体现到该段内存。</byte> </li> <li>注意Slice切片方法，内部实质是产生新的Span，也是一个新的视图，对新span的操作会体现到原始底层数据结构。</li> </ul> <pre><code>  [MethodImpl(MethodImplOptions.AggressiveInlining)]         public Span&lt;T&gt; Slice(int start)         {             if ((uint)start &gt; (uint)_length)                 ThrowHelper.ThrowArgumentOutOfRangeException();              return new Span&lt;T&gt;(ref Unsafe.Add(ref _reference.Value, (nint)(uint)start /* force zero-extension */), _length - start);         } </code></pre> <p>从Slice切片源码，看到利用现有的ptr 和length，产生了新的操作视图，ptr的计算有赖于原ptr移动指针，但是依旧是作用在原始数据块上。</p> <h2 id="衍生技能点">衍生技能点</h2> <p>我们再细看Span的定义， 有几个关键词建议大家温故而知新。</p> <ul> <li> <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct#readonly-struct"  target="_blank"  rel="nofollow">readonly  strcut</a> ：从C#7.2开始，你可以将readonly作用在struct上，指示该<strong>struct不可改变</strong>。</li> </ul> <blockquote> <p>span<t> 被定义为readonly struct，内部属性自然也是readonly，从上面的分析和实例看我们可以针对Span表征的特定连续内存空间做内容更新操作；<br /> 如果想限制更新该连续内存空间的内容， C#提供了<code>ReadOnlySpan&lt;T&gt;</code>类型， 该类型强调该块内存只读，也就是不存在Span<t> 拥有的Fill，Clear等方法。</t></t></p> </blockquote> <p>一线码农大佬写了文章讲述[使用span对字符串求和]的姿势，大家都说使用span能高效操作内存，我们对该用例BenchmarkDotnet压测。</p> <pre><code>using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Buffers; using System.Runtime.CompilerServices; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Running;  namespace ConsoleApp3 {   public class Program   {       static  void Main()       {           var summary = BenchmarkRunner.Run&lt;MemoryBenchmarkerDemo&gt;();       }   }    [MemoryDiagnoser,RankColumn]   public class MemoryBenchmarkerDemo   {       int NumberOfItems = 100000;        // 对字符串切割， 会产生字符串小对象       [Benchmark]       public void  StringSplit()       {           for (int i = 0; i &lt; NumberOfItems; i++)           {               var s = "97 3";                var arr = s.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);               var num1 = int.Parse(arr[0]);               var num2 = int.Parse(arr[1]);                _ = num1 + num2;           }                  }              // 对底层字符串切片       [Benchmark]       public void StringSlice()       {           for (int i = 0; i &lt; NumberOfItems; i++)           {               var s = "97 3";               var position = s.IndexOf(' ');               ReadOnlySpan&lt;char&gt; span = s.AsSpan();               var num1 = int.Parse(span.Slice(0, position));               var num2 = int.Parse(span.Slice(position));                _= num1+ num2;            }       }   } } </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/9104c68a03fb525442167b2f48783ea8.jpg" alt="站在巨人的肩膀上重新审视C# Span&lt;T&gt;数据结构_在线工具"></p> <p>解读：<br /> 对字符串运行时切分，不会利用驻留池，于是case1会在堆分配大量string小对象，对gc造成压力；<br /> case2对底层字符串切片，虽然会产生不同的透视对象Span， 但是实际还是指向的原始内存块的偏移区间，不存在内存分配。</p> <ul> <li> <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct"  target="_blank"  rel="nofollow">ref  struct</a>:从C#7.2开始，ref可以作用在struct，指示<strong>该类型被分配在堆栈上，并且不能转义到托管堆</strong>。</li> </ul> <blockquote> <p>Span<t>,ReadonlySpan<t> 包装了对于任意连续内存快的透视操作，但是只能被存储堆栈上，不适用于一些场景，例如异步调用，.NET Core 2.1为此新增了<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.microsoft.com/en-us/dotnet/standard/memory-and-spans/memory-t-usage-guidelines"  target="_blank"  rel="nofollow">Memory<t></t></a> , ReadOnlyMemory<t>， 可以被存储在托管堆上, 按下不表。</t></t></t></p> </blockquote> <p>最后用一张图总结<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/147a1c4496d6281c62666dba5b43e69a.jpg" alt="站在巨人的肩膀上重新审视C# Span&lt;T&gt;数据结构_在线工具"></p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1706.htm">CSS 修改滚动条样式 隐藏浏览器滚动条</a></p>
                                                        <p>下一个：<a href="/html/category/article-1708.htm">java8 对LocalDate、localDateTime的操作</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1892.htm" title="如何将CONCAT()函数应用于MySQL表的列？">如何将CONCAT()函数应用于MySQL表的列？</a></li>
                        <li class="py-2"><a href="/html/category/article-2836.htm" title="C语言中常用的字符数组函数">C语言中常用的字符数组函数</a></li>
                        <li class="py-2"><a href="/html/category/article-1894.htm" title="小程序自定义导航栏组件">小程序自定义导航栏组件</a></li>
                        <li class="py-2"><a href="/html/category/article-1898.htm" title="Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]">Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]</a></li>
                        <li class="py-2"><a href="/html/category/article-4108.htm" title="C#关于在返回值为Task方法中使用Thread.Sleep引发的思考">C#关于在返回值为Task方法中使用Thread.Sleep引发的思考</a></li>
                        <li class="py-2"><a href="/html/category/article-4136.htm" title="C语言实现扫雷游戏（代码）">C语言实现扫雷游戏（代码）</a></li>
                        <li class="py-2"><a href="/html/category/article-3436.htm" title="记-Windows环境下Prometheus+alertmanager+windows_exporter+mtail监控部署提起网关日志">记-Windows环境下Prometheus+alertmanager+windows_exporter+mtail监控部署提起网关日志</a></li>
                        <li class="py-2"><a href="/html/category/article-1900.htm" title="网页盒子水平布局方式">网页盒子水平布局方式</a></li>
                        <li class="py-2"><a href="/html/category/article-2541.htm" title="Spring Cloud Feign 分析之FeignClient注解实现版本兼容">Spring Cloud Feign 分析之FeignClient注解实现版本兼容</a></li>
                        <li class="py-2"><a href="/html/category/article-1951.htm" title="设计模式学习笔记（十三）组合模式及其在树形结构中的应用">设计模式学习笔记（十三）组合模式及其在树形结构中的应用</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">10</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>