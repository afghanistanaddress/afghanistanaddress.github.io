<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1722.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Kafka 认证三：添加 Kerberos 认证详细流程 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">Kafka 认证三：添加 Kerberos 认证详细流程</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h3> 背景</h3> <p>上一章节介绍了 Kerberos 服务端和客户端的部署过程，本章节继续介绍 Kafka 添加 Kerberos 认证的部署流程，及 Java API 操作的注意事项。</p> <h3> sasl.kerberos.service.name 配置的含义</h3> <p>Kafka 添加 Kerberos 部署的核心是 Kafka 服务端的 Principal 配置，它的 primary 部分必须配置在 properties 文件的 <code>sasl.kerberos.service.name</code> 属性中，而主机名部分必须保证 Kafka IP 的域名在 <code>/etc/hosts</code> 文件中存在。</p> <p>对 Kafka 客户端来说，合起来就是，<strong><code>sasl.kerberos.service.name</code> 的值/Kafka IP 或者 Kafka IP 对应的主机名称<code>@Realm</code></strong> 这三项拼接的成目标服务的 Principal，必须保证它在 KDC 数据库中。</p> <p>搜了好久都没有看到这个配置项的解释，反复操作后终于理解了这个属性的含义。</p> <p>例如，请求目标 Kafka IP 是 192.168.xx.1 ，Kafka 客户端发起 Kerberos 认证时，向 KDC 发送 AS_REQ，目标服务的 Principal 的计算过程如下：</p> <p>1）如果 <code>/etc/hosts</code> 文件中存在目标主机的域名，那么请求服务的 Principal 就是<br /><code>sasl.kerberos.service.name/主机名称@Realm</code> 。</p> <p>2） 如果 <code>/etc/hosts</code> 文件中不存在目标主机的域名，那么请求服务的 Principal 就是<br /><code>sasl.kerberos.service.name/目标IP@Realm</code> 。</p> <p>从 KDC 的日志看到这个结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/ff48a65d6a5050b85648f536b36e5fdd.jpg" alt="Kafka 认证三：添加 Kerberos 认证详细流程"></p> <p>例如，我这个请求过程，Client 端主机配置了目标 Kafka IP 的的域名为 oracle ，这里Kerberos 票据认证过程就是这个。</p> <p><strong>结论就是，</strong> 针对客户端和服务端，这两个配置的含义分别是：</p> <p>1、Kafka 客户端最重要的 <code>sasl.kerberos.service.name + 目标 IP 的域名必须存在 KDC</code> 认证数据库中。</p> <p>2、Kafka 服务端 <code>sasl.kerberos.service.name + 本机域名</code>，必须是 jaas.config 文件中的 KafkaServer 的 principal 的值。</p> <h3> 主机域名准备</h3> <p>Kerberos 的 Principals 组成规则是：</p> <blockquote> <p>username/fully.qualified.domain.name@YOUR_REALM.COM</p> </blockquote> <p>作为服务端一般都是需要配置域名的，最好是客户端和服务端都配置服务器 IP 的域名，且必须统一，才能保证 Kerberos 认证流程正确，否则很容易出现 <code>Not found in Kerberos database</code> 的问题。</p> <p>对于Kafka 集群来说，集群主机的 Principal 的 username 相同，但是主机域名不同，客户端维护集群节点的域名，<code>sasl.kerberos.service.name</code> 配置就是各节点的 <code>username</code> 。</p> <p>Kafka Kerberos 认证环境搭建之前，必须先在客户端和服务器端的 <code>/etc/hosts</code> 文件中配置 Kafka Server IP 的域名。网上很多搭建教程，都是 Kafka 客户端和 Kafka 服务同主机，所以不会出现域名配置导致的问题。</p> <table> <thead> <tr> <th>角色</th> <th>IP</th> <th>Principal</th> </tr> </thead> <tbody> <tr> <td>Client</td> <td>192.168.10.101</td> <td>hello-kafka-client@MY_KDC.COM</td> </tr> <tr> <td>Server</td> <td>192.168.10.102</td> <td>hello-kafka-server/oracle@MY_KDC.COM</td> </tr> </tbody> </table> <p>这里 IP 随便写的，Kafka Client 的 IP 不需要配置域名，在 192.168.10.101 上维护目标服务器的域名，添加在 <code>/etc/hosts</code> 文件中，参考如下：</p> <pre><code class="prism language-typescript"><span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.102</span> oracle </code></pre> <p>在 Kafka 客户端主机上部署一份 kafka ，用于启动消费者应用；服务端正常部署 Kafka ，且在 kafka 主目录下创建一个 kerberos 文件夹，放 Kerberos 认证相关的配置文件。</p> <h3> KDC 注册客户端和服务端</h3> <p><strong>第零步，拷贝 krb5.conf。</strong></p> <p>拷贝 KDC 认证中心的 krb5.conf 文件到全部的 Kerberos 客户端，客户端最重要的系统环境变量就是 krb5.conf 文件的路径。所以，每个 KDC 的客户端都需要维护与 KDC 服务器端一致的 krb5.conf 文件，拷贝命令为：</p> <pre><code class="prism language-typescript">scp <span class="token operator">/</span>etc<span class="token operator">/</span>krb5<span class="token punctuation">.</span>conf root<span class="token decorator"><span class="token at operator">@</span><span class="token function">192</span></span><span class="token number">.168</span><span class="token number">.10</span><span class="token number">.101</span><span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>kafka<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.2</span><span class="token operator">/</span>kerberos<span class="token operator">/</span>krb5<span class="token punctuation">.</span>conf  scp <span class="token operator">/</span>etc<span class="token operator">/</span>krb5<span class="token punctuation">.</span>conf root<span class="token decorator"><span class="token at operator">@</span><span class="token function">192</span></span><span class="token number">.168</span><span class="token number">.10</span><span class="token number">.102</span><span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>kafka<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.2</span><span class="token operator">/</span>kerberos<span class="token operator">/</span>krb5<span class="token punctuation">.</span>conf </code></pre> <p>Java API 添加 Kerberos 认证的代码为：</p> <pre><code class="prism language-typescript">System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"java.security.krb5.conf"</span><span class="token punctuation">,</span> krb5Conf<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <p><strong>第一步，注册 Kerberos 帐号。</strong></p> <p>需要到 Kerberos 数据库中注册 Kafka 的客户端和服务端，按刚刚表里面的 Principal 注册到默认域名 <code>MY_KDC.COM</code> 中。</p> <p>在 Kerberos 服务器上，执行 <code>kadmin.local</code> 命令，输入下面操作，注册帐号：</p> <pre><code class="prism language-typescript">addprinc hello<span class="token operator">-</span>kafka<span class="token operator">-</span>client addprinc hello<span class="token operator">-</span>kafka<span class="token operator">-</span>server<span class="token operator">/</span>oracle </code></pre> <p>操作结果如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/5dba956f50a5317b4400a15c141936b9.jpg" alt="Kafka 认证三：添加 Kerberos 认证详细流程"></p> <p><strong>第二步，生成帐号的 keytab 文件。</strong> 对上面添加的两个 Kerberos 帐号，导出 keytab 文件：</p> <pre><code class="prism language-typescript">kadmin<span class="token punctuation">.</span>local <span class="token operator">-</span>q <span class="token string">"xst -norandkey -k  /root/hello-kafka-client.keytab hello-kafka-client@MY_KDC.COM"</span>  kadmin<span class="token punctuation">.</span>local <span class="token operator">-</span>q <span class="token string">"xst -norandkey -k  /root/hello-kafka-server.keytab hello-kafka-server/oracle@MY_KDC.COM"</span> </code></pre> <p>利用控制台命令 kadmin.local 导出 keytab 文件，客户端 keytab ：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/6e0ded2b5feb20bcd637b0397caed21c.jpg" alt="Kafka 认证三：添加 Kerberos 认证详细流程"><br /> 服务端 keytab 如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/e633ef20523ad84e9b9a78a8f0c432b5.jpg" alt="Kafka 认证三：添加 Kerberos 认证详细流程"></p> <p><strong>第三步，传输 keytab 文件。</strong> 将帐号的 keytab 文件远程传输到 Kafka 客户端和服务端，就是前面的 101 和 102 两台主机上。</p> <pre><code class="prism language-typescript">scp <span class="token operator">/</span>root<span class="token operator">/</span>hello<span class="token operator">-</span>kafka<span class="token operator">-</span>client<span class="token punctuation">.</span>keytab root<span class="token decorator"><span class="token at operator">@</span><span class="token function">192</span></span><span class="token number">.168</span><span class="token number">.10</span><span class="token number">.101</span><span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>kafka<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.2</span><span class="token operator">/</span>kerberos<span class="token operator">/</span>hello<span class="token operator">-</span>kafka<span class="token operator">-</span>client<span class="token punctuation">.</span>keytab  scp <span class="token operator">/</span>root<span class="token operator">/</span>hello<span class="token operator">-</span>kafka<span class="token operator">-</span>server<span class="token punctuation">.</span>keytab root<span class="token decorator"><span class="token at operator">@</span><span class="token function">192</span></span><span class="token number">.168</span><span class="token number">.10</span><span class="token number">.102</span><span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>kafka<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.2</span><span class="token operator">/</span>kerberos<span class="token operator">/</span>hello<span class="token operator">-</span>kafka<span class="token operator">-</span>server<span class="token punctuation">.</span>keytab </code></pre> <h3> Kafka 服务器部署 Kerberos</h3> <p><strong>第一步，准备 server-kerberos.properties 文件。</strong> 拷贝 Kafka config 目录下的 <code>server.properties</code> 文件，命名为 <code>kerberos-server.properties</code> ，编辑认证配置相关的内容：</p> <pre><code class="prism language-typescript">listeners<span class="token operator">=</span><span class="token constant">SASL_PLAINTEXT</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.102</span><span class="token operator">:</span><span class="token number">9092</span> advertised<span class="token punctuation">.</span>listeners<span class="token operator">=</span><span class="token constant">SASL_PLAINTEXT</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.102</span><span class="token operator">:</span><span class="token number">9092</span>  security<span class="token punctuation">.</span>inter<span class="token punctuation">.</span>broker<span class="token punctuation">.</span>protocol<span class="token operator">=</span><span class="token constant">SASL_PLAINTEXT</span> sasl<span class="token punctuation">.</span>mechanism<span class="token punctuation">.</span>inter<span class="token punctuation">.</span>broker<span class="token punctuation">.</span>protocol<span class="token operator">=</span><span class="token constant">GSSAPI</span> sasl<span class="token punctuation">.</span>enabled<span class="token punctuation">.</span>mechanisms<span class="token operator">=</span><span class="token constant">GSSAPI</span> sasl<span class="token punctuation">.</span>kerberos<span class="token punctuation">.</span>service<span class="token punctuation">.</span>name<span class="token operator">=</span>hello<span class="token operator">-</span>kafka<span class="token operator">-</span>server </code></pre> <p>主要就是上面的几项配置， <code>sasl.kerberos.service.name=hello-kafka-server</code> 就是当前 Kafka 的 keytab 文件中的 Principal 的 username 部分。</p> <p><strong>第二步，准备 server-jaas.conf 配置文件。</strong> kerberos 目录下，创建文件 <code>kafka-server-jaas.conf</code>，编辑内容如下：</p> <pre><code class="prism language-typescript">KafkaServer <span class="token punctuation">{<!-- --></span>    com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>module<span class="token punctuation">.</span>Krb5LoginModule required    useKeyTab<span class="token operator">=</span><span class="token boolean">true</span>    <span class="token comment">//不同的主机，需修改成不同的keytab文件</span>    keyTab<span class="token operator">=</span><span class="token string">"/opt/kafka-1.0.2/kerberos/hello-kafka-server.keytab"</span>    storeKey<span class="token operator">=</span><span class="token boolean">true</span>    useTicketCache<span class="token operator">=</span><span class="token boolean">false</span>    <span class="token comment">// Kafka Server 在 KDC 中的用户名全称</span>    principal<span class="token operator">=</span><span class="token string">"hello-kafka-server/oracle@MY_KDC.COM"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre> <p><strong>第三步，准备 kafka-server-kerberos-start.sh 文件，添加 Kerberos 认证配置。</strong> 拷贝 <code>bin/kafka-server-start.sh</code> 脚本，命名为 <code>kafka-server-kerberos-start.sh</code>，编辑最后一行，在最后一行代码之前，添加 Krb5 环境变量和 jaas.conf 配置信息：</p> <pre><code class="prism language-typescript"><span class="token keyword">export</span> <span class="token constant">KAFKA_OPTS</span><span class="token operator">=</span>"<span class="token operator">-</span>Dzookeeper<span class="token punctuation">.</span>sasl<span class="token punctuation">.</span>client<span class="token operator">=</span><span class="token boolean">false</span> <span class="token operator">-</span>Dzookeeper<span class="token punctuation">.</span>sasl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>username<span class="token operator">=</span>zk<span class="token operator">-</span>server  <span class="token operator">-</span>Djava<span class="token punctuation">.</span>security<span class="token punctuation">.</span>krb5<span class="token punctuation">.</span>conf<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>kafka<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.2</span><span class="token operator">/</span>kerberos<span class="token operator">/</span>krb5<span class="token punctuation">.</span>conf  <span class="token operator">-</span>Djava<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>login<span class="token punctuation">.</span>config<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>kafka<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.2</span><span class="token operator">/</span>kerberos<span class="token operator">/</span>kafka<span class="token operator">-</span>server<span class="token operator">-</span>jaas<span class="token punctuation">.</span>conf" </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/fd8274b3ede541bf32db160e3bd3d9e8.jpg" alt="Kafka 认证三：添加 Kerberos 认证详细流程"></p> <p><strong>第四步，启动 Kafka 服务。</strong> 用新建的脚本 <code>kafka-server-kerberos-start.sh</code> 和 配置 <code>kerberos-server.properties</code> 启动 Kafka ：</p> <pre><code class="prism language-typescript">bin<span class="token operator">/</span>kafka<span class="token operator">-</span>server<span class="token operator">-</span>start<span class="token operator">-</span>kerberos<span class="token punctuation">.</span>sh <span class="token operator">-</span>daemon kerberos<span class="token operator">/</span>kerberos<span class="token operator">-</span>server<span class="token punctuation">.</span>properties </code></pre> <h3> Kafka 客户端部署 Kerberos</h3> <p><strong>第一步，准备 client-kerberos.properties 文件。</strong> 拷贝 Kafka config 目录下的 <code>consumer.properties</code> 文件，命名为 <code>client-kerberos.properties</code> ，编辑认证配置相关的内容：</p> <pre><code class="prism language-typescript">bootstrap<span class="token punctuation">.</span>servers<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.102</span><span class="token operator">:</span><span class="token number">9092</span> group<span class="token punctuation">.</span>id<span class="token operator">=</span>test<span class="token operator">-</span>consumer<span class="token operator">-</span>group001 curity<span class="token punctuation">.</span>protocol<span class="token operator">=</span><span class="token constant">SASL_PLAINTEXT</span> sasl<span class="token punctuation">.</span>mechanism<span class="token operator">=</span><span class="token constant">GSSAPI</span> sasl<span class="token punctuation">.</span>kerberos<span class="token punctuation">.</span>service<span class="token punctuation">.</span>name<span class="token operator">=</span>hello<span class="token operator">-</span>kafka<span class="token operator">-</span>server </code></pre> <p><strong>第二步，准备 client-jaas.conf 配置文件。</strong> kerberos 目录下，创建文件 <code>kafka-client-jaas.conf</code>，编辑内容如下：</p> <pre><code class="prism language-typescript">KafkaClient <span class="token punctuation">{<!-- --></span>    com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>module<span class="token punctuation">.</span>Krb5LoginModule required    useKeyTab<span class="token operator">=</span><span class="token boolean">true</span>    <span class="token comment">//不同的主机，需修改成不同的keytab文件</span>    keyTab<span class="token operator">=</span><span class="token string">"/opt/kafka-1.0.2/kerberos/hello-kafka-client.keytab"</span>    storeKey<span class="token operator">=</span><span class="token boolean">true</span>    useTicketCache<span class="token operator">=</span><span class="token boolean">false</span>    <span class="token comment">// Client 在KDC中的帐号</span>    principal<span class="token operator">=</span><span class="token string">"hello-kafka-client@MY_KDC.COM"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre> <p><strong>第三步，准备 kafka-server-kerberos-start.sh 文件，添加 Kerberos 认证配置。</strong> 拷贝 <code>bin/kafka-console-consumer.sh</code> 脚本，命名为 <code>kerberos-kafka-console-consumer.sh</code>，编辑最后一行，在最后一行代码之前，添加 Krb5 环境变量和 jaas.conf 配置信息：</p> <pre><code class="prism language-typescript"><span class="token keyword">export</span> <span class="token constant">KAFKA_OPTS</span><span class="token operator">=</span>"<span class="token operator">-</span>Djava<span class="token punctuation">.</span>security<span class="token punctuation">.</span>krb5<span class="token punctuation">.</span>conf<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>kafka<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.2</span><span class="token operator">/</span>kerberos<span class="token operator">/</span>krb5<span class="token punctuation">.</span>conf  <span class="token operator">-</span>Djava<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>login<span class="token punctuation">.</span>config<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>kafka<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.2</span><span class="token operator">/</span>kerberos<span class="token operator">/</span>kafka<span class="token operator">-</span>client<span class="token operator">-</span>jaas<span class="token punctuation">.</span>conf" </code></pre> <p><strong>第四步，用第一步的配置文件，进行带认证的消费：</strong></p> <pre><code class="prism language-typescript">bin<span class="token operator">/</span>kerberos<span class="token operator">-</span>kafka<span class="token operator">-</span><span class="token builtin">console</span><span class="token operator">-</span>consumer<span class="token punctuation">.</span>sh <span class="token operator">--</span>bootstrap<span class="token operator">-</span>server <span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.102</span><span class="token operator">:</span><span class="token number">9092</span> <span class="token operator">--</span>topic  my<span class="token operator">-</span>topic <span class="token operator">--</span>consumer<span class="token punctuation">.</span>config<span class="token operator">=</span>kerberos<span class="token operator">/</span>client<span class="token operator">-</span>kerberos<span class="token punctuation">.</span>properties <span class="token operator">--</span>from<span class="token operator">-</span>beginning </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/3bc26639b92443c28bc61de95da44bc7.jpg" alt="Kafka 认证三：添加 Kerberos 认证详细流程"></p> <h3> KDC 日志查看认证过程</h3> <p>KDC 服务中心的日志文件是 <code>/var/log/krb5kdc.log</code> ，每次 Kerberos 认证都对应两条日志信息：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/f8f8931310c842b647a413ae41787c96.jpg" alt="Kafka 认证三：添加 Kerberos 认证详细流程"><br /> 如果 Kafka 服务启动或者客户端启动失败，也可以查看该日志文件，常见的错误就是主机和域名、服务名称配置不一致，导致 <code>Server not found in Kerberos database</code> 异常。</p> <p>另外，多域名问题，还没有找到解决办法。如果一个客户端的 krb5.conf 文件中配置多个 Realm ，默认只能有一个 Realm ，但是对于需要同时访问多个 Kafka 、多套认证 Realm 的应用来说，到底该怎么配置呢？</p> <h3> 启示录</h3> <p>官方 Kerberos 资料，没有耐心看下去，网络上搜到的，照猫画虎实践下来，其实也能部署下来的，关键是 kerberos.service.name 这个属性，想了两天才想明白，还有主机域名配置等基础支持等，零零碎碎，以此留存网络笔记。</p> </p></div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1721.htm">HTTPclient保持长连接</a></p>
                                                        <p>下一个：<a href="/html/category/article-1723.htm">springboot读取resources下文件方式</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6811.htm" title="猫咪多长时间做一次体内外驱虫啊（猫咪多长时间驱虫）">猫咪多长时间做一次体内外驱虫啊（猫咪多长时间驱虫）</a></li>
                        <li class="py-2"><a href="/html/category/article-6117.htm" title="1970年阴历四月二十二阳历是多少（1970年阴历四月二十四阳历是多少号）">1970年阴历四月二十二阳历是多少（1970年阴历四月二十四阳历是多少号）</a></li>
                        <li class="py-2"><a href="/html/category/article-7040.htm" title="广州猫领养中心地址查询电话（广州猫领养中心地址查询电话号码）">广州猫领养中心地址查询电话（广州猫领养中心地址查询电话号码）</a></li>
                        <li class="py-2"><a href="/html/category/article-6672.htm" title="收猫长期回收各种宠物猫 广州收猫长期回收各种宠物猫">收猫长期回收各种宠物猫 广州收猫长期回收各种宠物猫</a></li>
                        <li class="py-2"><a href="/html/category/article-7179.htm" title="被家猫抓伤轻微出血伤口有点疼要紧吗（被家猫抓伤出了一点点血）">被家猫抓伤轻微出血伤口有点疼要紧吗（被家猫抓伤出了一点点血）</a></li>
                        <li class="py-2"><a href="/html/category/article-6028.htm" title="宠物粮食加工厂设备哪的好点 宠物粮食加工厂设备哪的好点呢">宠物粮食加工厂设备哪的好点 宠物粮食加工厂设备哪的好点呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7454.htm" title="动物防疫疫苗种类大全及价格 动物防疫疫苗种类大全及价格表">动物防疫疫苗种类大全及价格 动物防疫疫苗种类大全及价格表</a></li>
                        <li class="py-2"><a href="/html/category/article-6581.htm" title="同城宠物狗免费领养在哪里（有没有同城领养宠物的小程序）">同城宠物狗免费领养在哪里（有没有同城领养宠物的小程序）</a></li>
                        <li class="py-2"><a href="/html/category/article-7455.htm" title="动物打一针疫苗多少钱啊（动物打疫苗的作用）">动物打一针疫苗多少钱啊（动物打疫苗的作用）</a></li>
                        <li class="py-2"><a href="/html/category/article-7546.htm" title="圣诞节送什么款式钻戒给女朋友比较好呢(圣诞节送什么款式钻戒给女朋友比较好看)">圣诞节送什么款式钻戒给女朋友比较好呢(圣诞节送什么款式钻戒给女朋友比较好看)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>