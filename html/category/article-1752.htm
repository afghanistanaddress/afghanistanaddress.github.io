<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1752.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>SpringSecurity核心功能详解 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">SpringSecurity核心功能详解</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h3><a id="_0" rel="nofollow"></a>前言</h3> <p>最近在潜心研究一下安全框架，并在此进行一下记录，如有不对还请不吝赐教。</p> <blockquote> <p>对于一个安全管理管理框架而言，无论是Shiro还是SpringSecurity，最核心的功能，无非就是两个</p> <ul> <li>认证：你是谁？</li> <li>授权：你可以做什么</li> </ul> </blockquote> <h4><a id="_17" rel="nofollow"></a>认证</h4> <p>SpringSecurity支持多种不同的认证方式，这些认证方式有的是SpringSecurity自己提供的认证功能，有的是第三方标准组织制定的。SpringSecurity集成的主流认证机制主要有如下几种：</p> <ul> <li>表单认证</li> <li>OAuth2.0认证</li> <li>SAML2.0认证</li> <li>CAS认证</li> <li>RememberMe自动认证</li> <li>JAAS认证</li> <li>OpenID认证</li> <li>Pre-Authentication Scenarios认证</li> <li>X509认证</li> <li>HTTP Basic认证</li> <li>HTTP Digest认证</li> </ul> <p>作为一个开放的平台，SpringSecurity提供的认证机制不仅仅包括上面，我们还可以通过引入第三方依赖来支持更多的认证方式，同时，如果这些认证方式无法满足我们的需求，我们也可以自定义认证逻辑，特别是当我们和一些“老破旧”的系统进行集成时，自定义认证就显得非常重要了。</p> <h4><a id="_37" rel="nofollow"></a>授权</h4> <p> 无论采用了上面哪种方式认证，都不影响在SpringSecurity中使用授权功能。SpringSecurity支持基于URL的请求授权，支持方法的访问授权，支持SpEL访问控制，支持域对象安全，同时也支持动态权限配置、支持RBAC权限模型等，总之，我们常见的权限管理需求，SpringSecurity基本上都是支持的。</p> <h4><a id="_45" rel="nofollow"></a>其他</h4> <p> 在认证和授权这两个核心功能之外，SpringSecurity还提供了很多安全管理的“周边功能”，这也是一个非常重要的特色，在开发中，即便我们不了解很多网络攻击，只要用了SpringSecurity它会帮助我们自动防御很多网络攻击，例如CSRF攻击，会话固定攻击等，同时还提供了HTTP防火墙来拦截大量的非法请求。</p> <h3><a id="_53" rel="nofollow"></a>认证和授权</h3> <h4><a id="_55" rel="nofollow"></a>认证</h4> <p>在SpringSecurity的架构设计中，认证（Authentication）和授权（Authorization）是分开的，无论使用什么样的认证方式，都不会影响授权，这是两个独立的存在，这种独立带来的好处之一，就是可以非常方便地整合一些外部地认证方案。</p> <p>在SpringScuerity中，用户地认证信息主要是由Authentication的实现类来保存，接口定义如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">Authentication</span><span class="token keyword">extends</span><span class="token class-name">Principal</span><span class="token punctuation">,</span> Serializable<span class="token punctuation">{<!-- --></span><span class="token comment">//用来获取用户的权限</span> 	Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token keyword">extends</span><span class="token class-name">GrantedAuthority</span><span class="token operator">&gt;</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来获取用户凭证，一般来说是密码</span> 	Object<span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来获取用户携带的详细信息，可能是当前请求之类等</span> 	Object<span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来获取当前用户，例如是一个用户或一个用户对象</span> 	Object<span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前用户是否认证成功。</span><span class="token keyword">boolean</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAuthenticated<span class="token punctuation">)</span><span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p> 当用户使用用<strong>户名/密码</strong>登录或者使用<strong>Remember-me</strong>登录时，都会对于一个不同的Authentication实例。</p> <p> SpringSecurity中的认证工作主要由AuthenticationManager接口负责，我们来看一下该接口的定义</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">AuthenticationManager</span><span class="token punctuation">{<!-- --></span>  	Authentication<span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span><span class="token keyword">throws</span> AuthenticationException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p> AuthenticationManager接口只有一个authenticate方法可以用来做认证，该方法有三个不同的返回值：</p> <ul> <li> <p>返回Authentication ： 表示认证成功</p> </li> <li> <p>抛出AuthenticationException异常：表示用户输入了无效的凭证.</p> </li> <li> <p>返回null，表示不能断定</p> <p>AuthenticationManager最主要的实现类是ProviderManager，ProviderManager管理了众多的AuthenticationProvider实例，AuthenticationProvider有点类似于AuthenticationManager，但是它多了一个supports方法用来短评是否指出给定的Authenticaion类型。</p> </li> </ul> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">AuthenticationProvider</span><span class="token punctuation">{<!-- --></span>  	Authentication<span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span><span class="token keyword">throws</span> AuthenticationException<span class="token punctuation">;</span><span class="token keyword">boolean</span><span class="token function">supports</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>由于Authentication拥有众多不同的实现类，这些不同的实现类又由不能的AuthenticationProvider来处理，所以AuthenticationProvider会有一个supports方法，来判断当前的AuthenticationProvider是否支持对应的Authentication</p> <p>在一次完整的认证流程中，可能会存在多个AuthenticationProvider（例如，项目同时支持form表单登录和短信验证码登录），多个AuthenticationProvider统一由ProviderManager管理，同时ProviderManager具有一个可选的parent，如果所有的AuthenticationProvider都认证失败，那么就算调用parent进行认证。parent相当于一个备用认证方式，即各个AuthenticationProvider都无法处理认证问题的时候，就由它来收拾。</p> <h4><a id="_122" rel="nofollow"></a>授权</h4> <p>当认证完成后，接下来就是授权了。在SpringSecurity的授权体系中，有两个关键接口：</p> <ul> <li>AccessDecisionManager</li> <li>AccessDecisionVoter</li> </ul> <p>AccessDecisionVoter是一个投票器，拉票器会检查用户是否具备应有的角色，进而投出赞成、反对或者弃权票，AccessDecisionManager则是一个决策器，来决定此次访问是否被允许。AccessDecisionVoter和AccessDecisionManager都有众多的实现类，在AccessDecisionManager中会挨个遍历AccessDecisionVoter，进而决定是否允许用户访问，因为AccessDecisionVoter和AccessDecisionManager两者的关系类似于AuthenticationProvider和ProviderManager的关系。</p> <p>在SpringSecurity中，用户请求一个资源（通常是一个接口或者一个java方法）所需要的角色会被封装成一个ConfigAttribute对象，在ConfigAttribute中只有一个getAttribute方法，该方法返回一个Stirng字符串，就是角色名称。一般来说，角色名称都带有一个ROLE_ 前缀，投票器AccessDecisionVoter所做的事情，其实就算比较用户所具备的角色和请求某个资源所需要的ConfigAttribute之间的关系。</p> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1751.htm">详谈GoLang的panic和error</a></p>
                                                        <p>下一个：<a href="/html/category/article-1753.htm">Python编程语言基础</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1908.htm" title="mysql错误解决方案">mysql错误解决方案</a></li>
                        <li class="py-2"><a href="/html/category/article-1898.htm" title="Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]">Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]</a></li>
                        <li class="py-2"><a href="/html/category/article-1886.htm" title="TensorFlow运行出错：UnicodeEncodeError: &#8216;utf-8&#8217; codec can&#8217;t encode character &#8216;\udcce&#8217; in position 2559: s">TensorFlow运行出错：UnicodeEncodeError: &#8216;utf-8&#8217; codec can&#8217;t encode character &#8216;\udcce&#8217; in position 2559: s</a></li>
                        <li class="py-2"><a href="/html/category/article-4135.htm" title="tensorflow求导和梯度计算">tensorflow求导和梯度计算</a></li>
                        <li class="py-2"><a href="/html/category/article-1897.htm" title="MySQL系列复习（9）分组查询（group by、having）">MySQL系列复习（9）分组查询（group by、having）</a></li>
                        <li class="py-2"><a href="/html/category/article-1889.htm" title="win11系统照相机亮度怎么调节">win11系统照相机亮度怎么调节</a></li>
                        <li class="py-2"><a href="/html/category/article-1938.htm" title="JavaScript数字数组的均等分割方法详解">JavaScript数字数组的均等分割方法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1902.htm" title="树的同构（java实现）">树的同构（java实现）</a></li>
                        <li class="py-2"><a href="/html/category/article-4136.htm" title="C语言实现扫雷游戏（代码）">C语言实现扫雷游戏（代码）</a></li>
                        <li class="py-2"><a href="/html/category/article-1903.htm" title="基于JDK的动态代理原理分析">基于JDK的动态代理原理分析</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>