<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1761.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>go-micro使用Consul做服务发现的方法和原理_在线工具 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">go-micro使用Consul做服务发现的方法和原理_在线工具</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<p>go-micro v4默认使用mdns做服务发现。不过也支持采用其它的服务发现中间件，因为多年来一直使用Consul做服务发现，为了方便和其它服务集成，所以还是选择了Consul。这篇文章将介绍go-micro使用Consul做服务发现的方法。关于Consul的使用方式请参考我的另一篇文章：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.bossma.cn/consul/consul-service-register-and-discovery-style/"  target="_blank"  rel="nofollow">使用Consul做服务发现的若干姿势</a> 。</p> <h1 id="安装consul">安装Consul</h1> <p>如果你已经安装Consul，或者对Consul很熟悉了，按照自己的方式处理Consul就行了。</p> <p>这里提供一个通过docker快速安装Consul的方式，当然前提是你得安装了docker。</p> <p>执行命令：</p> <pre><code>docker run --name consul1 -p 8500:8500 -p 8300:8300 -p 8301:8301 -p 8302:8302  -d consul:latest </code></pre> <p>这会在docker容器中启动一个最新版本的Consul服务，并将相关端口开放给主机。</p> <h1 id="安装consul插件">安装Consul插件</h1> <p>使用Consul作为服务注册和服务发现，需要先安装go-micro的consul插件：</p> <pre><code>go get github.com/go-micro/plugins/v4/registry/consul </code></pre> <h1 id="服务端使用consul">服务端使用Consul</h1> <h2 id="服务注册">服务注册</h2> <p>为了使用Consul做服务注册，需要为go-micro server显式的指定Consul Registry。直接看代码吧：</p> <pre><code>func main() {  	registry := consul.NewRegistry()  	rpcServer := server.NewServer( 		server.Name("registry-consul.service"), 		server.Address("0.0.0.0:8001"), 		server.Registry(registry), 	)  	proto.RegisterHelloHandler(rpcServer, &amp;Hello{})  	service := micro.NewService( 		micro.Server(rpcServer), 	)  	service.Init()  	// Run server 	if err := service.Run(); err != nil { 		log.Fatal(err) 	} } </code></pre> <p>通过 <em>consul.NewRegistry()</em> 创建一个Consul 注册中心，然后使用 <em>server.NewServer</em> 创建Server的时候把它设置进去；同时我们需要指定服务的名称，这里设置的是 <em>registry-consul.service</em>；另外这里不使用随机端口，指定了一个服务的监听地址。这样基本就OK了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/0f7d379bd485b73951cff236c18f9afc.jpg" alt="go-micro使用Consul做服务发现的方法和原理_在线工具"></p> <p>这里并没有指定Consul的连接地址，因为按照推荐的Consul部署方式，服务所在机器或者容器中应该部署一个Consul的客户端，程序可以直接通过 127.0.0.1:8500 访问到它。如果要显示指定，可以在<em>NewRegistry</em>时设置：</p> <pre><code>	registry := consul.NewRegistry( 		registry.Addrs("127.0.0.1:8500"), 	) </code></pre> <h2 id="注册过程">注册过程</h2> <p>通过一张图来看一下，go-micro注册服务到Consul时都做了什么。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/f568b75bdb7cd1f07091e21335bf7a74.jpg" alt="go-micro使用Consul做服务发现的方法和原理_在线工具"></p> <p>服务注册关键是实现两个动作：</p> <p><strong>1、注册：</strong> rpcServer启动的时候，会调用到自身的Register方法，Register方法会调用consul插件的Register方法，然后调用到consul自身SDK提供的Agent.ServiceRegister方法，将服务注册到Consul中。注册的服务名称就是NewServer时的server.Name。</p> <p><strong>2、健康上报：</strong> 即刷新TTL，服务注册成功后，会启动一个定时器定时调用consul插件的Register方法，这个方法内部判断服务注册过，则会调用consul自身SDK提供的Agent.PassTTL方法，刷新Consul中对应服务的TTL。</p> <h2 id="健康检查">健康检查</h2> <p>go-micro服务的健康状态是通过TTL维护的，服务需要定时去刷新TTL，如果TTL超过指定的时间没有被刷新，则服务会被认为是不健康的。默认情况下有三个设置会涉及到TTL，还是先来看代码：</p> <pre><code>registry := consul.NewRegistry()  	regCheckFunc := func(ctx context.Context) error { 		fmt.Println(time.Now().Format("2006-01-02 15:04:05") + " do register check") 		if 1+1 == 2 { 			return nil 		} 		return errors.New("this not earth") 	}  	rpcServer := server.NewServer( 		server.Name("registry-consul.service"), 		server.Address("0.0.0.0:8001"), 		server.Registry(registry), 		server.RegisterCheck(regCheckFunc), 		server.RegisterInterval(10*time.Second), 		server.RegisterTTL(20*time.Second), 	)  	proto.RegisterHelloHandler(rpcServer, &amp;Hello{})  	service := micro.NewService( 		micro.Server(rpcServer), 	)  	//service.Init()  	if err := service.Run(); err != nil { 		log.Fatal(err) 	} </code></pre> <p>关于这三个设置，这里简单介绍下：</p> <p><em><strong>1、server.RegisterCheck(regCheckFunc)</strong></em> 服务刷新TTL之前，会调用一个函数检查服务的状态，这个函数的返回值是error类型。默认的函数不进行任何检查，直接返回nil，代表服务状态正常；我们可以自己写一个函数，进行一些检查逻辑，比如是否要下线维护。如果返回的error不是nil，go-micro会尝试在Consul中注销服务，则调用方将不会再访问到这个服务节点。</p> <p><em><strong>2、server.RegisterInterval(10*time.Second)</strong></em> 这个设置指定程序去刷新TLL的频率。</p> <p><em><strong>3、server.RegisterTTL(20*time.Second)</strong></em> 这个设置指定TTL的生存周期，如果超过这个时间没有刷新TTL，则Consul会认为服务是不健康。</p> <p>另外需要注意<strong>不要使用service.Init()</strong>，因为这里边会覆盖 <em>RegisterInterval</em> 和 <em>RegisterTTL</em> 的设置，除非你不关心这两个参数。关于这个问题可以参考：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/asim/go-micro/issues/2488"  target="_blank"  rel="nofollow">https://github.com/asim/go-micro/issues/2488</a></p> <h1 id="客户端使用consul">客户端使用Consul</h1> <h2 id="调用服务">调用服务</h2> <p>为了使用Consul做服务发现，需要为go-micro service显式的指定Consul Registry。还是直接看代码：</p> <pre><code>	registry := consul.NewRegistry()  	service := micro.NewService( 		micro.Client(client.NewClient()), 		micro.Registry(registry), 	)  	service.Init() 	client := proto.NewHelloService("registry-consul.service", service.Client())  	rsp, err := client.Say(context.TODO(), &amp;proto.SayRequest{Name: "BOSSMA"}) 	if err != nil { 		fmt.Println(err) 	}  	fmt.Println(rsp) </code></pre> <p>代码很简单，指定consul作为服务发现组件后，调用服务的时候传递的服务名称就会使用consul进行解析，获取到IP、端口后，再进行实际调用。</p> <h2 id="发现过程">发现过程</h2> <p>还是先来看张图，从调用 XXXService 的方法 YYY 开始：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/ccac9f789332b0033d4a29aa592e41a6.jpg" alt="go-micro使用Consul做服务发现的方法和原理_在线工具"></p> <p>整个过程分为两个大的步骤，第一步获取要调用服务的地址，第二步通过http请求调用服务。我们重点看第一步通过Consul获取服务这块。</p> <p>首先进入一个Selector，就是选择器的意思。Selector首先看缓存中有没有缓存请求服务的地址信息，如果没有就去Consul查询，查询到之后再通过指定的选择策略选出来一个地址，用于后续http请求。这里默认的选择策略是随机选择，比如查询到这个服务有三个部署节点，随机策略会随机返回其中某一个地址。</p> <p>除了随机策略，go-micro还提供了一个轮询策略，这时候需要自己创建一个Selector：</p> <pre><code>	registry := consul.NewRegistry() 	selector := selector.NewSelector( 		selector.SetStrategy(selector.RoundRobin), 		selector.Registry(registry), 	)  	service := micro.NewService( 		micro.Client(client.NewClient()), 		micro.Selector(selector), 		//micro.Registry(registry), 	) </code></pre> <p>另外从上面的示意图中，我们可以看到Selector调用了Registry，所以这里创建Selector的时候，我们把Registry设置了进去，然后再把创建的Selector设置到Service中。其实还有另一种方式，把设置Registry放到设置Selector后边，同样可以把Registry注册到Selector中，但是这样比较隐晦，还需要注意设置顺序，我不推荐。不过如果在Selector之外需要使用Registry的时候，还是需要使用micro.Registry(registry)进行注册，这个例子中并没有相关场景。</p> <h1 id="效果展示">效果展示</h1> <p>先启动服务端，然后启动客户端，截图如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/aa41088284f28353a80571f48f8692c5.jpg" alt="go-micro使用Consul做服务发现的方法和原理_在线工具"></p> <hr> <p>以上就是本文的主要内容，如有错漏欢迎反馈。</p> <p>演示代码已上传到Github：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/bosima/go-demo/tree/main/go-micro-registry-consul"  target="_blank"  rel="nofollow">https://github.com/bosima/go-demo/tree/main/go-micro-registry-consul</a></p> <blockquote> <p>收获更多架构知识，请关注微信公众号 萤火架构。原创内容，转载请注明出处。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/e8797474359b016c2e505fa1a5762061.jpg" alt="go-micro使用Consul做服务发现的方法和原理_在线工具"></p> </blockquote> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1760.htm">Vue3知识点整理 常用Composition API（3）- 生命周期、自定义hook、toRef</a></p>
                                                        <p>下一个：<a href="/html/category/article-1762.htm">Python加速技巧</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3742.htm" title="SpringBoot之HandlerInterceptor拦截器的使用">SpringBoot之HandlerInterceptor拦截器的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1894.htm" title="小程序自定义导航栏组件">小程序自定义导航栏组件</a></li>
                        <li class="py-2"><a href="/html/category/article-2252.htm" title="python向hive插入数据遇到的坑">python向hive插入数据遇到的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-1904.htm" title="在Python中使用ibis,impyla,pyhive,pyspark连接Kerberos安全认证的Hive、Impala">在Python中使用ibis,impyla,pyhive,pyspark连接Kerberos安全认证的Hive、Impala</a></li>
                        <li class="py-2"><a href="/html/category/article-1899.htm" title="Azure DevOps通过SSH部署上传到服务器的应用">Azure DevOps通过SSH部署上传到服务器的应用</a></li>
                        <li class="py-2"><a href="/html/category/article-1892.htm" title="如何将CONCAT()函数应用于MySQL表的列？">如何将CONCAT()函数应用于MySQL表的列？</a></li>
                        <li class="py-2"><a href="/html/category/article-1952.htm" title="深入理解Spring的@Order注解和Ordered接口">深入理解Spring的@Order注解和Ordered接口</a></li>
                        <li class="py-2"><a href="/html/category/article-2541.htm" title="Spring Cloud Feign 分析之FeignClient注解实现版本兼容">Spring Cloud Feign 分析之FeignClient注解实现版本兼容</a></li>
                        <li class="py-2"><a href="/html/category/article-1886.htm" title="TensorFlow运行出错：UnicodeEncodeError: &#8216;utf-8&#8217; codec can&#8217;t encode character &#8216;\udcce&#8217; in position 2559: s">TensorFlow运行出错：UnicodeEncodeError: &#8216;utf-8&#8217; codec can&#8217;t encode character &#8216;\udcce&#8217; in position 2559: s</a></li>
                        <li class="py-2"><a href="/html/category/article-1875.htm" title="No version of NDK matched the requested version 21.1.6113669. Versions available locally: 23.1.77796">No version of NDK matched the requested version 21.1.6113669. Versions available locally: 23.1.77796</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">56</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>