<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1769.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>JavaScript的this指向原理 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">JavaScript的this指向原理</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <h1>&nbsp;</h1> <h2> 问题的由来</h2> <p>学懂JavaScript语言，一个标志就是理解下面两种写法，可能有不一样的结果。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>var obj = {<!-- --></code></p> </li> <li> <p><code>foo: function () {}</code></p> </li> <li> <p><code>};</code></p> </li> <li> <p><code>var foo = obj.foo;</code></p> </li> <li> <p><code>// 写法一</code></p> </li> <li> <p><code>obj.foo()</code></p> </li> <li> <p><code>// 写法二</code></p> </li> <li> <p><code>foo()</code></p> </li> </ol> <p>上面代码中，虽然<code>obj.foo</code>和<code>foo</code>指向同一个函数，但是执行结果可能不一样。请看下面的例子。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>var obj = {<!-- --></code></p> </li> <li> <p><code>foo: function () { console.log(this.bar) },</code></p> </li> <li> <p><code>bar: 1</code></p> </li> <li> <p><code>};</code></p> </li> <li> <p><code>var foo = obj.foo;</code></p> </li> <li> <p><code>var bar = 2;</code></p> </li> <li> <p><code>obj.foo() // 1</code></p> </li> <li> <p><code>foo() // 2</code></p> </li> </ol> <p>这种差异的原因，就在于函数体内部使用了<code>this</code>关键字。很多教科书会告诉你，<code>this</code>指的是函数运行时所在的环境。对于<code>obj.foo()</code>来说，<code>foo</code>运行在<code>obj</code>环境，所以<code>this</code>指向<code>obj</code>；对于<code>foo()</code>来说，<code>foo</code>运行在全局环境，所以<code>this</code>指向全局环境。所以，两者的运行结果不一样。<br /> 这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么<code>obj.foo()</code>就是在<code>obj</code>环境执行，而一旦<code>var foo = obj.foo</code>，<code>foo()</code>就变成在全局环境执行？<br /> 本文就来解释JavaScript这样处理的原理。理解了这一点，你就会彻底理解<code>this</code>的作用。</p> <h2> 内存的数据结构</h2> <p>JavaScript语言之所以有<code>this</code>的设计，跟内存里面的数据结构有关系。</p> <pre class="has"><code>var obj = { foo:  5 }; </code></pre> <p>上面的代码将一个对象赋值给变量<code>obj</code>。JavaScript引擎会先在内存里面，生成一个对象<code>{ foo: 5 }</code>，然后把这个对象的内存地址赋值给变量<code>obj</code>。</p> <p><img decoding="async" alt="3534846-9f6705079bf2db98.png" class="has" src="http://img.555519.xyz/uploads/20230206/f2f88f0b12ca3be29af3699cef558874.jpg"></p> <p> 也就是说，变量<code>obj</code>是一个地址（<code>reference</code>）。后面如果要读取<code>obj.foo</code>，引擎先从<code>obj</code>拿到内存地址，然后再从该地址读出原始的对象，返回它的<code>foo</code>属性。<br /> 原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。举例来说，上面例子的<code>foo</code>属性，实际上是以下面的形式保存的。</p> <p><img decoding="async" alt="3534846-14bea7e38416f49e.png" class="has" src="http://img.555519.xyz/uploads/20230206/14ca95891973a5eb234f2f5b8b3a8d95.jpg"></p> <p>&nbsp;</p> <pre>&nbsp;</pre> <ol> <li> <p><code>{<!-- --></code></p> </li> <li> <p><code>foo: {<!-- --></code></p> </li> <li> <p><code>[[value]]: 5</code></p> </li> <li> <p><code>[[writable]]: true</code></p> </li> <li> <p><code>[[enumerable]]: true</code></p> </li> <li> <p><code>[[configurable]]: true</code></p> </li> <li> <p><code>}</code></p> </li> <li> <p><code>}</code></p> </li> </ol> <p>注意，<code>foo</code>属性的值保存在属性描述对象的<code>value</code>属性里面。</p> <h2> 函数</h2> <p>这样的结构是很清晰的，问题在于属性的值可能是一个函数。</p> <pre class="has"><code>var obj = { foo: function () {} }; </code></pre> <p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给<code>foo</code>属性的<code>value</code>属性。</p> <p><img decoding="async" alt="3534846-9b7605d5d9d2edd3.png" class="has" src="http://img.555519.xyz/uploads/20230206/d7b9adefc4c87ad58c438d1a90df8d4b.jpg"></p> <p>&nbsp;</p> <pre>&nbsp;</pre> <ol> <li> <p><code>{<!-- --></code></p> </li> <li> <p><code>foo: {<!-- --></code></p> </li> <li> <p><code>[[value]]: 函数的地址</code></p> </li> <li> <p><code>...</code></p> </li> <li> <p><code>}</code></p> </li> <li> <p><code>}</code></p> </li> </ol> <p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>var f = function () {};</code></p> </li> <li> <p><code>var obj = { f: f };</code></p> </li> <li> <p><code>// 单独执行</code></p> </li> <li> <p><code>f()</code></p> </li> <li> <p><code>// obj 环境执行</code></p> </li> <li> <p><code>obj.f()</code></p> </li> </ol> <h2> 环境变量</h2> <p>JavaScript允许在函数体内部，引用当前环境的其他变量。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>var f = function () {<!-- --></code></p> </li> <li> <p><code>console.log(x);</code></p> </li> <li> <p><code>};</code></p> </li> </ol> <p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。<br /> 现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（<code>context</code>）。所以，<code>this</code>就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>var f = function () {<!-- --></code></p> </li> <li> <p><code>console.log(this.x);</code></p> </li> <li> <p><code>}</code></p> </li> </ol> <p>上面代码中，函数体里面的<code>this.x</code>就是指当前运行环境的<code>x</code>。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>var f = function () {<!-- --></code></p> </li> <li> <p><code>console.log(this.x);</code></p> </li> <li> <p><code>}</code></p> </li> <li> <p><code>var x = 1;</code></p> </li> <li> <p><code>var obj = {<!-- --></code></p> </li> <li> <p><code>f: f,</code></p> </li> <li> <p><code>x: 2,</code></p> </li> <li> <p><code>};</code></p> </li> <li> <p><code>// 单独执行</code></p> </li> <li> <p><code>f() // 1</code></p> </li> <li> <p><code>// obj 环境执行</code></p> </li> <li> <p><code>obj.f() // 2</code></p> </li> </ol> <p>上面代码中，函数<code>f</code>在全局环境执行，<code>this.x</code>指向全局环境的<code>x</code>。</p> <p><img decoding="async" alt="3534846-844a685e8241c054.png" class="has" src="http://img.555519.xyz/uploads/20230206/54ea3310537063b54c4d832d1eb32b3e.jpg"></p> <p> 在<code>obj</code>环境执行，<code>this.x</code>指向<code>obj.x</code>。</p> <p><img decoding="async" alt="3534846-cca265bb5b29213c.png" class="has" src="http://img.555519.xyz/uploads/20230206/54aa50de8469fdd67d951fe20a8ebb0e.jpg"></p> <p> 回到本文开头提出的问题，<code>obj.foo()</code>是通过<code>obj</code>找到<code>foo</code>，所以就是在<code>obj</code>环境执行。一旦<code>var foo = obj.foo</code>，变量<code>foo</code>就直接指向函数本身，所以<code>foo()</code>就变成在全局环境执行。</p> <p>&nbsp;</p> <h2> this使用场景</h2> <p>函数的不同使用场合，<code>this</code>有不同的值。总的来说，<code>this</code>就是函数运行时所在的环境对象。</p> <p>情况一：纯粹的函数调用</p> <p>这是函数的最通常用法，属于全局性调用，因此<code>this</code>就代表全局对象。请看下面这段代码，它的运行结果是1。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>var x = 1;</code></p> </li> <li> <p><code>function test() {<!-- --></code></p> </li> <li> <p><code>console.log(this.x);</code></p> </li> <li> <p><code>}</code></p> </li> <li> <p><code>test(); // 1</code></p> </li> </ol> <p>情况二：作为对象方法的调用</p> <p>函数还可以作为某个对象的方法调用，这时<code>this</code>就指这个上级对象。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>function test() {<!-- --></code></p> </li> <li> <p><code>console.log(this.x);</code></p> </li> <li> <p><code>}</code></p> </li> <li> <p><code>var obj = {};</code></p> </li> <li> <p><code>obj.x = 1;</code></p> </li> <li> <p><code>obj.m = test;</code></p> </li> <li> <p><code>obj.m(); // 1</code></p> </li> </ol> <p>情况三：作为构造函数调用</p> <p>所谓构造函数，就是通过这个函数，可以生成一个新对象。这时，<code>this</code>就指这个新对象。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>function test() {<!-- --></code></p> </li> <li> <p><code>　this.x = 1;</code></p> </li> <li> <p><code>}</code></p> </li> <li> <p><code>var obj = new test();</code></p> </li> <li> <p><code>obj.x // 1</code></p> </li> </ol> <p>运行结果为1。为了表明这时<code>this</code>不是全局对象，我们对代码做一些改变：</p> <pre>&nbsp;</pre> <ol> <li> <p><code>var x = 2;</code></p> </li> <li> <p><code>function test() {<!-- --></code></p> </li> <li> <p><code>this.x = 1;</code></p> </li> <li> <p><code>}</code></p> </li> <li> <p><code>var obj = new test();</code></p> </li> <li> <p><code>x // 2</code></p> </li> </ol> <p>运行结果为2，表明全局变量<code>x</code>的值根本没变。</p> <p>情况四：apply调用</p> <p><code>apply()</code>是函数的一个方法，作用是改变函数的调用对象。它的第一个参数就表示改变后的调用这个函数的对象。因此，这时<code>this</code>指的就是这第一个参数。</p> <pre>&nbsp;</pre> <ol> <li> <p><code>var x = 0;</code></p> </li> <li> <p><code>function test() {<!-- --></code></p> </li> <li> <p><code>　console.log(this.x);</code></p> </li> <li> <p><code>}</code></p> </li> <li> <p><code>var obj = {};</code></p> </li> <li> <p><code>obj.x = 1;</code></p> </li> <li> <p><code>obj.m = test;</code></p> </li> <li> <p><code>obj.m.apply() // 0</code></p> </li> </ol> <p><code>apply()</code>的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明<code>this</code>指的是全局对象。<br /> 如果把最后一行代码修改为</p> <pre class="has"><code>obj.m.apply(obj); //1 </code></pre> <p>运行结果就变成了1，证明了这时<code>this</code>代表的是对象<code>obj</code>。</p> </p></div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1768.htm">rancher k8s修改ingress默认80端口</a></p>
                                                        <p>下一个：<a href="/html/category/article-1770.htm">PostCSS分享</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3742.htm" title="SpringBoot之HandlerInterceptor拦截器的使用">SpringBoot之HandlerInterceptor拦截器的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-4304.htm" title="有什么出售宠物的app（有没有专业出售宠物的平台）">有什么出售宠物的app（有没有专业出售宠物的平台）</a></li>
                        <li class="py-2"><a href="/html/category/article-4491.htm" title="宠物医院治仓鼠吗（宠物医院治仓鼠的病吗）">宠物医院治仓鼠吗（宠物医院治仓鼠的病吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-1965.htm" title="设置网页脚本动态顺序加载">设置网页脚本动态顺序加载</a></li>
                        <li class="py-2"><a href="/html/category/article-4108.htm" title="C#关于在返回值为Task方法中使用Thread.Sleep引发的思考">C#关于在返回值为Task方法中使用Thread.Sleep引发的思考</a></li>
                        <li class="py-2"><a href="/html/category/article-5581.htm" title="动物医院好评模板怎么写的啊视频（宠物医院优质好评500字）">动物医院好评模板怎么写的啊视频（宠物医院优质好评500字）</a></li>
                        <li class="py-2"><a href="/html/category/article-1937.htm" title="VScode离线安装插件的方法">VScode离线安装插件的方法</a></li>
                        <li class="py-2"><a href="/html/category/article-3741.htm" title="Java中数组的定义与使用(一)">Java中数组的定义与使用(一)</a></li>
                        <li class="py-2"><a href="/html/category/article-2541.htm" title="Spring Cloud Feign 分析之FeignClient注解实现版本兼容">Spring Cloud Feign 分析之FeignClient注解实现版本兼容</a></li>
                        <li class="py-2"><a href="/html/category/article-1966.htm" title="JavaScript如何将数组与值是数组的对象合并方法详解">JavaScript如何将数组与值是数组的对象合并方法详解</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>