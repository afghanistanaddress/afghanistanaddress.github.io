<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1790.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>数据结构详解·一树的初步 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">数据结构详解·一树的初步</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <ul> <li><strong>「数据结构详解·一」树的初步</strong></li> </ul> <h1>1. 树的定义、构成和术语</h1> <p>树(Tree)是最重要的数据结构之一，它是由<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        n</p> <p>        (</p> <p>        n</p> <p>        ∈</p> <p>        N</p> <p>        )</p> <p>       n(n \in \mathbb{N})</span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathbb">N</span><span class="mclose">)</span></span></span></span></span> 个节点（也会被写作“结点”）构成的一个集合。其具有<strong>层次关系</strong>。树是<strong>递归定义</strong>的。<br /> 如下图，这就是一棵普通的树。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220818/29478f1d079b1cda019d5faaa53df30f.jpg" alt="数据结构详解·一树的初步"></p> <ul> <li>最上面的<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 称为<mark>根节点</mark>，最下面的<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         4</p> <p>         ,</p> <p>         5</p> <p>         ,</p> <p>         6</p> <p>         ,</p> <p>         9</p> <p>         ,</p> <p>         8</p> <p>        4,5,6,9,8</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">9</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">8</span></span></span></span></span> 称为<mark>叶子节点</mark>。</li> <li>每两个节点之间相连线的称为<mark>边</mark>。</li> <li><span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的下方与其相连的有<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span>，我们就说，节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span> 的<mark>父节点</mark>（父亲），<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的<mark>子节点</mark>（儿子），<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span> 互为<mark>兄弟节点</mark>。</li> <li>节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         9</p> <p>        9</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">9</span></span></span></span></span> 的父亲是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         7</p> <p>        7</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">7</span></span></span></span></span>，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         7</p> <p>        7</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">7</span></span></span></span></span> 的父亲是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span>，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span> 的父亲是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span>。我们认为，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>         ,</p> <p>         3</p> <p>         ,</p> <p>         7</p> <p>        1,3,7</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">7</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         9</p> <p>        9</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">9</span></span></span></span></span> 的<mark>祖先</mark>，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>         ,</p> <p>         7</p> <p>         ,</p> <p>         9</p> <p>        3,7,9</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">9</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的<mark>子孙</mark>。</li> <li>节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 有<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>        2</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span></span> 个子节点，我们认为，节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的<mark>度</mark>是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>        2</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span></span>。叶子结点的度为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         0</p> <p>        0</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">0</span></span></span></span></span>。</li> <li>度不为零的（非叶子节点）节点称为<mark>分支节点</mark>。</li> <li>一棵树的层数称为<mark>树的深度/树的高度</mark>。单独的根节点深度为<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         0</p> <p>        0</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">0</span></span></span></span></span> 或<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span>。图示的树的深度为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span> 或<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         4</p> <p>        4</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">4</span></span></span></span></span>。</li> <li>空集合也是树，称为<mark>空树</mark>。其没有节点。</li> <li>假如去掉了根节点，可以发现，就形成了一棵根节点为<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         2</p> <p>        2</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span></span> 的树，一棵根节点为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span> 的树。我们认为这两棵树是根节点为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的树的<mark>子树</mark>。假如这两棵树属于同一集合且不相交，我们就说这个集合时<mark>森林</mark>。</li> </ul> <h1>2. 树的性质</h1> <ul> <li>一棵非空树<strong>有且只有一个根节点</strong>。</li> <li>每一个非根节点<strong>有且只有一个父节点</strong>。</li> <li>每一个叶子节点<strong>没有子节点</strong>。</li> <li>一棵树<strong>有且只有<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>          n</p> <p>          −</p> <p>          1</p> <p>         n-1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6667em; vertical-align: -0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 条边</strong>。</li> </ul> <h1>3. 树的存储</h1> <p>我们主要介绍其中两种。</p> <h2>3-1. 邻接矩阵</h2> <p>顾名思义，其是一个二维数组。<br /> 定义方式：</p> <pre><code class="prism language-cpp"><span class="token keyword">bool</span> tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p><span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         tree</p> <p>          i</p> <p>          ,</p> <p>          j</p> <p>       \text{tree}_{i,j}</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.9012em; vertical-align: -0.2861em;"></span><span class="mord"><span class="mord text"><span class="mord">tree</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span class="" style="top: -2.55em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right: 0.0572em;">j</span></span></span></span></span><span class="vlist-s"></span></span><span class="vlist-r"><span class="vlist" style="height: 0.2861em;"><span class=""></span></span></span></span></span></span></span></span></span></span> 表示节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        i</p> <p>        ,</p> <p>        j</p> <p>       i,j</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.854em; vertical-align: -0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord mathnormal" style="margin-right: 0.0572em;">j</span></span></span></span></span> 之间是否连通。<br /> 如果要将节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        u</p> <p>       u</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span></span> 添加儿子<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        v</p> <p>       v</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal" style="margin-right: 0.0359em;">v</span></span></span></span></span>，那么操作就是<code>tree[u][v]=1;</code>。<br /> 将上图的树存储进去，就是这样的：</p> <table> <thead> <tr> <th align="center"></th> <th align="center">1</th> <th align="center">2</th> <th align="center">3</th> <th align="center">4</th> <th align="center">5</th> <th align="center">6</th> <th align="center">7</th> <th align="center">8</th> <th align="center">9</th> </tr> </thead> <tbody> <tr> <td align="center">1</td> <td align="center">0</td> <td align="center">1</td> <td align="center">1</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">2</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">1</td> <td align="center">1</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">3</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">1</td> <td align="center">1</td> <td align="center">1</td> <td align="center">0</td> </tr> <tr> <td align="center">4</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">5</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">6</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">7</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">1</td> </tr> <tr> <td align="center">8</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">9</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> </tbody> </table> <p>访问所有节点的儿子：</p> <pre><code class="prism language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator"><=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//n=9</span><span class="token punctuation">{<!-- --></span> 	cout<span class="token operator"><<</span>i<span class="token operator"><<</span><span class="token string">": "</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator"><=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> cout<span class="token operator"><<</span>j<span class="token operator"><<</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>输出：</p> <pre><code class="prism language-plain">1: 2 3 2: 4 5 3: 6 7 8 4:  5:  6: 7: 9 8:  9:</code></pre> <p>邻接矩阵的优点：简洁明了，方便快捷；<br /> 邻接矩阵的缺点：浪费空间，容易被卡。<br /> 只建议数据中结点数<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        ≤</p> <p>        8</p> <p>        ×</p> <p>        1</p> <p>         0</p> <p>         3</p> <p>       \le 8\times 10^3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.7719em; vertical-align: -0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.7278em; vertical-align: -0.0833em;"></span><span class="mord">8</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.8141em;"><span class="" style="top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> 时使用。</p> <h2>3-2. 邻接表</h2> <p>我们也可以采用其中一种叫做<mark>邻接表</mark>的常用存储方法。<br /> 定义方式：</p> <pre><code class="prism language-cpp">vector<span class="token operator"><</span><span class="token keyword">int</span><span class="token operator">></span>tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>在<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         tree</p> <p>         i</p> <p>       \text{tree}_i</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.7651em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">tree</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span class="" style="top: -2.55em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s"></span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span> 的 vector 中，我们要存储什么呢？<br /> 没错，就是节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        i</p> <p>       i</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></span> 的儿子。<br /> 如果要将节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        u</p> <p>       u</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span></span> 添加儿子<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        v</p> <p>       v</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal" style="margin-right: 0.0359em;">v</span></span></span></span></span>，那么操作就是<code>tree[u].push_back(v);</code>。<br /> 将上图的树存储进去，就是这样的：</p> <table> <thead> <tr> <th align="center">节点编号</th> <th align="center">存储情况</th> </tr> </thead> <tbody> <tr> <td align="center">1</td> <td align="center">2,3</td> </tr> <tr> <td align="center">2</td> <td align="center">4,5</td> </tr> <tr> <td align="center">3</td> <td align="center">6,7,8</td> </tr> <tr> <td align="center">4</td> <td align="center">(空)</td> </tr> <tr> <td align="center">5</td> <td align="center">(空)</td> </tr> <tr> <td align="center">6</td> <td align="center">(空)</td> </tr> <tr> <td align="center">7</td> <td align="center">9</td> </tr> <tr> <td align="center">8</td> <td align="center">(空)</td> </tr> <tr> <td align="center">9</td> <td align="center">(空)</td> </tr> </tbody> </table> <p>如果要访问，也很简单（示例代码为访问上述树的儿子）：</p> <pre><code class="prism language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator"><=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//n=9</span><span class="token punctuation">{<!-- --></span> 	cout<span class="token operator"><<</span>i<span class="token operator"><<</span><span class="token string">": "</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> j<span class="token operator">:</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 		cout<span class="token operator"><<</span>j<span class="token operator"><<</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>输出：</p> <pre><code class="prism language-plain">1: 2 3 2: 4 5 3: 6 7 8 4:  5:  6: 7: 9 8:  9:</code></pre> <p>邻接表的优点在于：方便、省空间、速度较快，是通用的存储方法。</p> <h1>4. 树的遍历</h1> <h2>4-1. 先/前序(根)遍历（深度优先遍历）</h2> <p>先序遍历的遍历顺序是<strong>根→按序遍历子树</strong>。<br /> 类似于深度优先搜索，先序遍历就是一头猛扎到底，不到黄河不回头。<br /> 示例代码（输出树的先序遍历顺序）：</p> <pre><code class="prism language-cpp"><span class="token keyword">void</span><span class="token function">pre</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//p 为当前节点编号</span><span class="token punctuation">{<!-- --></span> 	cout<span class="token operator"><<</span>p<span class="token operator"><<</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">pre</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>若为上面的树，则输出<code>1 2 4 5 3 6 7 9 8</code>。</p> <h2>4-2. 后序(根)遍历</h2> <p>后序遍历顺序和先序遍历相反，为<strong>按序遍历子树→根</strong>。<br /> 示例代码（输出树的后序遍历顺序）：</p> <pre><code class="prism language-cpp"><span class="token keyword">void</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//p 为当前节点编号</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">post</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> 	cout<span class="token operator"><<</span>p<span class="token operator"><<</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token comment">//可以发现，只是改动了输出位置</span><span class="token punctuation">}</span></code></pre> <p>若为上面的树，则输出<code>4 5 2 6 9 7 8 3 1</code>。</p> <h2>4-3. 层次遍历（宽/广度优先遍历）</h2> <p>层次遍历的写法类似广度优先搜索，使用队列存储节点，然后输出每一层的节点。<br /> 示例代码（输出树的层次遍历）：</p> <pre><code class="prism language-cpp">queue<span class="token operator"><</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//root 为根节点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		cout<span class="token operator"><<</span>x<span class="token operator"><<</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 			q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>若为上面的树，则输出<code>1 2 3 4 5 6 7 8 9</code>。</p> <h2>4-4. 叶子节点遍历</h2> <p>顾名思义，只遍历叶子节点，那我们随便写就可以了。<br /> dfs 写法：</p> <pre><code class="prism language-cpp"><span class="token keyword">void</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//p 为当前节点编号</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 		cout<span class="token operator"><<</span>p<span class="token operator"><<</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">pre</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>bfs 写法：</p> <pre><code class="prism language-cpp">queue<span class="token operator"><</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//root 为根节点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator"><<</span>x<span class="token operator"><<</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 				q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>枚举写法：</p> <pre><code class="prism language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator"><=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//n 为节点数</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator"><<</span>i<span class="token operator"><<</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h1>5. 练习</h1> <ol> <li>给定节点关系，输出先序、后序、层次、叶节点遍历的结果（根节点不一定是<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span>）。</li> <li>给定节点关系，求树的深度。</li> <li>给定节点关系，求出两个节点相距距离最长是多少（父子节点的边算一个单位长度）。</li> </ol> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1789.htm">浅尝Spring注解开发_Bean生命周期及执行过程_在线工具</a></p>
                                                        <p>下一个：<a href="/html/category/article-1791.htm">SpringCloud之Feign使用和拓展</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6903.htm" title="动物疫苗存放环境要求有哪些（动物疫苗在常温下能放多久）">动物疫苗存放环境要求有哪些（动物疫苗在常温下能放多久）</a></li>
                        <li class="py-2"><a href="/html/category/article-4527.htm" title="宠物粮食批发市场地址在哪里啊电话（附近宠物粮食店）">宠物粮食批发市场地址在哪里啊电话（附近宠物粮食店）</a></li>
                        <li class="py-2"><a href="/html/category/article-6580.htm" title="宠物批发微信一手货源（宠物批发平台）">宠物批发微信一手货源（宠物批发平台）</a></li>
                        <li class="py-2"><a href="/html/category/article-7041.htm" title="猫狗身上的跳蚤会跳到人身上吗（猫狗身上的跳蚤会跳到人身上吗视频）">猫狗身上的跳蚤会跳到人身上吗（猫狗身上的跳蚤会跳到人身上吗视频）</a></li>
                        <li class="py-2"><a href="/html/category/article-6994.htm" title="厦门宠物店寄养宠物多少钱一天（厦门 宠物店）">厦门宠物店寄养宠物多少钱一天（厦门 宠物店）</a></li>
                        <li class="py-2"><a href="/html/category/article-7270.htm" title="国内十大兽药厂排名（全国排名前十的兽药厂）">国内十大兽药厂排名（全国排名前十的兽药厂）</a></li>
                        <li class="py-2"><a href="/html/category/article-4380.htm" title="12种最适合学生养的宠物便宜（学生能养的宠物）">12种最适合学生养的宠物便宜（学生能养的宠物）</a></li>
                        <li class="py-2"><a href="/html/category/article-6718.htm" title="开一家宠物店大概需要投资多少钱（宠物美容学费一般多少）">开一家宠物店大概需要投资多少钱（宠物美容学费一般多少）</a></li>
                        <li class="py-2"><a href="/html/category/article-6204.htm" title="宠物粮食市场营销调查问卷 宠物粮食市场营销调查问卷模板">宠物粮食市场营销调查问卷 宠物粮食市场营销调查问卷模板</a></li>
                        <li class="py-2"><a href="/html/category/article-7133.htm" title="猫咪疫苗可以自己打吗怎么可以自己（猫咪疫苗自己能打吗）">猫咪疫苗可以自己打吗怎么可以自己（猫咪疫苗自己能打吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>