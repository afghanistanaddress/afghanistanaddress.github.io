<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1814.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>实践搭建Redis一主两从三哨兵 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">实践搭建Redis一主两从三哨兵</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h3 id="实践---搭建redis一主两从三哨兵">实践 - 搭建Redis一主两从三哨兵</h3> <h4 id="原因">原因：</h4> <p>最近在复习Redis的时候，学习到了为了提高Redis集群的<strong>高可用性</strong>，有一个模式为<strong>哨兵模式</strong>。<strong>哨兵模式</strong>的作用是为了在主节点出现阻塞或者错误，无法接收数据的时候，及时将<strong>从节点切换为主节点</strong>，由此保证Redis集群能够保持正常状态，保持高可用。</p> <p>但是尽管引入<strong>哨兵模式</strong>能够提高集群的高可用性，但是随之带来的有<strong>数据丢失</strong>，<strong>数据不一致</strong>问题。这些问题的原因有可能是因为主从异步复制的时候，主节点挂了，导致子节点接收<strong>数据不完整</strong>，出现<strong>数据不一致问题</strong>。也有可能是因为出现了<strong>脑裂问题</strong>，导致数据丢失问题等等。</p> <p>但是知道概念后，就需要实践一下才会知道这些问题出现的原因，避免纸上谈兵。</p> <h4 id="部署节点">部署节点：</h4> <p>那么一共需要的是六个节点，也就是要启动六个Redis服务来模拟集群，那这里我使用Docker-Compose来实现集群。</p> <h5 id="1-创建文件夹">1. 创建文件夹</h5> <p>一共是六个节点，分别是一个<strong>主机</strong>，两个<strong>从机</strong>，三个<strong>哨兵</strong>。所以我们需要创建<strong>六个文件夹</strong>来对应这六个节点。</p> <p>这是最终创建的结构树。</p> <pre><code class="language-txt">. |-- docker-compose.yml |-- master |   |-- conf |   |   `-- redis.conf |   `-- data |       |-- dump.rdb |       `-- nodes.conf |-- sentinel1 |   |-- conf |   |   `-- sentinel.conf |   `-- data |-- sentinel2 |   |-- conf |   |   `-- sentinel.conf |   `-- data |-- sentinel3 |   |-- conf |   |   `-- sentinel.conf |   `-- data |-- slave1 |   |-- conf |   |   `-- redis.conf |   `-- data |       `-- dump.rdb `-- slave2     |-- conf     |   `-- redis.conf     `-- data         `-- dump.rdb</code></pre> <p>从Redis官网获取最新的<strong>Redis.conf</strong>，并复制到<strong>master，slave1，slave2</strong>的conf文件夹中。并获取<strong>sentinel.conf</strong>复制到<strong>sentinel1，sentinel2，sentinel3</strong>的conf文件夹中。</p> <h5 id="2编写配置">2.编写配置：</h5> <p>然后修改一下配置。</p> <ul> <li>主机</li> </ul> <pre><code class="language-conf">bind 0.0.0.0 #设置所有地址访问 protected-mode yes #这个是默认开启的，也就是开启安全模式 requirepass 123456 #设置密码</code></pre> <p>以上的配置无论是主机还是从机都要配置，这是一样的。</p> <ul> <li>从机</li> </ul> <pre><code class="language-conf">replica-read-only yes   #这个配置是从机只能读，不能写 replicaof 172.20.1.2 6379 #配置主机的ip和端口 在redis5.0以前则是salveof配置 masterauth 123456   #因为主节点设置了密码，必须设置这个，否则会连不上主节点</code></pre> <p>这里说一下，在Vi下编辑文档，查找，另起一行的命令如下。</p> <pre><code class="language-shell">/你要查找的词  #按N往上找 按n往下找 o #直接在当前行下另起一行</code></pre> <ul> <li>哨兵</li> </ul> <pre><code class="language-conf">#这个配置的作用就是设置监听的master节点的信息，mymaster可以换成符合规定的其他名字，后面的2是指当有两个sentinel认为#这个master失效了，才会认为失效，从而进行主从切换 sentinel monitor mymaster 172.20.1.2 6379 2  #配置主从的的密码，注意mymaster要对应刚才的配置项 sentinel auth-pass mymaster 123456   #这个配置项指定了需要多少失效时间，一个master才会被这个sentinel主观地认为是不可用的。 单位是毫秒，默认为30秒 sentinel down-after-milliseconds mymaster 30000  #这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。值越大，slave复制的越快，但同时也对主节点的网络和硬盘负载造成压力 sentinel parallel-syncs mymaster 1  #定义故障切换超时时间。默认180000，单位秒，即3min。 sentinel failover-timeout mymaster 180000  #设置运行期是不能改变notification-script和 client-reconfig-script ，避免一些安全问题 sentinel deny-scripts-reconfig yes</code></pre> <h5 id="3编写docker-compose文件">3.编写docker-compose文件</h5> <p>然后就是编写<strong>docker-compose</strong>文件了。</p> <pre><code class="language-yaml">version: '3' services:   master:     image: redis:latest     container_name: redis_master  #master节点     volumes:       - ./master/conf/redis.conf:/etc/redis/redis.conf       - ./master/data:/data     networks:       redis_network:         ipv4_address: 172.20.1.2     command: /bin/bash -c "redis-server /etc/redis/redis.conf"  #这句话就是要加载这个路径下的配置     environment:       - TZ=Asia/Shanghai       - LANG=en_US.UTF-8     ports:       - "6379:6379"    slave1:     image: redis:latest     container_name: redis_slave_1   #slave1节点     volumes:       - ./slave1/conf/redis.conf:/etc/redis/redis.conf       - ./slave1/data:/data     networks:       redis_network:         ipv4_address: 172.20.1.3     command: /bin/bash -c "redis-server /etc/redis/redis.conf"     environment:       - TZ=Asia/Shanghai       - LANG=en_US.UTF-8     ports:       - "6380:6379"    slave2:     image: redis:latest     container_name: redis_slave_2   #slave2节点     volumes:       - ./slave2/conf/redis.conf:/etc/redis/redis.conf       - ./slave2/data:/data     networks:       redis_network:         ipv4_address: 172.20.1.4     command: /bin/bash -c "redis-server /etc/redis/redis.conf"     environment:       - TZ=Asia/Shanghai       - LANG=en_US.UTF-8     ports:       - "6381:6379"      sentinel1:     image: redis:latest     container_name: redis_sentinel_1  #sentinel1节点     ports:       - "26379:26379"     volumes:       - ./sentinel1/conf/sentinel.conf:/usr/local/etc/redis/sentinel.conf     networks:       redis_network:         ipv4_address: 172.20.1.5     command: /bin/bash -c "redis-sentinel /usr/local/etc/redis/sentinel.conf"    sentinel2:     image: redis:latest     container_name: redis_sentinel_2 #sentinel2节点     ports:       - "26380:26379"     volumes:       - ./sentinel2/conf/sentinel.conf:/usr/local/etc/redis/sentinel.conf     networks:       redis_network:         ipv4_address: 172.20.1.6     command: /bin/bash -c "redis-sentinel /usr/local/etc/redis/sentinel.conf"    sentinel3:     image: redis:latest     container_name: redis_sentinel_3 #sentinel3节点     ports:       - "26381:26379"     volumes:       - ./sentinel3/conf/sentinel.conf:/usr/local/etc/redis/sentinel.conf     networks:       redis_network:         ipv4_address: 172.20.1.7     command: /bin/bash -c "redis-sentinel /usr/local/etc/redis/sentinel.conf"  networks:   redis_network:     driver: bridge     ipam:       config:       - subnet: 172.20.1.0/24</code></pre> <p>执行<code>docker-compose up -d</code>创建容器。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2ab3d9ba30ced9efcf6bf37a8f76642b.jpg" alt="实践搭建Redis一主两从三哨兵"></p> <p>一共出现六个容器，如果某个容器不见了，那就证明配置有误。执行<code>docker logs 容器id</code>来查看日志。</p> <p>新建三个终端来分别进入<strong>master，slave和sentinel</strong>节点。</p> <h5 id="4验证状态">4.验证状态</h5> <p>使用命令</p> <pre><code class="language-shell">docker exec -it redis_master bash #进入后使用命令进入redis-cli，-a是指密码，-h是指ip，-p是指端口 redis-cli -a 123456 -h 172.20.1.2 -p 6379 #使用命令查看从机信息 info replication</code></pre> <p><img decoding="async" src="https://songtiancloud-1300061766.cos.ap-guangzhou.myqcloud.com/img/202204202111340.png" alt="实践搭建Redis一主两从三哨兵"></p> <p>从节点有两个，ip也给出了。</p> <p>然后我们按照刚才的命令进入从机，试一下创建一个key，发现出现错误。这就是刚才从机配置的<code>replica-read-only yes</code>配置在发挥作用了。因为按照我们的设定，一主两从，主节点是负责写，从节点负责读，读写分离，那么从节点当然无法写入数据。</p> <p><img decoding="async" src="https://songtiancloud-1300061766.cos.ap-guangzhou.myqcloud.com/img/202204202113198.png" alt="实践搭建Redis一主两从三哨兵"></p> <p>我们进入<strong>sentinel</strong>节点，<strong>注意：进入redis-cli的端口不是6379了，而是刚才配置的26379端口</strong>。执行<code>info</code>命令，往下划。</p> <p><img decoding="async" src="https://songtiancloud-1300061766.cos.ap-guangzhou.myqcloud.com/img/202204202133633.png" alt="实践搭建Redis一主两从三哨兵"></p> <p>可以看到<strong>sentinel</strong>节点监控的<strong>master节点</strong>只有一个，而且ip也正是我们的<strong>master</strong>主机ip，<strong>slaves</strong>为2，<strong>sentinels</strong>为3，这说明我们的配置的一主两从三哨兵是正常运行的。</p> <h4 id="测试">测试：</h4> <p>我们尝试在主节点写入数据，看看是否会同步到从机中。</p> <p><img decoding="async" src="https://songtiancloud-1300061766.cos.ap-guangzhou.myqcloud.com/img/202204202207163.png" alt="实践搭建Redis一主两从三哨兵"></p> <p>我们在从机查看是否有该key。</p> <p><img decoding="async" src="https://songtiancloud-1300061766.cos.ap-guangzhou.myqcloud.com/img/202204202208914.png" alt="实践搭建Redis一主两从三哨兵"></p> <p>从机的确能获取到主机所设置的key值，说明<strong>主从同步</strong>是正常的。</p> <p>同时<strong>读写分离</strong>是Redis自带的，通过配置<strong>slave</strong>，Redis会自动地让从机进行读操作，让主机进行写操作。这是Redis的主从模式所自带的。</p> <p>而在主从模式的基础上添加<strong>哨兵模式</strong>，从而提高主从模式的高可用。</p> <h3 id="模拟故障">模拟故障</h3> <p>这里先模拟一个最常见的故障，就是<strong>master主机宕机</strong>，看看是否会进行主从切换。</p> <p>这里直接stop掉master主机的容器。</p> <p>然后过个30秒，在Sentinel的容器上执行命令</p> <pre><code class="language-shell">info Sentinel</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f5a403433c46a52e323a313806edca05.jpg" alt="实践搭建Redis一主两从三哨兵"></p> <p>然后发现<strong>master</strong>主机已经改变了，<strong>slave2</strong>从机节点被切换成为新的<strong>master</strong>节点。</p> <h3 id="总结">总结：</h3> <p>通过以上步骤，我们完成了一主两从三哨兵的搭建，同时也通过模拟一个最最常见的故障了测试<strong>哨兵模式</strong>的主从切换功能。那就来总结一下哨兵模式的功能吧。</p> <ol> <li>故障转移，能够通过配置及时地将从机切换成主机。</li> <li>故障发现，能够通过Ping监控Master状态。</li> <li>配置中心，能够统一配置所有节点的主节点信息。</li> </ol> <p>优点：</p> <ul> <li>哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</li> <li>主从可以自动切换，系统更健壮，可用性更高。</li> <li>Sentinel 会不断的检查 主服务器 和 从服务器 是否正常运行。当被监控的某个 Redis 服务器出现问题，Sentinel 通过API脚本向管理员或者其他的应用程序发送通知。</li> </ul> <p>    缺点：</p> <ul> <li>Redis较难支持在线扩容，对于集群，容量达到上限时在线扩容会变得很复杂。</li> </ul> <p>主从模式解决了<strong>Redis</strong>的xx，哨兵模式解决了<strong>Redis</strong>的高可用性问题，但是面对<strong>在线扩容</strong>则显得困难，所以才有了<strong>Cluster</strong>集群模式，通过水平拓展<strong>Redis节点</strong>，从而解决了扩容这个问题。后面我们会继续研究<strong>Cluster</strong>集群的搭建与它的一些讨论。</p> <p>同时主从模式和哨兵模式中有一些功能值得我们去深究，例如Sentinel是如何通知其他从机切换主机的呢？Sentinel的投票仲裁机制是怎么样的？</p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1813.htm">在获取数据作为输出的同时，如何在同一列上使用多个条件？</a></p>
                                                        <p>下一个：<a href="/html/category/article-1815.htm">C语言：关键字&#8212;union（声明共用体类型）</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1951.htm" title="设计模式学习笔记（十三）组合模式及其在树形结构中的应用">设计模式学习笔记（十三）组合模式及其在树形结构中的应用</a></li>
                        <li class="py-2"><a href="/html/category/article-1885.htm" title="Java中的base64编码器_java_">Java中的base64编码器_java_</a></li>
                        <li class="py-2"><a href="/html/category/article-1891.htm" title="八大基本数据类型及数据类型之间的转换&#8212;zixiao">八大基本数据类型及数据类型之间的转换&#8212;zixiao</a></li>
                        <li class="py-2"><a href="/html/category/article-1894.htm" title="小程序自定义导航栏组件">小程序自定义导航栏组件</a></li>
                        <li class="py-2"><a href="/html/category/article-1898.htm" title="Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]">Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]</a></li>
                        <li class="py-2"><a href="/html/category/article-1878.htm" title="echart整体图形大小调整">echart整体图形大小调整</a></li>
                        <li class="py-2"><a href="/html/category/article-1875.htm" title="No version of NDK matched the requested version 21.1.6113669. Versions available locally: 23.1.77796">No version of NDK matched the requested version 21.1.6113669. Versions available locally: 23.1.77796</a></li>
                        <li class="py-2"><a href="/html/category/article-1905.htm" title="python中time.strftime不支持中文，报错UnicodeEncodeError: &#8216;locale&#8217; codec can&#8217;t encode character &#8216;\u5e74&#8217; in po&#8230;">python中time.strftime不支持中文，报错UnicodeEncodeError: &#8216;locale&#8217; codec can&#8217;t encode character &#8216;\u5e74&#8217; in po&#8230;</a></li>
                        <li class="py-2"><a href="/html/category/article-1888.htm" title="pandas 分批读取大量数据">pandas 分批读取大量数据</a></li>
                        <li class="py-2"><a href="/html/category/article-1938.htm" title="JavaScript数字数组的均等分割方法详解">JavaScript数字数组的均等分割方法详解</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>