<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1827.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Java-自定义队列 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">Java-自定义队列</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h2>队列的概述</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/036d436ff75afc648c1a633c1cedf558.jpg" alt="Java-自定义队列"></p> <p>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。 队列的工作原理与现实生活中的队列完全相同。假设你与朋友一起在公交车站排队，如果你排在他前面，你将先上车，而后来的人将会排在你朋友后面。队列的工作原理与此相同。</p> <p>队列是一种先进先出（First In First Out）的线性表，简称FIFO。 允许插入的一端称为队尾，允许删除的一端称为队头。假设队列是q=(a1,a2,…,an)，那么a1就是队头元素，而an是队尾元素。这样我们就可以删除时，总是从a1开始，而插入时，列在最后。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/0af180afe82956103d767eb18d5edef1.jpg" alt="Java-自定义队列"><br /> 因为队列属于线性表，因此队列也可以采用顺序存储结构和链式存储结构来实现。Java中已经提供了很多线程的队列的实现，比如JUC中的各种阻塞、非阻塞队列。在生产环境中，各种消息队列比如kafka底层都使用了最基本的队列的特性。队列的使用频率是要高于栈的。</p> <h2>队列接口</h2> <pre><code class="prism language-java"><span class="token keyword">package</span><span class="token namespace">com<span class="token punctuation">.</span>lineardatastructure<span class="token punctuation">.</span>queue</span><span class="token punctuation">;</span><span class="token comment">/**  * @author huanmin  * @param <T>  */</span><span class="token comment">/**  * 自定义队列接口定义  **/</span><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">{<!-- --></span><span class="token comment">/**      * 向队列中添加元素      *      * @param e      */</span><span class="token keyword">void</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">T</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**      * 从队列中删除元素      */</span><span class="token class-name">T</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**      * 获取队列顶元素      *      * @return      */</span><span class="token class-name">T</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**      * 获取队列中元素个数      *      * @return      */</span><span class="token keyword">int</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**      * 判断队列中是否为空      *      * @return      */</span><span class="token keyword">boolean</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**      * 判断队列是否满      * @return      */</span><span class="token keyword">boolean</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**      * 销毁队列      */</span><span class="token keyword">void</span><span class="token function">queueDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h2>队列数组储结构</h2> <p>队列的入队和出队操作在不同端。采用数组来实现时，如果队头在数组元素最小索引处，那么入队列就是将元素添加到最大索引后的索引处，不需要移动元素，此时时间复杂度为Ｏ(1), 但是出队列就要在数组头部了，此时将会移动全部元素，时间复杂度为O(n)(但是也是有优化办法看下图)。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/977acbb6d5464b1d34e1cfd08b17243c.jpg" alt="Java-自定义队列"><br /> 当浪费到指定数量内存后我们进行迁移数据<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/d0a516221530b7c29c46b36acb390273.jpg" alt="Java-自定义队列"><br /> 当队列满了,我们就进行扩容<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/34c3864aada4d4b6daf73fd1967167e3.jpg" alt="Java-自定义队列"></p> <pre><code class="prism language-java"><span class="token keyword">package</span><span class="token namespace">com<span class="token punctuation">.</span>lineardatastructure<span class="token punctuation">.</span>queue</span><span class="token punctuation">;</span><span class="token comment">/**  * @author huanmin  * @param <T>  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">ArrayQueue</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token keyword">implements</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayQueue<span class="token punctuation">;</span><span class="token comment">//队列数组</span><span class="token keyword">private</span><span class="token keyword">int</span> end<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//队尾下标</span><span class="token keyword">private</span><span class="token keyword">int</span> begin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//队列开头</span><span class="token keyword">private</span><span class="token keyword">final</span><span class="token keyword">int</span> CLEARTRASH<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//垃圾个数</span><span class="token keyword">private</span><span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         arrayQueue<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Object</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         arrayQueue<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">void</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">T</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token comment">//队列满了进行扩容</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token number">0.75</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> target<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//java最快数组copy方式</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token comment">//将原数组替换</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token class-name">T</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列为空,请先向队列中添加元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token class-name">T</span> t<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>begin<span class="token operator">==</span> CLEARTRASH<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//队列向前移动,清理垃圾</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>CLEARTRASH<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> target<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">,</span> i<span class="token punctuation">,</span> target<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>begin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>begin<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token class-name">T</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">int</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">boolean</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>begin<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">boolean</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">void</span><span class="token function">queueDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>arrayQueue<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>队列链表储结构</h2> <p>队列的入队和出队操作在不同端。采用链表来实现时，队列头和队列尾部, 时间复杂度都是Ｏ(1) 使用链式结构实现队列相比顺序结构的实现更加简单。</p> <p>队列的链式存储结构，其实就是线性表的单链表，只不过它只是尾进头出而已，我们把它简称为链队列。为了操作上的方便，我们将队头指针指向链队列的头结点，而队尾指针指向终端节点<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/f8c34dc4171331ee9f47ac1e049c724d.jpg" alt="Java-自定义队列"><br /> 空队列时，头指针front和尾指针rear都指向头结点。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/4955b39135e42c30fe3082904a7962f3.jpg" alt="Java-自定义队列"></p> <p><strong>插入</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/1b94b522850cc1098ce8511a8ea31ce0.jpg" alt="Java-自定义队列"></p> <p><strong>取值</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/a58f419c417539949b01bed06dc9ef8d.jpg" alt="Java-自定义队列"></p> <pre><code class="prism language-java"><span class="token keyword">package</span><span class="token namespace">com<span class="token punctuation">.</span>lineardatastructure<span class="token punctuation">.</span>queue</span><span class="token punctuation">;</span><span class="token comment">/**  * @author huanmin  * @param <T>  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">LinkedQueue</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token keyword">implements</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">{<!-- --></span><span class="token comment">/**      * 指向队头结点的引用      */</span><span class="token keyword">private</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span> first<span class="token punctuation">;</span><span class="token comment">/**      * 指向队尾结点的引用      */</span><span class="token keyword">private</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span> end<span class="token punctuation">;</span><span class="token comment">/**      * 元素个数      */</span><span class="token keyword">private</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">class</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">{<!-- --></span><span class="token comment">//下一个结点的引用</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span><span class="token comment">//结点数据</span><span class="token class-name">T</span> data<span class="token punctuation">;</span><span class="token comment">//节点构造器</span><span class="token keyword">public</span><span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">,</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token operator">=</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">T</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//创建新节点</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">T</span><span class="token punctuation">></span></span> newNode<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation"><</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">=</span> newNode<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token operator">=</span> newNode<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//改变头节点,和尾节点 ,A-b-c-d</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token punctuation">.</span>next<span class="token operator">=</span>newNode<span class="token punctuation">;</span><span class="token comment">// 这个动作其实是添加this.first的下一个节点 ,1,2,3,4</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">=</span>newNode<span class="token punctuation">;</span><span class="token comment">//存放最后节点元素</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token class-name">T</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">T</span> e<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token comment">//改变队头节点引用,将下一个节点引用替换当前引用</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//如果元素为0,则将队尾节点引用置空</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token class-name">T</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">int</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">queueDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><center><br /></center><center><br /></center></div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1826.htm">springboot配置多数据源（连接多个数据库）</a></p>
                                                        <p>下一个：<a href="/html/category/article-1828.htm">SpringBoot 如何进行参数校验</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-5941.htm" title="余定邦（余定邦是什么电视剧人物）">余定邦（余定邦是什么电视剧人物）</a></li>
                        <li class="py-2"><a href="/html/category/article-6902.htm" title="猫主动爬你身上说明了什么不是主人（猫主动爬你身上说明了什么不是主人的表现）">猫主动爬你身上说明了什么不是主人（猫主动爬你身上说明了什么不是主人的表现）</a></li>
                        <li class="py-2"><a href="/html/category/article-4598.htm" title="天使艾美丽电视剧全集爱奇艺（真没想到）《天使艾美丽》，四个女仔三个bar 电视剧，天使艾美丽电视剧，">天使艾美丽电视剧全集爱奇艺（真没想到）《天使艾美丽》，四个女仔三个bar 电视剧，天使艾美丽电视剧，</a></li>
                        <li class="py-2"><a href="/html/category/article-7178.htm" title="大型饲料颗粒机（大型饲料颗粒机多少钱一台价格）">大型饲料颗粒机（大型饲料颗粒机多少钱一台价格）</a></li>
                        <li class="py-2"><a href="/html/category/article-7224.htm" title="开动物医院的条件和要求有哪些（开办一间动物医院需要什么资质）">开动物医院的条件和要求有哪些（开办一间动物医院需要什么资质）</a></li>
                        <li class="py-2"><a href="/html/category/article-6073.htm" title="可以自己给猫注射疫苗吗（可以自己给猫打疫苗针吗）">可以自己给猫注射疫苗吗（可以自己给猫打疫苗针吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6903.htm" title="动物疫苗存放环境要求有哪些（动物疫苗在常温下能放多久）">动物疫苗存放环境要求有哪些（动物疫苗在常温下能放多久）</a></li>
                        <li class="py-2"><a href="/html/category/article-7040.htm" title="广州猫领养中心地址查询电话（广州猫领养中心地址查询电话号码）">广州猫领养中心地址查询电话（广州猫领养中心地址查询电话号码）</a></li>
                        <li class="py-2"><a href="/html/category/article-7132.htm" title="法内情2002（袁咏仪法内情国语第一集）">法内情2002（袁咏仪法内情国语第一集）</a></li>
                        <li class="py-2"><a href="/html/category/article-6995.htm" title="宠物粮食生产配方表最新（宠物粮的配方）">宠物粮食生产配方表最新（宠物粮的配方）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>