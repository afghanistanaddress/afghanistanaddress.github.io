<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1828.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>SpringBoot 如何进行参数校验 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">SpringBoot 如何进行参数校验</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h2 id="为什么需要参数校验">为什么需要参数校验</h2> <p>在日常的接口开发中，为了防止非法参数对业务造成影响，经常需要对接口的参数进行校验，例如登录的时候需要校验用户名和密码是否为空，添加用户的时候校验用户邮箱地址、手机号码格式是否正确。 靠代码对接口参数一个个校验的话就太繁琐了，代码可读性极差。<br /><code>Validator</code>框架就是为了解决开发人员在开发的时候少写代码，提升开发效率；Validator专门用来进行接口参数校验，例如常见的必填校验，email格式校验，用户名必须位于6到12之间等等。<br /> 接下来我们看看在SpringbBoot中如何集成参数校验框架。</p> <h1 id="springboot中集成参数校验">SpringBoot中集成参数校验</h1> <h2 id="引入依赖">引入依赖</h2> <pre><code class="language-xml">&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre> <h2 id="定义参数实体类">定义参数实体类</h2> <pre><code class="language-java">package com.didiplus.modules.sys.domain;  import io.swagger.annotations.ApiModel; import io.swagger.annotations.ApiModelProperty; import lombok.Data;  import javax.validation.constraints.Email; import javax.validation.constraints.NotBlank; import javax.validation.constraints.NotEmpty;  /**  * Author: didiplus  * Email: 972479352@qq.com  * CreateTime: 2022/4/25  * Desc: 字典类型领域模型  */  @Data @ApiModel(value = "字典类型") public class SysDictType {      @ApiModelProperty("ID")     private String id;      @NotBlank(message = "字典名称必填项")     @ApiModelProperty(value = "字典名称",example = "用户ID")     private String typeName;      @NotBlank(message = "字典编码不能为空")     @ApiModelProperty(value = "字典编码")     private String typeCode;      @Email(message = "请填写正确的邮箱地址")     @ApiModelProperty(value = "字典编码")     private String email;      @ApiModelProperty(value = "字典描述")     private String description;      @NotBlank(message = "字典状态不能为空")     @ApiModelProperty(value = "字典状态")     private String enable; }</code></pre> <p>常见的约束注解如下：</p> <table> <thead> <tr> <th>注解</th> <th>功能</th> </tr> </thead> <tbody> <tr> <td>@AssertFalse</td> <td>可以为null,如果不为null的话必须为false</td> </tr> <tr> <td>@AssertTrue</td> <td>可以为null,如果不为null的话必须为true</td> </tr> <tr> <td>@DecimalMax</td> <td>设置不能超过最大值</td> </tr> <tr> <td>@DecimalMin</td> <td>设置不能超过最小值</td> </tr> <tr> <td>@Digits</td> <td>设置必须是数字且数字整数的位数和小数的位数必须在指定范围内</td> </tr> <tr> <td>@Future</td> <td>日期必须在当前日期的未来</td> </tr> <tr> <td>@Past</td> <td>日期必须在当前日期的过去</td> </tr> <tr> <td>@Max</td> <td>最大不得超过此最大值</td> </tr> <tr> <td>@Min</td> <td>最大不得小于此最小值</td> </tr> <tr> <td>@NotNull</td> <td>不能为null，可以是空</td> </tr> <tr> <td>@Null</td> <td>必须为null</td> </tr> <tr> <td>@Pattern</td> <td>必须满足指定的正则表达式</td> </tr> <tr> <td>@Size</td> <td>集合、数组、map等的size()值必须在指定范围内</td> </tr> <tr> <td>@Email</td> <td>必须是email格式</td> </tr> <tr> <td>@Length</td> <td>长度必须在指定范围内</td> </tr> <tr> <td>@NotBlank</td> <td>字符串不能为null,字符串trim()后也不能等于""</td> </tr> <tr> <td>@NotEmpty</td> <td>不能为null，集合、数组、map等size()不能为0；字符串trim()后可以等于""</td> </tr> <tr> <td>@Range</td> <td>值必须在指定范围内</td> </tr> <tr> <td>@URL</td> <td>必须是一个URL</td> </tr> </tbody> </table> <h2 id="定义校验类进行测试">定义校验类进行测试</h2> <pre><code class="language-java">package com.didiplus.modules.sys.controller;  import com.didiplus.modules.sys.domain.SysDictType; import io.swagger.annotations.Api; import io.swagger.annotations.ApiOperation; import io.swagger.v3.oas.annotations.parameters.RequestBody; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  /**  * Author: didiplus  * Email: 972479352@qq.com  * CreateTime: 2022/4/25  * Desc: 数据字典控制器  */ @RestController @Api(tags = "数据字典") @RequestMapping("/api/sys/dictType") public class SysDictTypeController {      @ApiOperation("字典添加")     @PostMapping("/add")     public SysDictType add(@Validated @RequestBody SysDictType sysDictType) {         return  sysDictType;     }      @ApiOperation("字典修改")     @PutMapping("/edit")     public SysDictType edit(@Validated @RequestBody SysDictType sysDictType) {         return  sysDictType;     }   }</code></pre> <p>这里我们先定义两个方法<code>add</code>,<code>edit</code>，都是使用了<code>@RequestBody</code>注解，用于接受前端发送的<code>json</code>数据。</p> <h2 id="打开接口文档模拟提交数据">打开接口文档模拟提交数据</h2> <p><img decoding="async" src="https://gitee.com/didiplus/imgbed/raw/master/static/20220426153641.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=vonlW&amp;originHeight=792&amp;originWidth=1597&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=stroke&amp;title=" alt="" loading="lazy"/><br /> 通过接口文档看到前三个字段都是必填项。<br /><img decoding="async" src="https://gitee.com/didiplus/imgbed/raw/master/static/20220426155017.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=qboSr&amp;originHeight=731&amp;originWidth=1588&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" loading="lazy"/><br /> 由于email的格式不对就被拦截了，提示是因为邮箱地址不对。</p> <h1 id="参数异常加入全局异常处理器">参数异常加入全局异常处理器</h1> <p>虽然我们之前定义了全局异常拦截器，也看到了拦截器确实生效了，但是<code> Validator</code>校验框架返回的错误提示太臃肿了，不便于阅读，为了方便前端提示，我们需要将其简化一下。<br /> 直接修改之前定义的<code>RestExceptionHandler</code>，单独拦截参数校验的三个异常：<code>javax.validation.ConstraintViolationException</code>，<code>org.springframework.validation.BindException</code>，<code>org.springframework.web.bind.MethodArgumentNotValidException</code>，代码如下：</p> <pre><code class="language-java">package com.didiplus.common.web.response.Handler;  import com.didiplus.common.web.response.Result;  import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.validation.BindException; import org.springframework.validation.ObjectError; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RestControllerAdvice;  import javax.validation.ConstraintViolation; import javax.validation.ConstraintViolationException; import javax.validation.ValidationException;  import java.util.stream.Collectors;  /**  * Author: didiplus  * Email: 972479352@qq.com  * CreateTime: 2022/4/24  * Desc:  默认全局异常处理。  */ @RestControllerAdvice public class RestExceptionHandler {     /**      * 默认全局异常处理。      * @param e the e      * @return ResultData      */     @ExceptionHandler(value = {BindException.class, ValidationException.class, MethodArgumentNotValidException.class})     public ResponseEntity&lt;Result&lt;String&gt;&gt; handleValidatedException(Exception e) {             Result&lt;String&gt;  result = null;             if (e instanceof  MethodArgumentNotValidException) {                 MethodArgumentNotValidException ex =(MethodArgumentNotValidException)  e;                 result = Result.failure(HttpStatus.BAD_REQUEST.value(),                                 ex.getBindingResult().getAllErrors().stream()                                         .map(ObjectError::getDefaultMessage)                                         .collect(Collectors.joining(";"))                                 );             } else  if (e instanceof ConstraintViolationException){                 ConstraintViolationException ex = (ConstraintViolationException) e;                 result = Result.failure(HttpStatus.BAD_REQUEST.value(),                                         ex.getConstraintViolations().stream()                                                 .map(ConstraintViolation::getMessage)                                                 .collect(Collectors.joining(";"))                                         );             }else  if (e instanceof BindException) {                 BindException  ex = (BindException ) e;                 result = Result.failure(HttpStatus.BAD_REQUEST.value(),                                         ex.getAllErrors().stream()                                                 .map(ObjectError::getDefaultMessage)                                                 .collect(Collectors.joining(";"))                                         );             }             return new ResponseEntity&lt;&gt;(result,HttpStatus.BAD_REQUEST);     } }</code></pre> <p>美化之后错误信息提示更加友好。<br /><img decoding="async" src="https://gitee.com/didiplus/imgbed/raw/master/static/20220426161237.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=VXKRz&amp;originHeight=698&amp;originWidth=1587&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=stroke&amp;title=" alt="" loading="lazy"/></p> <h1 id="自定义参数校验">自定义参数校验</h1> <p>虽然Spring Validation 提供的注解基本上够用，但是面对复杂的定义，我们还是需要自己定义相关注解来实现自动校验。<br /> 比如上面实体类中添加的sex性别属性，只允许前端传递传 M，F 这2个枚举值，如何实现呢？</p> <h2 id="创建自定义注解">创建自定义注解</h2> <pre><code class="language-java">package com.didiplus.common.annotation;  import javax.validation.Constraint; import javax.validation.Payload; import java.lang.annotation.Documented; import java.lang.annotation.Repeatable; import java.lang.annotation.Retention; import java.lang.annotation.Target;  import static java.lang.annotation.ElementType.*; import static java.lang.annotation.RetentionPolicy.RUNTIME;  /**  * Author: didiplus  * Email: 972479352@qq.com  * CreateTime: 2022/4/26  * Desc:  */ @Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE}) @Retention(RUNTIME) @Repeatable(EnumString.List.class) @Documented @Constraint(validatedBy = EnumStringValidator.class)//标明由哪个类执行校验逻辑 public @interface EnumString {      String message() default "value not in enum values.";      Class&lt;?&gt;[] groups() default {};      Class&lt;? extends Payload&gt;[] palyload() default {};     /**      * @return date must in this value array      */     String[] value();      /**      * Defines several {@link EnumString} annotations on the same element.      *      * @see EnumString      */     @Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE})     @Retention(RUNTIME)     @Documented     @interface List {          EnumString[] value();     }   }</code></pre> <h2 id="自定义校验逻辑">自定义校验逻辑</h2> <pre><code class="language-java">package com.didiplus.common.annotation;  import javax.validation.ConstraintValidator; import javax.validation.ConstraintValidatorContext; import java.util.Arrays; import java.util.List;   /**  * Author: didiplus  * Email: 972479352@qq.com  * CreateTime: 2022/4/26  * Desc:  */ public class EnumStringValidator implements ConstraintValidator&lt;EnumString,String&gt; {     private List&lt;String&gt; enumStringList;      @Override     public void initialize(EnumString constraintAnnotation) {         enumStringList = Arrays.asList(constraintAnnotation.value());      }      @Override     public boolean isValid(String value, ConstraintValidatorContext constraintValidatorContext) {         if(value == null) {             return true;         }         return enumStringList.contains(value);     } }</code></pre> <h2 id="在字段上增加注解">在字段上增加注解</h2> <pre><code class="language-java">    @ApiModelProperty(value = "性别")     @EnumString(value = {"F","M"}, message="性别只允许为F或M")     private String sex;</code></pre> <h2 id="体验效果">体验效果</h2> <p><img decoding="async" src="https://gitee.com/didiplus/imgbed/raw/master/static/20220426164440.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=JZWjY&amp;originHeight=751&amp;originWidth=1513&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=stroke&amp;title=" alt="" loading="lazy"/></p> <h1 id="分组校验">分组校验</h1> <p>一个对象在新增的时候某些字段是必填，在更新是有非必填。如上面的<code>SysDictType</code>中<code> id</code> 属性在新增操作时都是<strong>必填。</strong> 面对这种场景你会怎么处理呢？<br /> 其实<code>Validator</code>校验框架已经考虑到了这种场景并且提供了解决方案，就是<strong>分组校验。</strong> 要使用分组校验，只需要三个步骤：</p> <h2 id="定义分组接口">定义分组接口</h2> <pre><code class="language-java">package com.didiplus.common.base;  import javax.validation.groups.Default;  /**  * Author: didiplus  * Email: 972479352@qq.com  * CreateTime: 2022/4/26  * Desc:  */ public interface ValidGroup extends Default {      interface Crud extends ValidGroup{         interface Create extends Crud{          }          interface Update extends Crud{          }          interface Query extends Crud{          }          interface Delete extends Crud{          }     } }</code></pre> <h2 id="在模型中给参数分配分组">在模型中给参数分配分组</h2> <pre><code class="language-java">    @Null(groups = ValidGroup.Crud.Create.class)     @NotNull(groups = ValidGroup.Crud.Update.class,message = "字典ID不能为空")     @ApiModelProperty("ID")     private String id;</code></pre> <h2 id="体现效果">体现效果</h2> <p><img decoding="async" src="https://gitee.com/didiplus/imgbed/raw/master/static/20220427101655.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=Dok7w&amp;originHeight=840&amp;originWidth=1162&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=stroke&amp;title=" alt="" loading="lazy"/><br /><img decoding="async" src="https://gitee.com/didiplus/imgbed/raw/master/static/20220427102410.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=nnzmH&amp;originHeight=765&amp;originWidth=1508&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" loading="lazy"/></p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1827.htm">Java-自定义队列</a></p>
                                                        <p>下一个：<a href="/html/category/article-1829.htm">大数据之hive Serde序列化/反序列化性能对比</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6626.htm" title="韩式烤肉做法（韩式烤肉做法牛肉腌制窍门）">韩式烤肉做法（韩式烤肉做法牛肉腌制窍门）</a></li>
                        <li class="py-2"><a href="/html/category/article-6205.htm" title="宠物粮食创业项目名称大全 宠物粮食创业项目名称大全集">宠物粮食创业项目名称大全 宠物粮食创业项目名称大全集</a></li>
                        <li class="py-2"><a href="/html/category/article-6811.htm" title="猫咪多长时间做一次体内外驱虫啊（猫咪多长时间驱虫）">猫咪多长时间做一次体内外驱虫啊（猫咪多长时间驱虫）</a></li>
                        <li class="py-2"><a href="/html/category/article-6902.htm" title="猫主动爬你身上说明了什么不是主人（猫主动爬你身上说明了什么不是主人的表现）">猫主动爬你身上说明了什么不是主人（猫主动爬你身上说明了什么不是主人的表现）</a></li>
                        <li class="py-2"><a href="/html/category/article-6857.htm" title="上海宠物领养中心地址电话号码查询（上海的宠物领养中心）">上海宠物领养中心地址电话号码查询（上海的宠物领养中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-6029.htm" title="重庆有宠物领养中心吗（重庆有宠物领养中心吗现在）">重庆有宠物领养中心吗（重庆有宠物领养中心吗现在）</a></li>
                        <li class="py-2"><a href="/html/category/article-6581.htm" title="同城宠物狗免费领养在哪里（有没有同城领养宠物的小程序）">同城宠物狗免费领养在哪里（有没有同城领养宠物的小程序）</a></li>
                        <li class="py-2"><a href="/html/category/article-6903.htm" title="动物疫苗存放环境要求有哪些（动物疫苗在常温下能放多久）">动物疫苗存放环境要求有哪些（动物疫苗在常温下能放多久）</a></li>
                        <li class="py-2"><a href="/html/category/article-6765.htm" title="领养边牧会对新主人忠心吗（领养边牧犬）">领养边牧会对新主人忠心吗（领养边牧犬）</a></li>
                        <li class="py-2"><a href="/html/category/article-6764.htm" title="动物医院实践心得500字怎么写的 动物医院实践心得500字怎么写的啊">动物医院实践心得500字怎么写的 动物医院实践心得500字怎么写的啊</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>