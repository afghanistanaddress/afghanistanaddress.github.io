<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1838.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Zookeeper的Watch机制实现配置中心 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">Zookeeper的Watch机制实现配置中心</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>目录</h3> <ul> <li>一、简介</li> <li> <ul> <li>1.1 环境准备</li> </ul> </li> <li>二、代码实现</li> <li> <ul> <li>2.1 项目搭建</li> <li>2.2 获得zk客户端</li> <li>2.3 实现动态监控节点状态</li> <li>2.4 测试</li> </ul> </li> <li>三、代码分析</li> <li>四、源码</li> </ul> </div> <h1>一、简介</h1> <blockquote> <p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p> </blockquote> <h2>1.1 环境准备</h2> <p>服务器配置：</p> <table> <thead> <tr> <th>节点</th> <th>IP</th> </tr> </thead> <tbody> <tr> <td>node01</td> <td>192.168.153.128</td> </tr> <tr> <td>node02</td> <td>192.168.153.128</td> </tr> <tr> <td>node03</td> <td>192.168.153.128</td> </tr> </tbody> </table> <p>zookeeper集群使用了Docker进行搭建：</p> <pre><code class="prism language-powershell"><span class="token comment">#下载镜像</span> docker pull zookeeper:3<span class="token punctuation">.</span>4<span class="token punctuation">.</span>13</code></pre> <p>在<code>conf</code>目录下创建<code>zoo.cfg</code>文件：</p> <pre><code class="prism language-txt">clientPort=2181  dataDir=/data dataLogDir=/data/log tickTime=2000  initLimit=5  syncLimit=2  autopurge.snapRetainCount=3  autopurge.purgeInterval=0  maxClientCnxns=60  server.1=192.168.153.128:2888:3888  server.2=192.168.153.129:2888:3888  server.3=192.168.153.130:2888:3888</code></pre> <p>在<code>data</code>目录下创建<code>myid</code>文件：(注意写入的数字对应的是zoo.cfg配置中server.后的数字)</p> <pre><code class="prism language-powershell"><span class="token comment">#在node01节点</span><span class="token function">echo</span><span class="token string">"1"</span> > myid<span class="token comment">#在node02节点</span><span class="token function">echo</span><span class="token string">"2"</span> > myid<span class="token comment">#在node03节点</span><span class="token function">echo</span><span class="token string">"3"</span> > myid</code></pre> <p>创建容器：</p> <pre><code class="prism language-powershell"><span class="token comment">#创建容器</span> docker run<span class="token operator">--</span>network host<span class="token operator">-</span>v<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>docker/zk/<span class="token keyword">data</span>:<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">-</span>v<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>docker/zk/conf:<span class="token operator">/</span>conf<span class="token operator">--</span>name zookeeper-2181<span class="token operator">-</span>d zookeeper:3<span class="token punctuation">.</span>4<span class="token punctuation">.</span>13</code></pre> <p>然后进入容器内部：</p> <pre><code class="prism language-powershell"><span class="token comment">#查看zk容器ID</span> docker<span class="token function">ps</span><span class="token punctuation">|</span>grep zookeeper<span class="token comment"># 进入zk容器内部</span> docker exec<span class="token operator">-</span>it 6d6834a69123<span class="token operator">/</span>bin/bash<span class="token comment"># 查看zk状态</span> zkServer<span class="token punctuation">.</span>sh status<span class="token comment"># 启动zk</span> zkServer<span class="token punctuation">.</span>sh<span class="token function">start</span><span class="token comment"># 启动zk 客户端</span> zkCli<span class="token punctuation">.</span>sh</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/be5fb5e49a3f3864194a8e16b7023ee9.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p>以下简单演示一下zk 客户端的命令使用：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/8bc1237548acaea1a5bc15e674f22241.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p><code>create</code>创建一个节点，<code>get</code> 获得数据，<code>set</code> 设置数据：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/0d25e807518e70a3862536eea32b129e.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p>创建一个临时节点，在客户端断开连接的时候，session会话消失，这个临时节点也会被自动删除。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/14eb30ee7874662157bd2a938c51568e.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/bc5fe1f70206abd0940eb161888ff894.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <h1>二、代码实现</h1> <h2>2.1 项目搭建</h2> <p>创建Maven项目，导入pom依赖：</p> <pre><code class="prism language-xml"><span class="token comment"><!-- zookeeper --></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>version</span><span class="token punctuation">></span></span>3.4.13<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>dependency</span><span class="token punctuation">></span></span><span class="token comment"><!-- lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>dependency</span><span class="token punctuation">></span></span><span class="token comment"><!-- junit --></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>dependency</span><span class="token punctuation">></span></span></code></pre> <h2>2.2 获得zk客户端</h2> <p>创建<code>ZkUtil</code>工具类，获得zk客户端连接：<br /> 注意：new 出的ZooKeeper不能立即返回，还需要等待和zk server端建立连接后才能返回，所以借助了<code>CountDownLatch</code>。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">ZkUtil</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">ZooKeeper</span> zooKeeper<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">String</span> host<span class="token operator">=</span><span class="token string">"192.168.153.128:2181,192.168.153.129:2181,192.168.153.130:2181"</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token keyword">int</span> timeout<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">DefaultWatch</span> defaultWatch<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">DefaultWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**      * 获得zkClient      * 注意：new 出的ZooKeeper不能立即返回，还需要等待和zk server端建立连接后才能返回      * 需要注册一个watch：此处自定义了DefaultWatch      * @return      */</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">ZooKeeper</span><span class="token function">getZkClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             defaultWatch<span class="token punctuation">.</span><span class="token function">setCountDownLatch</span><span class="token punctuation">(</span>countDownLatch<span class="token punctuation">)</span><span class="token punctuation">;</span>             zooKeeper<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> defaultWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>             countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞中，等待DefaultWatch连接成功</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getZkClient error:{}"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> zooKeeper<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 关闭zk客户端连接      */</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">closeZK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>zooKeeper<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>                 zooKeeper<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>创建自定义Watch实现类：</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: LiuShihao  * @Date: 2022/8/15 23:33  * @Desc: 构造默认Watch，在ZkUtil中使用  */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">DefaultWatch</span><span class="token keyword">implements</span><span class="token class-name">Watcher</span><span class="token punctuation">{<!-- --></span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setCountDownLatch</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch<span class="token operator">=</span> countDownLatch<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected</span><span class="token operator">==</span>event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//如果收到了服务端的响应事件,连接成功</span>             countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Zookeeper Connected Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>2.3 实现动态监控节点状态</h2> <p>自定义<code>WatchCallBack</code>类实现<code>Watcher</code>、<code>AsyncCallback.StatCallback</code>、<code>AsyncCallback.DataCallback</code>，重写三个回调方法。</p> <ol> <li>实现<code>Watcher</code>接口，重写回调方法，当节点产生<code>Event</code>事件，就会触发<code>Watch</code>的回调方法。</li> <li>实现<code>StatCallback</code>接口，重写回调方法，当调用<code>zooKeeper.exists()</code>方法判断节点是否存在的时候，就会触发回调方法。</li> <li>实现<code>DataCallback</code>接口，重写回调方法，当调用<code>zooKeeper.getData()</code>方法获取节点数据的时候，就会触发回调方法。</li> </ol> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: LiuShihao  * @Date: 2022/8/15 23:50  * @Desc:  实现三个接口  * Watcher 注册节点监控回调  * StatCallback exists 节点是否存在异步回调  * DataCallback getData 获取数据异步回调  */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">WatchCallBack</span><span class="token keyword">implements</span><span class="token class-name">Watcher</span><span class="token punctuation">,</span><span class="token class-name">AsyncCallback<span class="token punctuation">.</span>StatCallback</span><span class="token punctuation">,</span><span class="token class-name">AsyncCallback<span class="token punctuation">.</span>DataCallback</span><span class="token punctuation">{<!-- --></span><span class="token comment">//注意，getData数据时需要使用zk对象，需要手动set</span><span class="token class-name">ZooKeeper</span> zooKeeper<span class="token punctuation">;</span><span class="token class-name">String</span> path<span class="token punctuation">;</span><span class="token class-name">MyConf</span> myConf<span class="token punctuation">;</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token class-name">WatchCallBack</span><span class="token punctuation">(</span><span class="token class-name">ZooKeeper</span> zooKeeper<span class="token punctuation">,</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>zooKeeper<span class="token operator">=</span> zooKeeper<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token operator">=</span> path<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">aWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//判断节点是否存在，会出发exists异步回调方法（方法2）</span>         zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待MyConf数据取完</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**      * 1 getData 异步回调      */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span><span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">Object</span> ctx<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token class-name">Stat</span> stat<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//如果数据不为空，则设置myConf，countDown -1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getData 回调："</span><span class="token operator">+</span><span class="token keyword">new</span><span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             myConf<span class="token punctuation">.</span><span class="token function">setConf</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token comment">//数据为空，countDown继续阻塞，如果节点有数据写入，发生NodeDataChanged事件，触发watch回调方法（方法3）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getData 回调 :没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**      * 2 exists 判断节点是否存在 异步回调      */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span><span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">Object</span> ctx<span class="token punctuation">,</span><span class="token class-name">Stat</span> stat<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======exists 回调======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>stat<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======"</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">" 节点存在======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发getData的异步回调方法（方法1）</span>             zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====== "</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">" 节点不存在======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**      * 3 watch 观察节点 回调方法      */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//        System.out.println("WatchedEvent 回调："+event.getState());</span><span class="token keyword">switch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">case</span><span class="token class-name">None</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token class-name">NodeCreated</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WatchedEvent 回调：节点被创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点刚被创建出来</span><span class="token comment">//整个流程：首先在TestConfig类中判断节点是否存在，此时节点还未创建，则被阻塞在aWait()方法，等到节点被创建出，发生watch回调，即此处，然后继续获得数据，出发getData回调方法，从而完成aWait方法（）</span>                 zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token class-name">NodeDeleted</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WatchedEvent 回调：节点被删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//容忍性问题</span><span class="token comment">//如果节点被删除，数据要怎么处理？</span><span class="token comment">//清空myConf</span>                 myConf<span class="token punctuation">.</span><span class="token function">setConf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//并且countDownLatch重新赋值</span>                 countDownLatch<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token class-name">NodeDataChanged</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WatchedEvent 回调：节点数据被更改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意：如果数据被变更，则需要重新获取数据</span>                 zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token class-name">NodeChildrenChanged</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>2.4 测试</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/89a34769fa53df50d251116f2b1301dc.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/f45c914b22af4826c6b074cfaf1ceea3.jpg" alt="Zookeeper的Watch机制实现配置中心"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/d09a6416165ac3776af0c7b7f52165e5.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <h1>三、代码分析</h1> <p>流程分析：<br /><em>程序</em>：启动程序，此时节点还未创建出来，程序被阻塞，等待节点创建<br /><em>命令行</em>：使用zk客户端命令行创建节点<br /><em>程序</em>：节点被创建，程序获取数据，打印数据<br /><em>命令行</em>：使用zk客户端命令行修改节点数据<br /><em>程序</em>：节点数据被修改程序获得更新后数据<br /><em>命令行</em>：使用zk客户端命令行删除节点<br /><em>程序</em>：节点被删除，程序阻塞，等待节点创建获取数据</p> <p>利用<code>watch</code>机制，实现<strong>服务上下线</strong>、<strong>配置文件修改通知</strong>，从而实现<strong>配置中心</strong>、<strong>注册中心</strong>的功能，另外利用zookeeper的临时节点在session会话结束后自动删除，还可以实现<strong>分布式锁</strong>的功能。</p> <h1>四、源码</h1> <p>源码已上传Github：https://github.com/Liu-Shihao/zookeeper-api<br /> 了解更多内容，请关注微信公众号：<code>TalkJava</code></p> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1837.htm">【无标题】test setup failed fixture ‘model‘ not found</a></p>
                                                        <p>下一个：<a href="/html/category/article-1839.htm">FreeRTOS进阶之任务通知示例完全解析_操作系统</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6581.htm" title="同城宠物狗免费领养在哪里（有没有同城领养宠物的小程序）">同城宠物狗免费领养在哪里（有没有同城领养宠物的小程序）</a></li>
                        <li class="py-2"><a href="/html/category/article-6116.htm" title="被猫挠出血了过24小时了（被猫挠出血了过24小时了没打针）">被猫挠出血了过24小时了（被猫挠出血了过24小时了没打针）</a></li>
                        <li class="py-2"><a href="/html/category/article-6673.htm" title="怎么样补脾的效果最好(怎么补脾?)">怎么样补脾的效果最好(怎么补脾?)</a></li>
                        <li class="py-2"><a href="/html/category/article-7685.htm" title="开个动物医院需要办理那些证件和手续呢（开动物医院需要什么）">开个动物医院需要办理那些证件和手续呢（开动物医院需要什么）</a></li>
                        <li class="py-2"><a href="/html/category/article-7362.htm" title="新相亲时代 李丹（万万没想到）">新相亲时代 李丹（万万没想到）</a></li>
                        <li class="py-2"><a href="/html/category/article-6029.htm" title="重庆有宠物领养中心吗（重庆有宠物领养中心吗现在）">重庆有宠物领养中心吗（重庆有宠物领养中心吗现在）</a></li>
                        <li class="py-2"><a href="/html/category/article-7087.htm" title="附近免费领养狗挪威犬的地方（哪有领养狗狗的地方）">附近免费领养狗挪威犬的地方（哪有领养狗狗的地方）</a></li>
                        <li class="py-2"><a href="/html/category/article-6011.htm" title="宠物店利润有多大（宠物店利润有多大啊）">宠物店利润有多大（宠物店利润有多大啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-7593.htm" title="做的红烧肉猪皮很硬会不会是老猪肉">做的红烧肉猪皮很硬会不会是老猪肉</a></li>
                        <li class="py-2"><a href="/html/category/article-6626.htm" title="韩式烤肉做法（韩式烤肉做法牛肉腌制窍门）">韩式烤肉做法（韩式烤肉做法牛肉腌制窍门）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>