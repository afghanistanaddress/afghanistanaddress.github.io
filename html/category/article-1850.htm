<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1850.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Python数据分析与展示——Pandas基本操作 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">Python数据分析与展示——Pandas基本操作</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <h1>1.Pandas介绍</h1> <p>Pandas 一个强大的分析结构化数据的工具集，基础是 [Numpy]（提供高性能的矩阵运算）。</p> <p>Pandas 可以从各种文件格式比如 CSV、JSON、SQL、Microsoft Excel 导入数据。</p> <p>Pandas 可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。</p> <p>pandas 的好处：</p> <ul> <li> <p>便捷的数据处理能力</p> </li> <li> <p>读取文件方便</p> </li> <li> <p>封装了 Matplotlib、Numpy 的画图和计算</p> </li> </ul> <h1>2.DataFrame属性和方法</h1> <pre>pandas.DataFrame( data, index, columns, dtype, copy)</pre> <p>参数说明：</p> <ul> <li> <p><strong>data</strong>：一组数据(ndarray、series, map, lists, dict 等类型)。</p> </li> <li> <p><strong>index</strong>：索引值，或者可以称为行标签。</p> </li> <li> <p><strong>columns</strong>：列标签，默认为 RangeIndex (0, 1, 2, …, n) 。</p> </li> <li> <p><strong>dtype</strong>：数据类型。</p> </li> <li> <p><strong>copy</strong>：拷贝数据，默认为 False。</p> </li> </ul> <p>DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。DataFrame 既有行索引也有列索引，可以看成是既有行索引，又有列索引的二维数组。图为没有指定索引则默认行列索引。</p> <p style="text-align:center;"><img fetchpriority="high" decoding="async" alt="" height="537" src="http://img.555519.xyz/uploads/20230113/d7bf317756b41598ea90fd50544f7c43.jpg"></p> <p>&nbsp;</p> <p>若要指定行列索引，需要先添加字符串：</p> <pre>#添加行索引 stock = ["股票{}".format(i) for i in range(10)] pd.DataFrame(sc,index=stock)</pre> <p><img decoding="async" alt="" height="521" src="http://img.555519.xyz/uploads/20230113/bf4d6e7666e11efe9dbbf23ca6b43107.jpg"></p> <p>&nbsp;</p> <pre>#添加列索引 date = pd.date_range(start="20200101",periods=5,freq="B") #pd中生成日期 pd.DataFrame(sc,index=stock,columns=date)</pre> <p><img decoding="async" alt="" height="503" src="http://img.555519.xyz/uploads/20230113/4f0397c045677011a724835afab64220.jpg"></p> <p>&nbsp;</p> <h2>2.1常用属性</h2> <ul> <li> <p>shape</p> </li> <li> <p>index（行索引）</p> </li> <li> <p>columns（列索引）</p> </li> <li> <p>value（直接获取其中 array 的值）</p> </li> <li> <p>T（转置）</p> </li> </ul> <p><img loading="lazy" decoding="async" alt="" height="740" src="http://img.555519.xyz/uploads/20230113/d1995b13b00502cc9be44473802a06e8.jpg"></p> <p>&nbsp;</p> <blockquote> <p>使用 pd.date_ range0: 用于生成一组连续的时间序列</p> <pre>date_range(start=None , end=None, periods=None, freq='B')</pre> <p>start:开始时间</p> <p>end:结束时间</p> <p>perlods:时间天数</p> <p>freq:递进单位，默认1天，'B' 默认略过周末</p> </blockquote> <h2>2.2常用方法</h2> <ul> <li> <p>head() 默认返回前5行，也可以指定行数</p> </li> <li> <p>tail() 默认返回后5行，也可以指定行数</p> </li> <li> <p>info() 返回表格的一些基本信息</p> </li> </ul> <h1>3.DataFrame索引设置</h1> <h2>3.1修改行列索引值</h2> <p>DataFrame不可单独修改索引，只能整体修改。</p> <p>错误修改方式：</p> <ul> <li> <p>data. index[3] = '股票_3'</p> </li> </ul> <p>正确的方式:</p> <ul> <li> <p>stock_ code = ["股票“+ str(1)for 1 inrange(stock change. shape[01)]</p> </li> </ul> <p>必须整体全部修改</p> <ul> <li> <p>data. index = stock_ code</p> </li> </ul> <p>图中可见行索引名已改变。</p> <p><img loading="lazy" decoding="async" alt="" height="324" src="http://img.555519.xyz/uploads/20230113/34785493d47d59ef84937bf4bf09adec.jpg"></p> <p>&nbsp;</p> <h2>3.2重设索引</h2> <ul> <li> <p>reset_ index(drop=False)</p> <ul> <li> <p>设置新的下标索引</p> </li> <li> <p>drop:默认为 False,不删除原来索引（数据多一列），如果为 True,删除原来的索引值</p> </li> </ul> </li> </ul> <h2>3.3设置新索引</h2> <p>用字典创建DataFrame：</p> <p><img loading="lazy" decoding="async" alt="" height="288" src="http://img.555519.xyz/uploads/20230113/2057c577c02cdc817f312cb7b0714b51.jpg"></p> <p>&nbsp;</p> <blockquote> <p>PS：All arrays must be of the same length</p> </blockquote> <p>以某列值设置为新的索引</p> <ul> <li> <p>set index(keys, drop-True)</p> <ul> <li> <p>keys :列索引名成或者列索引名称的列表</p> </li> <li> <p>drop : boolean, default True 当做新的索引，删除原来的列。</p> </li> </ul> </li> </ul> <p style="text-align:center;"><img loading="lazy" decoding="async" alt="" height="226" src="http://img.555519.xyz/uploads/20230113/2138dc4807b94f3761f1653b47179f17.jpg"></p> <p>&nbsp;</p> <h1>4.Series</h1> <p>Series 类似表格中的一个列（column），类似于一维数组，<strong>只有行索引</strong>，可以保存任何数据类型。</p> <p style="text-align:center;"><img loading="lazy" decoding="async" alt="" height="362" src="http://img.555519.xyz/uploads/20230113/3f992d2e7310990e8c33e450ddbbb2be.jpg"></p> <p>&nbsp;</p> <pre>pandas.Series( data, index, dtype, name, copy)</pre> <p>参数说明：</p> <ul> <li> <p><strong>data</strong>：一组数据(ndarray 类型)。</p> </li> <li> <p><strong>index</strong>：数据索引标签，如果不指定，默认从 0 开始。</p> </li> <li> <p><strong>dtype</strong>：数据类型，默认会自己判断。</p> </li> <li> <p><strong>name</strong>：设置名称。</p> </li> <li> <p><strong>copy</strong>：拷贝数据，默认为 False。</p> </li> </ul> <p>创建Series</p> <p><strong>1.通过已有数据创建</strong></p> <ul> <li> <p>指定内容，默认索引</p> <ul> <li> <p>pd.Series(np.arange(10))</p> </li> </ul> </li> <li> <p>指定索引</p> <ul> <li> <p>pd.Series([6.7, 5.6, 3, 10, 2], index=[1, 2, 3, 4, 5])</p> </li> </ul> </li> </ul> <p><strong>2.通过字典数据创建</strong></p> <ul> <li> <p>pd.Series({'red':100, 'blue':200, ‘green': 500, ‘yellow':1000})</p> </li> </ul> <p>Series获取索引和值</p> <ul> <li> <p>index</p> </li> <li> <p>values</p> </li> </ul> <blockquote> <p>可以说DataFrame是Series的容器，Panle是DataFrame的容器。</p> </blockquote> <h1>5.CSV文件得读取和存储</h1> <h2>5.1读取csv——read_csv()</h2> <p>pandas.read_csv(filepath_or_buffer, sep =',', delimiter = None)</p> <ul> <li> <p>filepath_or_buffer:文件路径</p> </li> <li> <p>usecols:<strong>指定读取的列名</strong>，列表形式，usecols有效参数可能是 [0,1,2]或者是 [‘foo’, ‘bar’, ‘baz’]</p> </li> <li> <p>names：若原csv文件只有数据没有字段，names参数则可以添加字段。</p> </li> <li> <p>sep : str, default ‘,’ 指定分隔符。如果不指定参数，则会尝试使用逗号分隔。分隔符长于一个字符并且不是‘\s+’,将使用python的语法分析器。并且忽略数据中的逗号。正则表达式例子：’\r\t’</p> </li> <li> <p>delimiter : str, default None 定界符，备选分隔符（如果指定该参数，则sep参数失效）</p> </li> </ul> <pre>import pandas as pd df = pd.read_csv('test.csv') print(df.to_string())</pre> <p><strong>to_string()</strong> 用于返回 DataFrame 类型的数据，如果不使用该函数，则输出结果为数据的前面 5 行和末尾 5 行，中间部分以 <strong>...</strong> 代替。</p> <h2>5.2输出csv——to_csv()</h2> <p>DataFrame.to_csv (path_or_buf=None, sep=', ', columns=None, header=True, index=True, index_Jabel=None, mode='w', encoding=None)</p> <ul> <li> <p>path_or_buf :string or file handle, default None</p> </li> <li> <p>sep :character, default .</p> </li> <li> <p>columns :sequence, optional</p> </li> <li> <p>mode:'w'：重写，'a'追加</p> </li> <li> <p>index:是否写进行索引</p> </li> <li> <p>header ：boolean or list of string, default True,是否写进列索引值</p> </li> </ul> <h1>6.JSON文件的读取与存储</h1> <h2>6.1读取JSON——read_json()</h2> <p>pd.read_json(path)</p> <p>需要用到的参数：</p> <ul> <li> <p>orient = “records”：告诉 API 以怎样的格式展示读取的 json 文件</p> <ul> <li> <p>'split' : dict like {index -&gt; [index], columns -&gt; [columns], data -&gt; [values])</p> </li> <li> <p>'records' : list like [fcolumn -&gt; value}, ... , {column -&gt; value}]</p> </li> <li> <p>'index' : dict like {index -&gt; {column -&gt; value})</p> </li> <li> <p>'columns' : dict like {column -&gt; {index -&gt; value},默认该格式</p> </li> <li> <p>'values' : just the values array</p> </li> </ul> </li> <li> <p>lines = True/False：</p> </li> </ul> <p>是否按行读取 json 对象</p> <p>实例：</p> <pre>pd.read_hdf ( "test.h5" , key="close" ).head( )  sa = pd.read_json  ( "test.json", orient = "records ", line = True) &nbsp;//以一行作为一个样本</pre> <h2>6.2存储JSON——to_json()</h2> <p>df.to_json(path)</p> <p>需要用到的参数(与读取相同)：</p> <ul> <li> <p>orient = “records”</p> </li> <li> <p>lines = True/False</p> </li> </ul> <p>实例：</p> <pre>In: sa.to_json ( "test-json" , orient="records" ) #未指定 lines 后保存的当前文件夹下的 json 文件未以一行为样本，仅用逗号分隔。  sa.to_json ( "test-json" , orient="records" , lines = True) #此时保存的文件格式就是以一行为样本。</pre> <p><img loading="lazy" decoding="async" alt="" height="1200" src="http://img.555519.xyz/uploads/20230113/8fa8eeeea2607b2ae0f548ece12af6c8.jpg"></p> <p>&nbsp;</p> <h1>7.数据清洗</h1> <h2>7.1缺失值处理</h2> <p><strong>如何处理：</strong></p> <ul> <li> <p>删除含有确实值的样本</p> </li> <li> <p>替换/插补</p> </li> </ul> <p><strong>处理nan：</strong></p> <ul> <li> <p>判断数据中心是否存在nan</p> <ul> <li> <p>pd.isnull(df)</p> </li> <li> <p>pd.notnull(df)</p> </li> </ul> </li> <li> <p>删除含有确实值的样本</p> <ul> <li> <p>df.dropna(inplace=False) #删除含有缺失值的行</p> <p>DataFrame.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)</p> <p><strong>参数说明：</strong></p> <ul> <li> <p>axis：默认为 <strong>0</strong>，表示逢空值剔除整行，如果设置参数 <strong>axis＝1</strong> 表示逢空值去掉整列。</p> </li> <li> <p>how：默认为 <strong>'any'</strong> 如果一行（或一列）里任何一个数据有出现 NA 就去掉整行，如果设置 <strong>how='all'</strong> 一行（或列）都是 NA 才去掉这整行。</p> </li> <li> <p>thresh：设置需要多少非空值的数据才可以保留下来的。</p> </li> <li> <p>subset：设置想要检查的列。如果是多个列，可以使用列名的 list 作为参数。</p> </li> <li> <p>inplace：如果设置 True，将计算得到的值直接覆盖之前的值并返回 None，修改的是源数据</p> </li> </ul> </li> </ul> </li> <li> <p>替换/插入</p> <ul> <li> <p>df.fillna(value,inplace=False)</p> </li> </ul> </li> </ul> <blockquote> <ul> <li> <p>True：会修改原始数据</p> </li> <li> <p>False：不会替换元数据，生成新的对象</p> </li> </ul> </blockquote> <ul> <li> <p>不是缺失值nan，有默认标记</p> </li> </ul> <h2>7.2处理其他标记的缺失值（替换）</h2> <ul> <li> <p>df.replace(to_replace=""?", value=np.nan)</p> <ul> <li> <p>to_replace：替换前的值</p> </li> <li> <p>value：替换后的值</p> </li> </ul> </li> </ul> <p><strong>处理缺失值步骤：</strong></p> <ol> <li> <p>读取数据</p> <ul> <li> <p>data = pd. read_csv (path, names=name)</p> </li> </ul> </li> <li> <p>替换</p> <ul> <li> <p>data_new = data.replace(to_replace=" ? ", value=np.nan) //刚刚“?”的部分已经变成 nan data_new.head()</p> </li> </ul> </li> <li> <p>删除缺失值</p> <ul> <li> <p>data_new.dropna (inplace = True) data_new.isnull().any() //全部返回 False 说明不存在缺失值了</p> </li> </ul> </li> </ol> <h2>7.3数据离散化</h2> <p>数据离散化示例：</p> <p>将性别分为 男 女，将物种分为 猪 狗 老鼠等。</p> <p style="text-align:center;"><img loading="lazy" decoding="async" alt="" height="413" src="http://img.555519.xyz/uploads/20230113/5c018488b6c4aca7ba43da1d23fa41f3.jpg"></p> <p>&nbsp;</p> <p>离散化，把无限空间中有限的个体映射到有限的空间中去，以此提高算法的时空效率，离散化仅适用于只关注元素之间的大小关系而不关注元素本身的值。</p> <p><strong>如何实现数据离散化</strong></p> <ul> <li> <p>分组</p> <ul> <li> <p>自动分组 sr = pd.qcut(data，bins) #bins为组数</p> </li> <li> <p>自定义分组 sr = pd.cut(data,[]) #将定义好的区间以列表的形式传进来</p> </li> </ul> </li> <li> <p>将分组好的结果转换成one-hot编码</p> <ul> <li> <p>pd.get_dummies(sr,prefix<strong>(前缀)</strong>=)</p> </li> </ul> </li> </ul> <h2>7.4pd.concat实现合并</h2> <p><strong>按方向拼接</strong></p> <ul> <li> <p>pd.concat([data1,data2],axis=1)</p> <ul> <li> <p>按照行或列进行合并，axis=0为列索引（竖直拼接），axis=1为行索引（水平拼接），切记方式不要拼接错误</p> </li> </ul> </li> </ul> <h2>7.5pd.merge实现合并</h2> <p><strong>按索引拼接</strong></p> <ul> <li> <p>pd.merge(left,right,how="inner",on=[索引])</p> </li> <li> <p>how参数可取 inner left right outer</p> </li> </ul> <p>给出两个表</p> <p style="text-align:center;"><img loading="lazy" decoding="async" alt="" height="426" src="http://img.555519.xyz/uploads/20230113/1fca135e38f6792aa4b05b860803f2e4.jpg"></p> <p>&nbsp;</p> <ul> <li> <p>内连接</p> <p><img loading="lazy" decoding="async" alt="" height="179" src="http://img.555519.xyz/uploads/20230113/5e88195458c84ceef532d324240072bc.jpg"></p> <p>&nbsp;</p> </li> <li> <p>左连接</p> <p><img loading="lazy" decoding="async" alt="" height="205" src="http://img.555519.xyz/uploads/20230113/ef3d6f05acb6ba73f08fb3d8e2779f49.jpg"></p> <p>&nbsp;</p> </li> <li> <p>右连接</p> <p><img loading="lazy" decoding="async" alt="" height="257" src="http://img.555519.xyz/uploads/20230113/4ac1f54c7f96f76aaee38ffeebd51890.jpg"></p> <p>&nbsp;</p> </li> <li> <p>外连接</p> <p><img loading="lazy" decoding="async" alt="" height="250" src="http://img.555519.xyz/uploads/20230113/015ecaf150b25227c4338a1effecbc48.jpg"></p> <p>&nbsp;</p> </li> </ul> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1849.htm">centos离线安装nginx详细教程</a></p>
                                                        <p>下一个：<a href="/html/category/article-1851.htm">PHP可见性模式</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1908.htm" title="mysql错误解决方案">mysql错误解决方案</a></li>
                        <li class="py-2"><a href="/html/category/article-3741.htm" title="Java中数组的定义与使用(一)">Java中数组的定义与使用(一)</a></li>
                        <li class="py-2"><a href="/html/category/article-1891.htm" title="八大基本数据类型及数据类型之间的转换&#8212;zixiao">八大基本数据类型及数据类型之间的转换&#8212;zixiao</a></li>
                        <li class="py-2"><a href="/html/category/article-2252.htm" title="python向hive插入数据遇到的坑">python向hive插入数据遇到的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-1892.htm" title="如何将CONCAT()函数应用于MySQL表的列？">如何将CONCAT()函数应用于MySQL表的列？</a></li>
                        <li class="py-2"><a href="/html/category/article-1966.htm" title="JavaScript如何将数组与值是数组的对象合并方法详解">JavaScript如何将数组与值是数组的对象合并方法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1924.htm" title="js制作简易秒表效果详细讲解、开始、暂停与结束（定时器制作和时间戳制作）">js制作简易秒表效果详细讲解、开始、暂停与结束（定时器制作和时间戳制作）</a></li>
                        <li class="py-2"><a href="/html/category/article-2542.htm" title="素数最多为n">素数最多为n</a></li>
                        <li class="py-2"><a href="/html/category/article-1878.htm" title="echart整体图形大小调整">echart整体图形大小调整</a></li>
                        <li class="py-2"><a href="/html/category/article-3436.htm" title="记-Windows环境下Prometheus+alertmanager+windows_exporter+mtail监控部署提起网关日志">记-Windows环境下Prometheus+alertmanager+windows_exporter+mtail监控部署提起网关日志</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>