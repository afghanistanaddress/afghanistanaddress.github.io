<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1868.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>spring-kafka @KafkaListener详解与使用 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">spring-kafka @KafkaListener详解与使用</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-dracula"> <p>Kafka高质量专栏请看<a href="szzdzhp.com/kafka" rel="nofollow">石臻臻的杂货铺的Kafka专栏</a></p> <h2><a id="_6" rel="nofollow"></a>说明</h2> <ul> <li> <p>从2.2.4版开始，您可以直接在注释上指定Kafka使用者属性，这些<strong>属性将覆盖在使用者工厂中配置的具有相同名称的所有属性</strong>。您不能通过这种方式指定group.id和client.id属性。他们将被忽略；</p> </li> <li> <p><strong>可以使用#{…}或属性占位符（${…}）在SpEL上配置注释上的大多数属性。</strong><br /> 比如:</p> </li> </ul> <pre><code class="prism language-java"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"consumer-id"</span><span class="token punctuation">,</span>topics<span class="token operator">=</span><span class="token string">"SHI_TOPIC1"</span><span class="token punctuation">,</span>concurrency<span class="token operator">=</span><span class="token string">"${listen.concurrency:3}"</span><span class="token punctuation">,</span>             clientIdPrefix<span class="token operator">=</span><span class="token string">"myClientId"</span><span class="token punctuation">)</span></code></pre> <p>属性<code>concurrency</code>将会从容器中获取<code>listen.concurrency</code>的值,如果不存在就默认用3</p> <hr/> <h2><a id="KafkaListener_20" rel="nofollow"></a>@KafkaListener详解</h2> <h3><a id="id__id_21" rel="nofollow"></a>id 监听器的id</h3> <h4><a id="__22" rel="nofollow"></a>①. 消费者线程命名规则</h4> <p>填写:</p> <blockquote> <p>2020-11-19 14:24:15 c.d.b.k.KafkaListeners 120 [INFO] 线程:Thread[<strong><code>consumer-id5-1-C-1</code></strong>,5,main]-groupId:BASE-DEMO consumer-id5 消费</p> </blockquote> <p>没有填写ID:</p> <blockquote> <p>2020-11-19 10:41:26 c.d.b.k.KafkaListeners 137 [INFO] 线程:Thread[<strong><code>org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1</code></strong>,5,main] consumer-id7</p> </blockquote> <h4><a id="ID_30" rel="nofollow"></a>②.在相同容器中的监听器ID不能重复</h4> <p>否则会报错</p> <pre><code>Caused by: java.lang.IllegalStateException: Another endpoint is already registered with id</code></pre> <h4><a id="GroupId_37" rel="nofollow"></a>③.会覆盖消费者工厂的消费组GroupId</h4> <p>假如配置文件属性配置了消费组<code>kafka.consumer.group-id=BASE-DEMO</code><br /> 正常情况它是该容器中的默认消费组<br /> 但是如果设置了<code>@KafkaListener(id = "consumer-id7", topics = {"SHI_TOPIC3"})</code><br /> 那么当前消费者的消费组就是<code>consumer-id7</code> ;</p> <p><strong>当然如果你不想要他作为groupId的话 可以设置属性<code>idIsGroup = false</code>;那么还是会使用默认的GroupId;</strong></p> <h4><a id="_groupId_45" rel="nofollow"></a>④. 如果配置了属性groupId,则其优先级最高</h4> <pre><code class="prism language-java"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"consumer-id5"</span><span class="token punctuation">,</span>idIsGroup<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>topics<span class="token operator">=</span><span class="token string">"SHI_TOPIC3"</span><span class="token punctuation">,</span>groupId<span class="token operator">=</span><span class="token string">"groupId-test"</span><span class="token punctuation">)</span></code></pre> <p>例如上面代码中最终这个消费者的消费组<code>GroupId</code>是 “groupId-test”</p> <p>该id属性（如果存在）将用作Kafka消费者group.id属性,并覆盖消费者工厂中的已配置属性（如果存在）您还可以groupId显式设置或将其设置idIsGroup为false，以恢复使用使用者工厂的先前行为group.id。</p> <h3><a id="groupId__55" rel="nofollow"></a>groupId 消费组名</h3> <blockquote> <p>指定该消费组的消费组名; 关于消费组名的配置可以看看上面的<strong>id 监听器的id</strong></p> </blockquote> <h4><a id="_groupid_58" rel="nofollow"></a>如何获取消费者 group.id</h4> <p>在监听器中调用<code>KafkaUtils.getConsumerGroupId()</code>可以获得当前的groupId; 可以在日志中打印出来; 可以知道是哪个客户端消费的;</p> <h3><a id="topics_topictopicPatterntopicPartitions__61" rel="nofollow"></a>topics 指定要监听哪些topic(与topicPattern、topicPartitions 三选一)</h3> <p>可以同时监听多个<br /><code>topics = {"SHI_TOPIC3","SHI_TOPIC4"}</code></p> <h3><a id="topicPattern_TopictopicstopicPartitions__65" rel="nofollow"></a>topicPattern 匹配Topic进行监听(与topics、topicPartitions 三选一)</h3> <h3><a id="topicPartitions__67" rel="nofollow"></a>topicPartitions 显式分区分配</h3> <blockquote> <p>可以为监听器配置明确的主题和分区（以及可选的初始偏移量）</p> </blockquote> <pre><code class="prism language-java"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"thing2"</span><span class="token punctuation">,</span> topicPartitions<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic<span class="token operator">=</span><span class="token string">"topic1"</span><span class="token punctuation">,</span> partitions<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic<span class="token operator">=</span><span class="token string">"topic2"</span><span class="token punctuation">,</span> partitions<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span>              partitionOffsets<span class="token operator">=</span><span class="token annotation punctuation">@PartitionOffset</span><span class="token punctuation">(</span>partition<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">,</span> initialOffset<span class="token operator">=</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token keyword">record</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre> <p>上面例子意思是 监听<code>topic1</code>的0,1分区；监听<code>topic2</code>的第0分区,并且第1分区从offset为100的开始消费;</p> <h3><a id="errorHandler__82" rel="nofollow"></a>errorHandler 异常处理</h3> <p>实现<code>KafkaListenerErrorHandler</code>; 然后做一些异常处理;</p> <pre><code>@Component public class KafkaDefaultListenerErrorHandler implements KafkaListenerErrorHandler {     @Override     public Object handleError(Message&lt;?&gt; message, ListenerExecutionFailedException exception) {         return null;     }      @Override     public Object handleError(Message&lt;?&gt; message, ListenerExecutionFailedException exception, Consumer&lt;?, ?&gt; consumer) {     	//do someting         return null;     } }</code></pre> <p>调用的时候 填写beanName;例如<code>errorHandler="kafkaDefaultListenerErrorHandler"</code></p> <h3><a id="containerFactory__101" rel="nofollow"></a>containerFactory 监听器工厂</h3> <blockquote> <p>指定生成监听器的工厂类;</p> </blockquote> <p>例如我写一个 批量消费的工厂类</p> <pre><code class="prism language-java"><span class="token comment">/**      * 监听器工厂 批量消费      * @return      */</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span><span class="token class-name">KafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConcurrentMessageListenerContainer</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token function">batchFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> factory<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span><span class="token function">kafkaConsumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为批量消费，每个批次数量在Kafka配置参数中设置ConsumerConfig.MAX_POLL_RECORDS_CONFIG</span>         factory<span class="token punctuation">.</span><span class="token function">setBatchListener</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> factory<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>使用<code>containerFactory = "batchFactory"</code></p> <h3><a id="clientIdPrefix__122" rel="nofollow"></a>clientIdPrefix 客户端前缀</h3> <blockquote> <p>会覆盖消费者工厂的<code>kafka.consumer.client-id</code>属性; 最为前缀后面接<code>-n</code> n是数字</p> </blockquote> <h3><a id="concurrency_125" rel="nofollow"></a>concurrency并发数</h3> <blockquote> <p>会覆盖消费者工厂中的concurrency ,这里的并发数就是多线程消费; 比如说单机情况下,你设置了3; 相当于就是启动了3个客户端来分配消费分区;分布式情况 总线程数=concurrency*机器数量; 并不是设置越多越好,具体如何设置请看<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://shirenchuang.blog.csdn.net/article/details/109778491"  rel="nofollow">属性concurrency的作用及配置(RoundRobinAssignor 、RangeAssignor)</a></p> </blockquote> <pre><code class="prism language-java"><span class="token comment">/**      * 监听器工厂       * @return      */</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span><span class="token class-name">KafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConcurrentMessageListenerContainer</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token function">concurrencyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> factory<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span><span class="token function">kafkaConsumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         factory<span class="token punctuation">.</span><span class="token function">setConcurrency</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> factory<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"consumer-id5"</span><span class="token punctuation">,</span>idIsGroup<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>topics<span class="token operator">=</span><span class="token string">"SHI_TOPIC3"</span><span class="token punctuation">,</span> containerFactory<span class="token operator">=</span><span class="token string">"concurrencyFactory"</span><span class="token punctuation">,</span>concurrency<span class="token operator">=</span> "<span class="token number">1</span><span class="token punctuation">)</span></code></pre> <p>虽然使用的工厂是<code>concurrencyFactory</code>(concurrency配置了6); 但是他最终生成的监听器数量 是1;</p> <h3><a id="properties__148" rel="nofollow"></a>properties 配置其他属性</h3> <p>kafka中的属性看<code>org.apache.kafka.clients.consumer.ConsumerConfig</code> ;<br /> 同名的都可以修改掉;</p> <p>用法</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"consumer-id5"</span><span class="token punctuation">,</span>idIsGroup<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>topics<span class="token operator">=</span><span class="token string">"SHI_TOPIC3"</span><span class="token punctuation">,</span> containerFactory<span class="token operator">=</span><span class="token string">"concurrencyFactory"</span><span class="token punctuation">,</span>concurrency<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">,</span> clientIdPrefix<span class="token operator">=</span><span class="token string">"myClientId5"</span><span class="token punctuation">,</span>groupId<span class="token operator">=</span><span class="token string">"groupId-test"</span><span class="token punctuation">,</span>             properties<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"enable.auto.commit:false"</span><span class="token punctuation">,</span><span class="token string">"max.poll.interval.ms:6000"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>errorHandler<span class="token operator">=</span><span class="token string">"kafkaDefaultListenerErrorHandler"</span><span class="token punctuation">)</span></code></pre> <h2><a id="KafkaListener_161" rel="nofollow"></a>@KafkaListener使用</h2> <h2><a id="KafkaListenerEndpointRegistry_164" rel="nofollow"></a>KafkaListenerEndpointRegistry</h2> <pre><code class="prism language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span><span class="token class-name">KafkaListenerEndpointRegistry</span> registry<span class="token punctuation">;</span><span class="token comment">//.... 获取所有注册的监听器</span>         registry<span class="token punctuation">.</span><span class="token function">getAllListenerContainers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3><a id="_174" rel="nofollow"></a>设置入参验证器</h3> <p><strong>当您将Spring Boot与验证启动器一起使用时，将LocalValidatorFactoryBean自动配置：如下</strong></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableKafka</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Config</span><span class="token keyword">implements</span><span class="token class-name">KafkaListenerConfigurer</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span><span class="token class-name">LocalValidatorFactoryBean</span> validator<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">configureKafkaListeners</span><span class="token punctuation">(</span><span class="token class-name">KafkaListenerEndpointRegistrar</span> registrar<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>       registrar<span class="token punctuation">.</span><span class="token function">setValidator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>validator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>使用</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"validated"</span><span class="token punctuation">,</span> topics<span class="token operator">=</span><span class="token string">"annotated35"</span><span class="token punctuation">,</span> errorHandler<span class="token operator">=</span><span class="token string">"validationErrorHandler"</span><span class="token punctuation">,</span>       containerFactory<span class="token operator">=</span><span class="token string">"kafkaJsonListenerContainerFactory"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">validatedListener</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span><span class="token annotation punctuation">@Valid</span><span class="token class-name">ValidatedClass</span> val<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span><span class="token class-name">KafkaListenerErrorHandler</span><span class="token function">validationErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>TODO…</p> <p></p> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1867.htm">C ++ STL中的list_remove()和list remove_if()</a></p>
                                                        <p>下一个：<a href="/html/category/article-1869.htm">Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1897.htm" title="MySQL系列复习（9）分组查询（group by、having）">MySQL系列复习（9）分组查询（group by、having）</a></li>
                        <li class="py-2"><a href="/html/category/article-1887.htm" title="Vue.Draggable 文档总结">Vue.Draggable 文档总结</a></li>
                        <li class="py-2"><a href="/html/category/article-1888.htm" title="pandas 分批读取大量数据">pandas 分批读取大量数据</a></li>
                        <li class="py-2"><a href="/html/category/article-1889.htm" title="win11系统照相机亮度怎么调节">win11系统照相机亮度怎么调节</a></li>
                        <li class="py-2"><a href="/html/category/article-1905.htm" title="python中time.strftime不支持中文，报错UnicodeEncodeError: &#8216;locale&#8217; codec can&#8217;t encode character &#8216;\u5e74&#8217; in po&#8230;">python中time.strftime不支持中文，报错UnicodeEncodeError: &#8216;locale&#8217; codec can&#8217;t encode character &#8216;\u5e74&#8217; in po&#8230;</a></li>
                        <li class="py-2"><a href="/html/category/article-1924.htm" title="js制作简易秒表效果详细讲解、开始、暂停与结束（定时器制作和时间戳制作）">js制作简易秒表效果详细讲解、开始、暂停与结束（定时器制作和时间戳制作）</a></li>
                        <li class="py-2"><a href="/html/category/article-3742.htm" title="SpringBoot之HandlerInterceptor拦截器的使用">SpringBoot之HandlerInterceptor拦截器的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1909.htm" title="Redis的高并发是如何支持的">Redis的高并发是如何支持的</a></li>
                        <li class="py-2"><a href="/html/category/article-1879.htm" title="springMVC中的@RequestMapping注解">springMVC中的@RequestMapping注解</a></li>
                        <li class="py-2"><a href="/html/category/article-1890.htm" title="解决Redis并发带来的雪崩，击穿和穿透问题，以及搭建一个Redis伪集群">解决Redis并发带来的雪崩，击穿和穿透问题，以及搭建一个Redis伪集群</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>