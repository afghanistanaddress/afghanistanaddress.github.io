<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1872.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>python数据可视化-matplotlib入门(5)-饼图和堆叠图 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">python数据可视化-matplotlib入门(5)-饼图和堆叠图</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<p>饼图常用于统计学模块，画饼图用到的方法为：pie( )</p> <p>一、pie()函数用来绘制饼图</p> <p>pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=0, radius=1, counterclock=True, wedgeprops=None, textprops=None, center=0, 0, frame=False, rotatelabels=False, *, normalize=None, data=None)</p> <p>pie()函数参数较多，需要我们调整的常见为以下几个<br />x:  每个扇形的占比的序列或数组<br />explode ：如果不是None，则是一个len(x)长度的数组，指定每一块的突出程度；突出显示，设置每一块分割出来的间隙大小<br />labels：为每个扇形提供标签的字符串序列<br />colors：为每个扇形提供颜色的字符串序列<br />autopct ：如果是一个格式字符串，标签将是fmt % pct。如果是一个函数，它将被调用。<br />shadow：阴影<br />startangle：从x轴逆时针旋转,饼的旋转角度<span style="color: rgba(255, 0, 0, 1)">参数用法，可以去官网查询，并自己多去偿试。</span></p> <p>二、一个简单的例子：统计每天休息、工作、娱乐等时间的百分比</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> matplotlib.pyplot as plt  slices</span>= [7,2,9,3,3<span style="color: rgba(0, 0, 0, 1)">] activities</span>= [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">sleeping</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">eating</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">working</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">studing</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">playing</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">] cols</span>= [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">r</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">m</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">y</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">c</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">b</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]  plt.pie(slices,         labels</span>=<span style="color: rgba(0, 0, 0, 1)">activities,         colors</span>=cols,<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">自定义的颜色序列，对比slices，可多可少，少时自动补充，如没有，则默认不同颜色。</span>         startangle=90<span style="color: rgba(0, 0, 0, 1)">,         shadow</span>=<span style="color: rgba(0, 0, 0, 1)"> True,          explode</span>=(0,0.1,0,0,0.2),<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">占比突出程度，</span>         autopct=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%1.1f%%</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">百分比的显示格式</span><span style="color: rgba(0, 0, 0, 1)">        )  plt.title(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Time statistics</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) plt.show()</span></pre> </div> <p>实际运行结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/50325ca494d12e920bc72dd1fcb36b55.jpg" alt="python数据可视化-matplotlib入门(5)-饼图和堆叠图"></p> <p><span style="color: rgba(255, 0, 0, 1)">注意：startangle=90时的开始位置。整个饼图是从0度（圆心向右方向）逆时针分布的。</span></p> <p>那继续用上篇创建的2个色子，来实现一个饼图。</p> <p>思考：上述饼图代码中最能决定饼图形状的参数是slices = [7,2,9,3,3]，在不考虑每个占比名称、美观等的情况下，先确定如何实现slices中的各数值。</p> <p>比如，当投掷2粒色子（一个8个面，一个6个面）时，1000000次时，分别统计出现点1、2、3、4、5……14的总次数，保存到slices中即可。<span style="color: rgba(255, 0, 0, 1)">用数列中的统计方法 list.count()即可。</span></p> <p><span style="color: rgba(255, 0, 0, 1)">主要就是增加两行代码：</span></p> <div class="cnblogs_code"> <pre><span style="color: rgba(255, 0, 0, 1)">new_slices=[] # 新建一个数列</span><span style="color: rgba(0, 0, 255, 1)">while</span> side &lt;=<span style="color: rgba(0, 0, 0, 1)"> max_result:      side</span>+= 1<span style="color: rgba(0, 0, 0, 1)">      new_bins.append(side) #这是之前做柱状图需要用到的<span style="color: rgba(255, 0, 0, 1)"> new_slices.append( results.count(int(side))  )<span style="color: rgba(0, 128, 0, 1)">#将保存两色子之和的数列，直接进行统计,</span></span></span><span style="color: rgba(0, 128, 0, 1)">results.count(int(side))就是在results的数列中统计出现side的次数。</span></pre> </div> <p>运行结果，一样也是显示出点数之和7，8，9的出现的次数最多，然后逐渐减小：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2f3ad5f13482e07f966a060ffb4a5680.jpg" alt="python数据可视化-matplotlib入门(5)-饼图和堆叠图"></p> <p>总之，饼图通过将一个圆按照分类的占比划分成多个区块，整个圆饼代表数据的总量，每个区块表示该分类占总体的比例大小，所有区块的加和等于100%。</p> <p>三、 堆叠图</p> <p>使用matplotlib中的stackplot()函数可以快速绘制堆积图，stackplot()函数的语法格式如下所示<br />stackplot(x, y, labels=(), baseling='zero', data=None, *args, **kwargs)</p> <p>该函数常用参数的含义如下</p> <p>x：表示x轴的数据，可以是一维数组。<br />y：表示y轴的数据，可以是<span style="color: rgba(255, 0, 0, 1)">二维数组或一维数组序列</span>。<br />labels：表示每组折线及填充区域的标签。<br />baseline：表示计算基线的方法，包括'zero'、'sym'、'wiggle'和'weighted_wiggle'。<br />     其中，'zero'表示恒定零基线，即简单的堆积图;<br />&nbsp; 　　 'sym'表示对称于零基线;<br />               　　　'wiggle'表示最小化平方斜率的总和;<br />               　　&nbsp; &nbsp;'weighted_wiggle'表示执行相同的操作，但权重用于说明每层的大小。</p> <p>用同一个例子来看一下堆叠图的效果，代码如下：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> matplotlib.pyplot as plt  days</span>=    [1,2,3,4,5,6,7<span style="color: rgba(0, 0, 0, 1)">]  sleeping</span>=[7,8,6,8,7,8,6<span style="color: rgba(0, 0, 0, 1)">] eating</span>= [2,3,3,3,2,2,2<span style="color: rgba(0, 0, 0, 1)">] working</span>= [7,7,7,8,10,3,4<span style="color: rgba(0, 0, 0, 1)">] studing</span>= [6,4,4,4,3,8,11<span style="color: rgba(0, 0, 0, 1)">] playing</span>= [2,2,4,1,2,3,1<span style="color: rgba(0, 0, 0, 1)">]  labellist</span>= [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">sleeping</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">eating</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">working</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">studing</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">playing</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">] colorlist = ['c','y','b','r','g']</span><span style="color: rgba(0, 0, 0, 1)">  plt.stackplot(days, sleeping,eating,working,studing,playing,labels</span>=labellist,colors=<span style="color: rgba(0, 0, 0, 1)">colorlist) plt.xlabel(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">x</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) plt.ylabel(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">y</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) plt.legend(loc</span>=(0.07, 0.05<span style="color: rgba(0, 0, 0, 1)">)) plt.title(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Stack Plots</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) plt.show()</span></pre> </div> <p>运行结果如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2fb7fa89758794914f9e8df78541f5de.jpg" alt="python数据可视化-matplotlib入门(5)-饼图和堆叠图"></p> <p>plt.legend()是显示左下角的标签。而语句plt.stackplot()函数中的sleeping,eating,working,studing,playing是一维数组序列，即stackplot(x,y……)中的y值，是一系列一维数据。</p> <p>&nbsp;很明显，通过上述饼图与堆叠图的对比，它们的区别：饼图只能展示一段时间里，某个项目所花时间占总时间的比，而堆叠图可以展示这一段时间里，每天各项所花费时间。</p> <p>既然sleeping,eating,working,studing,playing形成的一维数组，感觉参数比较多，那直接形成一个二维数组如何？做如下修改：</p> <div class="cnblogs_code"> <pre>days =    [1,2,3,4,5,6,7<span style="color: rgba(0, 0, 0, 1)">]</span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)"> sleeping =[7,8,6,8,7,8,6] eating  = [2,3,3,3,2,2,2] working = [7,7,7,8,10,3,4] studing = [6,4,4,4,3,8,11] playing = [2,2,4,1,2,3,1]</span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)"> times</span>=<span style="color: rgba(0, 0, 0, 1)">[<span style="color: rgba(0, 128, 0, 1)"># 二维数组，以数列作为元素的数列。</span>         [</span>7,8,6,8,7,8,6<span style="color: rgba(0, 0, 0, 1)">],<span style="color: rgba(0, 128, 0, 1)">#上述sleeping数列</span>         [</span>2,3,3,3,2,2,2<span style="color: rgba(0, 0, 0, 1)">],         [</span>7,7,7,8,10,3,4<span style="color: rgba(0, 0, 0, 1)">],         [</span>6,4,4,4,3,8,11<span style="color: rgba(0, 0, 0, 1)">],         [</span>2,2,4,1,2,3,1<span style="color: rgba(0, 0, 0, 1)">]         ]<br/>plt.stackplot(days, times,labels=labellist,colors=colorlist)<br/></span></pre> </div> <p>运行结果如图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/bbec206cf95676895813f7b27aada801.jpg" alt="python数据可视化-matplotlib入门(5)-饼图和堆叠图"></p> <p>效果与原来的一维数组一样。</p> <p>但手工这样编程的时候录入数据太过麻烦，下篇介绍直接读取文件数据并进行处理。</p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1871.htm">Git基础Git创建本地版本库详解</a></p>
                                                        <p>下一个：<a href="/html/category/article-1873.htm">mysql用哪种时间_mysql存储日期使用什么类型</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1885.htm" title="Java中的base64编码器_java_">Java中的base64编码器_java_</a></li>
                        <li class="py-2"><a href="/html/category/article-1902.htm" title="树的同构（java实现）">树的同构（java实现）</a></li>
                        <li class="py-2"><a href="/html/category/article-1897.htm" title="MySQL系列复习（9）分组查询（group by、having）">MySQL系列复习（9）分组查询（group by、having）</a></li>
                        <li class="py-2"><a href="/html/category/article-1865.htm" title="java数据类型（8个基本数据类型+3个引用数据类型）与数据类型转换知识点">java数据类型（8个基本数据类型+3个引用数据类型）与数据类型转换知识点</a></li>
                        <li class="py-2"><a href="/html/category/article-1863.htm" title="为vscode开发一款svn右键菜单扩展">为vscode开发一款svn右键菜单扩展</a></li>
                        <li class="py-2"><a href="/html/category/article-1884.htm" title="Springboot：拦截器和过滤器">Springboot：拦截器和过滤器</a></li>
                        <li class="py-2"><a href="/html/category/article-1880.htm" title="React&#8217;s mouseEvent doesn&#8217;t have offsetX/offsetY">React&#8217;s mouseEvent doesn&#8217;t have offsetX/offsetY</a></li>
                        <li class="py-2"><a href="/html/category/article-1904.htm" title="在Python中使用ibis,impyla,pyhive,pyspark连接Kerberos安全认证的Hive、Impala">在Python中使用ibis,impyla,pyhive,pyspark连接Kerberos安全认证的Hive、Impala</a></li>
                        <li class="py-2"><a href="/html/category/article-1899.htm" title="Azure DevOps通过SSH部署上传到服务器的应用">Azure DevOps通过SSH部署上传到服务器的应用</a></li>
                        <li class="py-2"><a href="/html/category/article-1883.htm" title="C#实现文件Move和Copy操作_C#教程_">C#实现文件Move和Copy操作_C#教程_</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>