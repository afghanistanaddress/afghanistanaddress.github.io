<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1876.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>python入门基础字典及相关操作详解 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">python入门基础字典及相关操作详解</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<p>一、什么是字典</p> <p>字典是Python中最强大的数据类型之一，也是Python语言中唯一的映射类型。映射类型对象里哈希值(键,key)和指向的对象(值,value)是一对多的的关系,通常被认为是可变的哈希表,字典对象是可变的,它是一个容器类型,能存储任意个数的Python对象,其中也可包括其他容器类型。</p> <p>字典类型与序列类型的区别：<br />1.存取和访问数据的方式不同。<br />2.序列类型只用数字类型的键(从序列的开始按数值顺序索引)；<br />3.映射类型可以用其他对象类型作键(如：数字、字符串、元组,一般用字符串作键),和序列类型的键不同,映射类型的键直<br />4.接或间接地和存储数据值相关联。<br />5.映射类型中的数据是无序排列的,这和序列类型是不一样的,序列类型是以数值序排列的。<br />6.映射类型用键直接“映射”到值。</p> <p>总之,Python中<span style="color: rgba(255, 0, 0, 1)">字典是一系列"键-值"对</span>,<span style="color: rgba(255, 0, 0, 1)">每个键都与一个值关联</span>,可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上,可将任何Python对象用作字典中的值。</p> <p>一个简单字典的示例：</p> <div class="cnblogs_code"> <pre>student_A ={<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Allen</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">age</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">14</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">grade</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">8</span><span style="color: rgba(128, 0, 0, 1)">'</span>}<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 定义一个字典</span><span style="color: rgba(0, 0, 255, 1)">print</span>(student_A[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">])</span><span style="color: rgba(0, 0, 255, 1)">print</span>(student_A[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">age</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">])</span><span style="color: rgba(0, 0, 255, 1)">print</span>(student_A[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">grade</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">])  new_names</span>= student_A[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">] new_ages</span>= student_A [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">age</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">] new_grades</span>= student_A [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">grade</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">The student_A's name is</span><span style="color: rgba(128, 0, 0, 1)">"</span> + new_names.title()+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,and she is</span><span style="color: rgba(128, 0, 0, 1)">"</span>+str(new_ages) +<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> years old,and Grade</span><span style="color: rgba(128, 0, 0, 1)">"</span>+str(new_grades))</pre> </div> <pre>其中，student_A={'name':'Allen','age':'14','grade':'8'}  定义了一个名为student_A的字典，该字典中有三个关键字'name','age'和'grade',对应的值分别为'Allen','14'和'8'</pre> <pre>student_A['name'] 表示引用的是student_A['name']的值，即Allen，也就是语句：new_names = student_A['name'] 和new_names='Allen'是一样的。<br/><br/>一、创建一个字典<br/>1）如上述代码，直接定义一个字典，student_A ={'name':'Allen','age':'14','grade':'8'}，列出各关键字和对应的值；<br/>2）先使用一对花括号定义一个字典，再分行添加各个分键值对:</pre> <div class="cnblogs_code"> <pre>student_B=<span style="color: rgba(0, 0, 0, 1)">{} student_B[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(128, 0, 0, 1)">'</span>]=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Jack</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> student_B[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">age</span><span style="color: rgba(128, 0, 0, 1)">'</span>]=13<span style="color: rgba(0, 0, 0, 1)"> student_B[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">grade</span><span style="color: rgba(128, 0, 0, 1)">'</span>]=7</pre> </div> <p>二、在原有字典上添加“键-值”对：由于字典是可变的，能存储任意个数对象，因此可随意添加</p> <div class="cnblogs_code"> <pre>student_A[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">address</span><span style="color: rgba(128, 0, 0, 1)">'</span>] =<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Hubei</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">增加了一个地址健值对，由原来的3个变成4个</span> student_A[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">PhoneNumber</span><span style="color: rgba(128, 0, 0, 1)">'</span>] =<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">18012345678</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">增加了一个电话健值对，字典student_A里由4个变成5个</span><span style="color: rgba(0, 0, 255, 1)">print</span>(student_A)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">键 — 值对的排列顺序与添加顺序不同。Python不关心键-值对的添加顺序，而只关心键和值之间的关联关系</span></pre> </div> <p>即在student_A字典原有3个关键字的基础上，增加了两个关键字address和PhoneNumber。</p> <p>上述代码运行结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4f8c1b0f2bda62d191e2ed858acb3c3c.jpg" alt="python入门基础字典及相关操作详解"></p> <p>三、修改字典中的值：要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。</p> <div class="cnblogs_code"> <pre>student_B[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">age</span><span style="color: rgba(128, 0, 0, 1)">'</span>]=14<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">修改student_B的age值为14</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(student_B)</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre> </div> <p>四、删除键-值对：对于字典中不再需要的信息，可使用 del 语句将相应的键-值对彻底删除。使用 del 语句时，必须指定字典名和要删除的键。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">del</span> student_A[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">address</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]</span><span style="color: rgba(0, 0, 255, 1)">print</span>(student_A)</pre> </div> <p>五、由类似对象组成的字典：字典存储的是一个对象（学生A或B）的多种信息，但也可以使用字典来存储众多对象的同一种信息</p> <div class="cnblogs_code"> <pre>favor_languages = {<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">jack</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">python</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">sarah</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">c</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">lucy</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ruby</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">phil</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">python</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 0, 255, 1)">print</span>(favor_languages[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">lucy</span><span style="color: rgba(128, 0, 0, 1)">'</span>])</pre> </div> <p>六、遍历字典<br />一个Python字典可能只包含几个键-值对，也可能包含数百万个键-值对。鉴于字典可能包含大量的数据，Python支持对字典遍历。字典可用于以各种方式存储信息，因此有多种遍历字典的方式：可遍历字典的所有键-值对、键或值。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">for</span> key,value<span style="color: rgba(0, 0, 255, 1)">in</span> student_A.items():<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 注意，student_A后增加了.items() 用于读取字典中的每一项</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\nKey:</span><span style="color: rgba(128, 0, 0, 1)">"</span> + key)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">打印出关键字</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Value:</span><span style="color: rgba(128, 0, 0, 1)">"</span> + value)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">打印出关键字的值</span><span style="color: rgba(0, 0, 255, 1)">for</span> name, language<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> favor_languages.items():<span style="color: rgba(0, 128, 0, 1)">#遍历所有的键值对：用于遍历字典的for循环，可声明两个变量，用于存储键-值对中的键和值</span></span><span style="color: rgba(0, 0, 255, 1)">print</span>(name.title() +<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">'s favorite language is</span><span style="color: rgba(128, 0, 0, 1)">"</span> +language.title() +<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">.</span><span style="color: rgba(128, 0, 0, 1)">"</span>)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">遍历字典中的每个键-值对，并将键存储在变量name中，而将值存储在变</span><span style="color: rgba(0, 128, 0, 1)">量language 中</span><br/><span style="color: rgba(0, 0, 255, 1)">for</span> name<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> favor_languages.keys():<span style="color: rgba(0, 128, 0, 1)">#遍历字典中的所有键，在不需要使用字典中的值时，方法 keys() ，注意后面增加的keys()</span></span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(name.title())</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)  my_friends</span>= [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">jack</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">sarah</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]</span><span style="color: rgba(0, 0, 255, 1)">for</span> name<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> favor_languages.keys():</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(name.title())</span><span style="color: rgba(0, 0, 255, 1)">if</span> name<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> my_friends:</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> Hi</span><span style="color: rgba(128, 0, 0, 1)">"</span> + name.title() +<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">, I see your favorite language is</span><span style="color: rgba(128, 0, 0, 1)">"</span> +favor_languages[name].title() +<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">!</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre> </div> <p>具体运行结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/43ca59ac06db54fd4ab7fc2b2698a520.jpg" alt="python入门基础字典及相关操作详解"></p> <p>&nbsp;按顺序遍历字典中的所有键:<span style="color: rgba(255, 0, 0, 1)">字典记录键和值之间的关联关系，但获取字典的元素的顺序是不可预测的，要以特定的顺序返回元素，可对返回的键进行排序可使用函数 sorted() 来进行排序。</span></p> <div class="cnblogs_code"> <pre>favor_languages= {<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">jack</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">python</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">polo</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">java</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">lucy</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ruby</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Albet</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">java</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">使用函数 sorted() 来获得按特定顺序排列的键列表</span><span style="color: rgba(0, 0, 255, 1)">for</span> name<span style="color: rgba(0, 0, 255, 1)">in</span> sorted(favor_languages.keys()):<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">对关键字进行排序</span><span style="color: rgba(0, 0, 255, 1)">print</span>(name.title() +<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">, thank you !</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">遍历字典中的所有值:如果主要获取的是字典包含的值，可使用方法 values()</span><span style="color: rgba(0, 0, 255, 1)">for</span> language<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> favor_languages.values():</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(language.title())</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">使用集合（set）消除重复项</span><span style="color: rgba(0, 0, 255, 1)">for</span> language<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> set(favor_languages.values()):</span><span style="color: rgba(0, 0, 255, 1)">print</span>(language.title())</pre> </div> <p>运行结果如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8669590aeea6226c4702901b2e71bb4c.jpg" alt="python入门基础字典及相关操作详解"></p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1875.htm">No version of NDK matched the requested version 21.1.6113669. Versions available locally: 23.1.77796</a></p>
                                                        <p>下一个：<a href="/html/category/article-1877.htm">Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1877.htm" title="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树">Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树</a></li>
                        <li class="py-2"><a href="/html/category/article-1886.htm" title="TensorFlow运行出错：UnicodeEncodeError: &#8216;utf-8&#8217; codec can&#8217;t encode character &#8216;\udcce&#8217; in position 2559: s">TensorFlow运行出错：UnicodeEncodeError: &#8216;utf-8&#8217; codec can&#8217;t encode character &#8216;\udcce&#8217; in position 2559: s</a></li>
                        <li class="py-2"><a href="/html/category/article-1869.htm" title="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始">Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始</a></li>
                        <li class="py-2"><a href="/html/category/article-1898.htm" title="Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]">Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]</a></li>
                        <li class="py-2"><a href="/html/category/article-1890.htm" title="解决Redis并发带来的雪崩，击穿和穿透问题，以及搭建一个Redis伪集群">解决Redis并发带来的雪崩，击穿和穿透问题，以及搭建一个Redis伪集群</a></li>
                        <li class="py-2"><a href="/html/category/article-1906.htm" title="Java Random随机数">Java Random随机数</a></li>
                        <li class="py-2"><a href="/html/category/article-1867.htm" title="C ++ STL中的list_remove()和list remove_if()">C ++ STL中的list_remove()和list remove_if()</a></li>
                        <li class="py-2"><a href="/html/category/article-1903.htm" title="基于JDK的动态代理原理分析">基于JDK的动态代理原理分析</a></li>
                        <li class="py-2"><a href="/html/category/article-1884.htm" title="Springboot：拦截器和过滤器">Springboot：拦截器和过滤器</a></li>
                        <li class="py-2"><a href="/html/category/article-1865.htm" title="java数据类型（8个基本数据类型+3个引用数据类型）与数据类型转换知识点">java数据类型（8个基本数据类型+3个引用数据类型）与数据类型转换知识点</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>