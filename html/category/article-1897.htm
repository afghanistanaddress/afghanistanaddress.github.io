<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1897.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>MySQL系列复习（9）分组查询（group by、having） - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">MySQL系列复习（9）分组查询（group by、having）</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <p>环境：mysql5.7.30，cmd命令中进⾏演⽰。</p> <p id="main-toc"><strong>目录</strong></p> <p id="1%E3%80%81%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95-toc" style="margin-left:40px;">1、分组查询语法</p> <p id="2%E3%80%81%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0-toc" style="margin-left:40px;">2、聚合函数</p> <p id="3%E3%80%81%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE-toc" style="margin-left:40px;">3、准备数据</p> <p id="4%E3%80%81%E5%8D%95%E5%AD%97%E6%AE%B5%E5%88%86%E7%BB%84-toc" style="margin-left:40px;">4、单字段分组</p> <p id="5%E3%80%81%E5%A4%9A%E5%AD%97%E6%AE%B5%E5%88%86%E7%BB%84-toc" style="margin-left:40px;">5、多字段分组</p> <p id="6%E3%80%81%E5%88%86%E7%BB%84%E5%89%8D%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE-toc" style="margin-left:40px;">6、分组前筛选数据</p> <p id="7%E3%80%81%E5%88%86%E7%BB%84%E5%90%8E%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE-toc" style="margin-left:40px;">7、分组后筛选数据</p> <p id="8%E3%80%81%20where%E5%92%8Chaving%E7%9A%84%E5%8C%BA%E5%88%AB-toc" style="margin-left:40px;">8、 where和having的区别</p> <p id="9%E3%80%81%E5%88%86%E7%BB%84%E5%90%8E%E6%8E%92%E5%BA%8F-toc" style="margin-left:40px;">9、分组后排序</p> <p id="10%E3%80%81where%20%26%20group%20by%20%26%20having%20%26%20order%20by%20%26%20limit%20%E4%B8%80%E8%B5%B7%E5%8D%8F%E4%BD%9C-toc" style="margin-left:40px;">10、where & group by & having & order by & limit 一起协作</p> <p id="11%E3%80%81mysql%E5%88%86%E7%BB%84%E4%B8%AD%E7%9A%84%E5%9D%91-toc" style="margin-left:40px;">11、mysql分组中的坑</p> <p id="12%E3%80%81%E6%80%BB%E7%BB%93-toc" style="margin-left:40px;">12、总结</p> <hr id="hr-toc"/> <h2 id="1%E3%80%81%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95">1、分组查询语法</h2> <p>语法：</p> <p><span style="color:#f33b45;">SELECT </span><span style="color:#86ca5e;">column,group_function,.....</span><span style="color:#f33b45;"> FROM </span><span style="color:#86ca5e;">table</span></p> <p><span style="color:#f33b45;">[WHERE </span><span style="color:#86ca5e;">condition</span><span style="color:#f33b45;">] </span></p> <p><span style="color:#f33b45;">GROUP BY </span><span style="color:#86ca5e;">group_by_expression</span></p> <p><span style="color:#f33b45;">[HAVING </span><span style="color:#86ca5e;">group_condition</span><span style="color:#f33b45;">];</span></p> <p>说明：</p> <ul> <li>graph_function：聚合函数；</li> <li>group_by_expression：分组表达式，多个之间用逗号隔开；</li> <li>group_condition：分支之后对数据进行过滤；</li> <li>分组之后，select后面只能有两种类型的列：1）出现在group&nbsp; by后的列；2）或者使用聚合函数的列。</li> </ul> <h2 id="2%E3%80%81%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0"> <br /> 2、聚合函数</h2> <table align="left" border="1" cellpadding="1" cellspacing="1" style="width:500px;"> <tbody> <tr> <td><strong>函数名称</strong></td> <td><strong>作用</strong></td> </tr> <tr> <td>max</td> <td>查询指定列的最大值</td> </tr> <tr> <td>min</td> <td>查询指定列的最小值</td> </tr> <tr> <td>count</td> <td>统计查询结果的行数</td> </tr> <tr> <td>sum</td> <td>求和，返回指定列的总和</td> </tr> <tr> <td>·avg</td> <td>求平均值，返回指定列数据的平均值</td> </tr> </tbody> </table> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>分组时，可以使用上面的聚合函数。</p> <h2 id="3%E3%80%81%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE">3、准备数据</h2> <pre><code class="language-sql">drop table if exists t_order; -- 创建订单表 create table t_order( id int not null AUTO_INCREMENT COMMENT '订单id', user_id bigint not null comment '下单⼈id', user_name varchar(16) not null default '' comment '⽤户名', price decimal(10,2) not null default 0 comment '订单⾦额', the_year SMALLINT not null comment '订单创建年份', PRIMARY KEY (id) ) comment '订单表';  -- 插⼊数据 insert into t_order(user_id,user_name,price,the_year) values (1001,'myron Java',11.11,'2017'), (1001,'myron Java',22.22,'2018'), (1001,'myron Java',88.88,'2018'), (1002,'刘德华',33.33,'2018'), (1002,'刘德华',12.22,'2018'), (1002,'刘德华',16.66,'2018'), (1002,'刘德华',44.44,'2019'), (1003,'张学友',55.55,'2018'), (1003,'张学友',66.66,'2019');   mysql> select * from t_order; +----+---------+------------+-------+----------+ | id | user_id | user_name  | price | the_year | +----+---------+------------+-------+----------+ |  1 |    1001 | myron Java | 11.11 |     2017 | |  2 |    1001 | myron Java | 22.22 |     2018 | |  3 |    1001 | myron Java | 88.88 |     2018 | |  4 |    1002 | 刘德华     | 33.33 |     2018 | |  5 |    1002 | 刘德华     | 12.22 |     2018 | |  6 |    1002 | 刘德华     | 16.66 |     2018 | |  7 |    1002 | 刘德华     | 44.44 |     2019 | |  8 |    1003 | 张学友     | 55.55 |     2018 | |  9 |    1003 | 张学友     | 66.66 |     2019 | +----+---------+------------+-------+----------+ 9 rows in set (0.00 sec)  mysql></code></pre> <h2 id="4%E3%80%81%E5%8D%95%E5%AD%97%E6%AE%B5%E5%88%86%E7%BB%84">4、单字段分组</h2> <p>需求：查询每个用户下单数量，输出：用户id、下单数量，如下：</p> <pre><code class="language-sql">mysql>  SELECT             user_id 用户id, COUNT(id) 下单数量          FROM              t_order         GROUP BY user_id; +----------+--------------+ | 用户id   | 下单数量     | +----------+--------------+ |     1001 |            3 | |     1002 |            4 | |     1003 |            2 | +----------+--------------+ 3 rows in set (0.04 sec)  mysql></code></pre> <h2 id="5%E3%80%81%E5%A4%9A%E5%AD%97%E6%AE%B5%E5%88%86%E7%BB%84">5、多字段分组</h2> <p>需求：查询每个用户每年下单数量，输出字段：用户id，年份，下单数量，如下：</p> <pre><code class="language-sql">mysql> SELECT &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_id 用户id, the_year 年份, COUNT(id) 下单数量 &nbsp;&nbsp;&nbsp;&nbsp;FROM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t_order &nbsp;&nbsp;&nbsp;&nbsp;GROUP BY user_id , the_year; +----------+--------+--------------+ | 用户id   | 年份   | 下单数量     | +----------+--------+--------------+ |     1001 |   2017 |            1 | |     1001 |   2018 |            2 | |     1002 |   2018 |            3 | |     1002 |   2019 |            1 | |     1003 |   2018 |            1 | |     1003 |   2019 |            1 | +----------+--------+--------------+ 6 rows in set (0.00 sec)  mysql></code></pre> <h2 id="6%E3%80%81%E5%88%86%E7%BB%84%E5%89%8D%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE">6、分组前筛选数据</h2> <p>分组前对数据进行筛选，使用where关键字。</p> <p>需求：需要查询2018年每个用户下单数量，输出：用户id，下单数量，如下：</p> <pre><code class="language-sql">mysql> SELECT         user_id 用户id, COUNT(id) 下单数量       FROM           t_order t       WHERE          t.the_year=2018       GROUP BY user_id; +----------+--------------+ | 用户id   | 下单数量     | +----------+--------------+ |     1001 |            2 | |     1002 |            3 | |     1003 |            1 | +----------+--------------+ 3 rows in set (0.00 sec)  mysql></code></pre> <h2 id="7%E3%80%81%E5%88%86%E7%BB%84%E5%90%8E%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE">7、分组后筛选数据</h2> <p>分组后对数据筛选，使用having关键字。</p> <p>需求：查询2018年订单数量大于1的用户，输出：用户id，下单数量，如下：</p> <p><strong>方式1：</strong></p> <pre><code class="language-sql">mysql> SELECT          user_id 用户id, COUNT(id) 下单数量       FROM          t_order t       WHERE          t.the_year=2018       GROUP BY user_id       HAVING count(id)>=2; +----------+--------------+ | 用户id   | 下单数量     | +----------+--------------+ |     1001 |            2 | |     1002 |            3 | +----------+--------------+ 2 rows in set (0.00 sec)</code></pre> <p><strong>方式2：</strong></p> <pre><code class="language-sql">mysql> SELECT          user_id 用户id, count(id) 下单数量       FROM          t_order t       WHERE          t.the_year=2018       GROUP BY user_id       HAVING 下单数量>=2; +----------+--------------+ | 用户id   | 下单数量     | +----------+--------------+ |     1001 |            2 | |     1002 |            3 | +----------+--------------+ 2 rows in set (0.00 sec)  mysql></code></pre> <h2 id="8%E3%80%81%20where%E5%92%8Chaving%E7%9A%84%E5%8C%BA%E5%88%AB">8、 where和having的区别</h2> <p><span style="color:#f33b45;">where是在分组（聚合）前对记录进行筛选， 而having是在分组结束后的结果里筛选，最后返回整个sql的查询结果。</span></p> <p>可以把having理解为两级查询，即含having的查询操作先获得不含having子句时的sql查询结果表，然后在这个结果表上使用having条件筛选出符合的记录，最后返回这些记录，因此，having后是可以跟聚合函数的，并且这个聚合函数不必与select后面的聚集函数相同。</p> <h2 id="9%E3%80%81%E5%88%86%E7%BB%84%E5%90%8E%E6%8E%92%E5%BA%8F">9、分组后排序</h2> <p>需求：获取每个用户最大金额，然后按照最大金额倒序，输出：用户id，最大金额，如下：</p> <pre><code class="language-sql">mysql> SELECT          user_id 用户id, max(price) 最大金额        FROM          t_order t        GROUP BY  user_id        ORDER BY 最大金额 desc; +----------+--------------+ | 用户id   | 最大金额     | +----------+--------------+ |     1001 |        88.88 | |     1003 |        66.66 | |     1002 |        44.44 | +----------+--------------+ 3 rows in set (0.00 sec)  mysql></code></pre> <h2 id="10%E3%80%81where%20%26%20group%20by%20%26%20having%20%26%20order%20by%20%26%20limit%20%E4%B8%80%E8%B5%B7%E5%8D%8F%E4%BD%9C">10、where & group by & having & order by & limit 一起协作</h2> <p>where、group by、having、order by 、limit这些关键字一起使用时，先后顺序有明确的限制，语法如下：<br /><strong><span style="color:#f33b45;">select</span> 列<span style="color:#f33b45;"> from</span><br /> 表名<br /><span style="color:#f33b45;">where</span> [查询条件]<br /><span style="color:#f33b45;">group by</span> [分组表达式]<br /><span style="color:#f33b45;">having</span> [分组过滤条件]<br /><span style="color:#f33b45;">order by </span>[排序条件]<br /><span style="color:#f33b45;">limit </span>[offset,] count;</strong></p> <p>注意：写法上面必须按照上面的顺序来写。</p> <p>示例：</p> <p>需求：查询出2018年，下单数量大于等于2的，按照下单数量降序排序，最后只输出第1条记录，显示：用户id，下单数量，如下：</p> <pre><code class="language-sql">mysql> select * from t_order; +----+---------+------------+-------+----------+ | id | user_id | user_name  | price | the_year | +----+---------+------------+-------+----------+ |  1 |    1001 | myron Java | 11.11 |     2017 | |  2 |    1001 | myron Java | 22.22 |     2018 | |  3 |    1001 | myron Java | 88.88 |     2018 | |  4 |    1002 | 刘德华     | 33.33 |     2018 | |  5 |    1002 | 刘德华     | 12.22 |     2018 | |  6 |    1002 | 刘德华     | 16.66 |     2018 | |  7 |    1002 | 刘德华     | 44.44 |     2019 | |  8 |    1003 | 张学友     | 55.55 |     2018 | |  9 |    1003 | 张学友     | 66.66 |     2019 | +----+---------+------------+-------+----------+ 9 rows in set (0.00 sec)  mysql> SELECT          user_id 用户id, COUNT(id) 下单数量      FROM          t_order t      WHERE          t.the_year=2018      GROUP BY user_id      HAVING count(id)>=2      ORDER BY 下单数量 DESC      LIMIT 1; +----------+--------------+ | 用户id   | 下单数量     | +----------+--------------+ |     1002 |            3 | +----------+--------------+ 1 row in set (0.00 sec)  mysql></code></pre> <h2 id="11%E3%80%81mysql%E5%88%86%E7%BB%84%E4%B8%AD%E7%9A%84%E5%9D%91">11、mysql分组中的坑</h2> <p>本文开头有介绍，分组中select后面的列只能是2种：</p> <ul> <li>1）出现在group by后面的列；</li> <li>2）使用聚合函数的列。</li> </ul> <p>Oracle、SqlServer、db2中也是按照这种规范来的。</p> <p>文中使用的是5.7版本，默认是按照这种规范来的。</p> <p>mysql早期的一些版本，没有上面这些要求，select后面可以跟任何合法的列。</p> <p><span style="color:#f33b45;">建议：在写分组查询的时候，最好按照标准的规范来写，select后面出现的列必须在group by中或者必须使用聚合函数</span></p> <h2 id="12%E3%80%81%E6%80%BB%E7%BB%93">12、总结</h2> <p>1）在写分组查询的时候，，最好按照标准的规范来写，select后出现的列必须在group by中或者必须使用聚合函数。</p> <p>2）select语法顺序：select、from、where、group by、having、order by、limit，顺序不能搞错了，否则报错。</p> <p></p> </p></div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1896.htm">一、重写了equals为什么还要重写hashcode</a></p>
                                                        <p>下一个：<a href="/html/category/article-1898.htm">Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2541.htm" title="Spring Cloud Feign 分析之FeignClient注解实现版本兼容">Spring Cloud Feign 分析之FeignClient注解实现版本兼容</a></li>
                        <li class="py-2"><a href="/html/category/article-4135.htm" title="tensorflow求导和梯度计算">tensorflow求导和梯度计算</a></li>
                        <li class="py-2"><a href="/html/category/article-3768.htm" title="Springboot过滤器和拦截器的区别">Springboot过滤器和拦截器的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-3741.htm" title="Java中数组的定义与使用(一)">Java中数组的定义与使用(一)</a></li>
                        <li class="py-2"><a href="/html/category/article-2836.htm" title="C语言中常用的字符数组函数">C语言中常用的字符数组函数</a></li>
                        <li class="py-2"><a href="/html/category/article-4562.htm" title="电锯人电次和谁做了（桃花劫剧情介绍）硬核推荐，">电锯人电次和谁做了（桃花劫剧情介绍）硬核推荐，</a></li>
                        <li class="py-2"><a href="/html/category/article-6072.htm" title="紫菜饭团的做法（紫菜饭团的做法和配料）">紫菜饭团的做法（紫菜饭团的做法和配料）</a></li>
                        <li class="py-2"><a href="/html/category/article-1965.htm" title="设置网页脚本动态顺序加载">设置网页脚本动态顺序加载</a></li>
                        <li class="py-2"><a href="/html/category/article-4079.htm" title="vue使用canvas绘制圆环_vue.js_">vue使用canvas绘制圆环_vue.js_</a></li>
                        <li class="py-2"><a href="/html/category/article-6011.htm" title="宠物店利润有多大（宠物店利润有多大啊）">宠物店利润有多大（宠物店利润有多大啊）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>