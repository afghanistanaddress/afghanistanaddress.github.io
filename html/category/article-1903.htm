<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1903.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>基于JDK的动态代理原理分析 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">基于JDK的动态代理原理分析</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h2 class="md-end-block md-heading"><span class="md-plain md-expand">基于JDK的动态代理原理分析</span></h2> <p class="md-end-block md-p"><span class="md-plain">这篇文章解决三个问题：</span></p> <ol class="ol-list" start=""> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-pair-s"><strong>What</strong><span class="md-plain"> 动态代理是什么</span></span></p> </li> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-pair-s"><strong>How</strong><span class="md-plain"> 动态代理怎么用</span></span></p> </li> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-pair-s"><strong>Why</strong><span class="md-plain"> 动态代理的原理</span></span></p> </li> </ol> <p class="md-end-block md-p md-focus"><span class="md-pair-s md-expand"><strong>动态代理是什么？</strong></span></p> <p class="md-end-block md-p"><span class="md-plain">动态代理是代理模式的一种具体实现，是指在程序运行期间，动态的生成目标对象的代理类（直接加载在内存中的字节码文件），实现对目标对象所有方法的增强。通过这种方式，我们可以在不改变（或无法改变）目标对象源码的情况下，对目标对象的方法执行前后进行干预。</span></p> <p class="md-end-block md-p"><span class="md-pair-s"><strong>动态代理怎么用？</strong></span></p> <p class="md-end-block md-p"><span class="md-plain">首先，准备好我们需要代理的类和接口，<span class="md-pair-s"><strong>因为JDK的动态代理是基于接口实现的，所以被代理的对象必须要有接口</strong><span class="md-plain">。</span></span></span></p> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br/><span><span class="cm-comment">* SaySomething接口<br/><span><span class="cm-comment">*/<br/><span><span class="cm-keyword">public<span class="cm-keyword">interface<span class="cm-def">SaySomething {<br/><span><span><br/><span><span class="cm-keyword">public<span class="cm-variable-3">void<span class="cm-variable">sayHello();<br/><span><span><br/><span><span class="cm-keyword">public<span class="cm-variable-3">void<span class="cm-variable">sayBye();<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br/><span><span class="cm-comment">* SaySomething的实现类<br/><span><span class="cm-comment">*/<br/><span><span class="cm-keyword">public<span class="cm-keyword">class<span class="cm-def">SaySomethingImpl<span class="cm-keyword">implements<span class="cm-variable">SaySomething {<br/><span><span class="cm-meta">@Override<br/><span><span class="cm-keyword">public<span class="cm-variable-3">void<span class="cm-variable">sayHello() {<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"Hello World");<br/><span> &nbsp;  }<br/><span><span><br/><span><span class="cm-meta">@Override<br/><span><span class="cm-keyword">public<span class="cm-variable-3">void<span class="cm-variable">sayBye() {<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"Bye Bye");<br/><span> &nbsp;  }<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <p class="md-end-block md-p"><span class="md-plain">按照动态代理的用法，需要自定义一个处理器，用来编写自定义逻辑，实现对被代理对象的增强。</span></p> <p class="md-end-block md-p"><span class="md-plain">自定义的处理器需要满足以下要求：</span></p> <ul class="ul-list" data-mark="+"> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-plain">需要实现InvocationHandler，重写invoke方法，在invoke方法中通过加入自定义逻辑，实现对目标对象的增强。</span></p> </li> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-plain">需要持有一个成员变量，成员变量的是被代理对象的实例，通过构造参数传入。（用来支持反射调用被代理对象的方法）</span></p> </li> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-plain">需要提供一个参数为被代理对象接口类的有参构造。（用来支持反射调用被代理对象的方法）</span></p> </li> </ul> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br/><span><span class="cm-comment">* 自定义的处理器，用来编写自定义逻辑，实现对被代理对象的增强<br/><span><span class="cm-comment">*/<br/><span><span class="cm-keyword">public<span class="cm-keyword">class<span class="cm-def">CustomHandler<span class="cm-keyword">implements<span class="cm-variable">InvocationHandler {<br/><span><span><br/><span><span class="cm-comment">//需要有一个成员变量，成员变量为被代理对象，通过构造参数传入，用来支持方法的反射调用。<br/><span><span class="cm-keyword">private<span class="cm-variable">SaySomething<span class="cm-variable">obj;<br/><span><br/><span><span class="cm-comment">//需要有一个有参构造，通过构造函数将被代理对象的实例传入，用来支持方法的反射调用<br/><span><span class="cm-keyword">public<span class="cm-variable">CustomHandler(<span class="cm-variable">SaySomething<span class="cm-variable">obj) {<br/><span><span class="cm-keyword">this.<span class="cm-variable">obj<span class="cm-operator">=<span class="cm-variable">obj;<br/><span> &nbsp;  }<br/><span><span><br/><span><span class="cm-comment">/**<br/><span><span class="cm-comment">* proxy:动态生成的代理类对象com.sun.proxy.$Proxy0<br/><span><span class="cm-comment">* method:被代理对象的真实的方法的Method对象<br/><span><span class="cm-comment">* args:调用方法时的入参<br/><span><span class="cm-comment">*/<br/><span><span class="cm-meta">@Override<br/><span><span class="cm-keyword">public<span class="cm-variable-3">Object<span class="cm-variable">invoke(<span class="cm-variable-3">Object<span class="cm-variable">proxy,<span class="cm-variable">Method<span class="cm-variable">method,<span class="cm-variable-3">Object[]<span class="cm-variable">args)<span class="cm-keyword">throws<span class="cm-variable">Throwable {<br/><span><span class="cm-comment">//目标方法执行前的自定义逻辑处理<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"-----before------");<br/><span><span><br/><span><span class="cm-comment">//执行目标对象的方法，使用反射来执行方法，反射需要传入目标对象，此时用到了成员变量obj。<br/><span><span class="cm-variable-3">Object<span class="cm-variable">result<span class="cm-operator">=<span class="cm-variable">method.<span class="cm-variable">invoke(<span class="cm-variable">obj,<span class="cm-variable">args);<br/><span><span><br/><span><span class="cm-comment">//目标方法执行后的自定义逻辑处理<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"-----after------");<br/><span><span class="cm-keyword">return<span class="cm-variable">result;<br/><span> &nbsp;  }<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <p class="md-end-block md-p"><span class="md-plain">这样我们就完成了自定义处理器的编写，同时在invoke方法中实现对了代理对象方法的增强，被代理类的所有方法的执行都会执行我们自定义的逻辑。</span></p> <p class="md-end-block md-p"><span class="md-plain">接下来，需要通过Proxy,newProxyInstance()方法来生成代理对象的实例，并进行方法调用测试。</span></p> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">public<span class="cm-keyword">class<span class="cm-def">JdkProxyTest {<br/><span><span class="cm-keyword">public<span class="cm-keyword">static<span class="cm-variable-3">void<span class="cm-variable">main(<span class="cm-variable-3">String[]<span class="cm-variable">args) {<br/><span><span class="cm-comment">//将生成的代理对象的字节码文件 保存到硬盘<br/><span><span class="cm-variable">System.<span class="cm-variable">getProperties().<span class="cm-variable">setProperty(<span class="cm-string">"sun.misc.ProxyGenerator.saveGeneratedFiles",<span class="cm-string">"true");<br/><span><span><br/><span><span class="cm-comment">//被代理对象的实例<br/><span><span class="cm-variable">SaySomething<span class="cm-variable">obj<span class="cm-operator">=<span class="cm-keyword">new<span class="cm-variable">SaySomethingImpl();<br/><span><span class="cm-comment">//通过构造函数,传入被代理对象的实例，生成处理器的实例<br/><span><span class="cm-variable">InvocationHandler<span class="cm-variable">handler<span class="cm-operator">=<span class="cm-keyword">new<span class="cm-variable">CustomHandler(<span class="cm-variable">obj);<br/><span><span class="cm-comment">//通过Proxy.newProxyInstance方法，传入被代理对象Class对象、处理器实例，生成代理对象实例<br/><span><span class="cm-variable">SaySomething<span class="cm-variable">proxyInstance<span class="cm-operator">= (<span class="cm-variable">SaySomething)<span class="cm-variable">Proxy.<span class="cm-variable">newProxyInstance(<span class="cm-variable">obj.<span class="cm-variable">getClass().<span class="cm-variable">getClassLoader(),<br/><span><span class="cm-keyword">new<span class="cm-variable">Class[]{<span class="cm-variable">SaySomething.<span class="cm-keyword">class},<span class="cm-variable">handler);<br/><span><span class="cm-comment">//调用生成的代理对象的sayHello方法<br/><span><span class="cm-variable">proxyInstance.<span class="cm-variable">sayHello();<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"===================分割线==================");<br/><span><span class="cm-comment">//调用生成的代理对象的sayBye方法<br/><span><span class="cm-variable">proxyInstance.<span class="cm-variable">sayBye();<br/><span> &nbsp;  }<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <p class="md-end-block md-p"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0fb0628d25073bc101dd21a1f30836be.jpg" alt="基于JDK的动态代理原理分析"></p> <p><span class="md-plain">运行main方法，查看控制台，大功告成。至此，我们已经完整的完成了一次动态代理的使用。</span></p> <p class="md-end-block md-p"> <p class="md-end-block md-p"><span class="md-pair-s"><strong>动态代理的原理</strong></span></p> <p class="md-end-block md-p"><span class="md-plain">生成的proxyInstance对象到底是什么，为什么调用它的sayHello方法会执行CustomerHandler的invoke方法呢？</span></p> <p class="md-end-block md-p"><span class="md-plain">直接贴上proxyInstance的字节码文件，我们就会恍然大悟了...</span></p> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">//$Proxy0是SaySomething的实现类，重写了sayHello和sayBye方法<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-keyword">class<span class="cm-def">$Proxy0<span class="cm-keyword">extends<span class="cm-variable">Proxy<span class="cm-keyword">implements<span class="cm-variable">SaySomething {<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m1;<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m3;<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m2;<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m4;<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m0;<br/><span><span><br/><span><span class="cm-keyword">public<span class="cm-variable">$Proxy0(<span class="cm-variable">InvocationHandler<span class="cm-variable">var1)<span class="cm-keyword">throws  {<br/><span><span class="cm-keyword">super(<span class="cm-variable">var1);<br/><span> &nbsp;  }<br/><span><span><br/><span><span class="cm-keyword">static {<br/><span><span class="cm-keyword">try {<br/><span><span class="cm-variable">m1<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"java.lang.Object").<span class="cm-variable">getMethod(<span class="cm-string">"equals",<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"java.lang.Object"));<br/><span><span class="cm-variable">m3<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"com.example.demo.hanmc.proxy.jdk.SaySomething").<span class="cm-variable">getMethod(<span class="cm-string">"sayHello");<br/><span><span class="cm-variable">m2<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"java.lang.Object").<span class="cm-variable">getMethod(<span class="cm-string">"toString");<br/><span><span class="cm-variable">m4<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"com.example.demo.hanmc.proxy.jdk.SaySomething").<span class="cm-variable">getMethod(<span class="cm-string">"sayBye");<br/><span><span class="cm-variable">m0<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"java.lang.Object").<span class="cm-variable">getMethod(<span class="cm-string">"hashCode");<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">NoSuchMethodException<span class="cm-variable">var2) {<br/><span><span class="cm-keyword">throw<span class="cm-keyword">new<span class="cm-variable">NoSuchMethodError(<span class="cm-variable">var2.<span class="cm-variable">getMessage());<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">ClassNotFoundException<span class="cm-variable">var3) {<br/><span><span class="cm-keyword">throw<span class="cm-keyword">new<span class="cm-variable">NoClassDefFoundError(<span class="cm-variable">var3.<span class="cm-variable">getMessage());<br/><span> &nbsp; &nbsp; &nbsp;  }<br/><span> &nbsp;  }<br/><span><br/><span><span class="cm-comment">//实现了接口的sayHello方法，在方法内部调用了CustomerHandler的invoke方法，同时传入了Method对象，<br/><span><span class="cm-comment">//所以在CustomerHandler对象中可以通过mathod.invovke方法调用SyaSomthing的sayHello方法<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">void<span class="cm-variable">sayHello()<span class="cm-keyword">throws  {<br/><span><span class="cm-keyword">try {<br/><span><span class="cm-comment">//h是父类Proxy中的InvocationHandler对象，其实就是我们自定义的CustomHandler对象<br/><span><span class="cm-keyword">super.<span class="cm-variable">h.<span class="cm-variable">invoke(<span class="cm-keyword">this,<span class="cm-variable">m3, (<span class="cm-variable-3">Object[])<span class="cm-atom">null);<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">RuntimeException<span class="cm-operator">|<span class="cm-variable">Error<span class="cm-variable">var2) {<br/><span><span class="cm-keyword">throw<span class="cm-variable">var2;<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">Throwable<span class="cm-variable">var3) {<br/><span><span class="cm-keyword">throw<span class="cm-keyword">new<span class="cm-variable">UndeclaredThrowableException(<span class="cm-variable">var3);<br/><span> &nbsp; &nbsp; &nbsp;  }<br/><span> &nbsp;  }<br/><span><span><br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">void<span class="cm-variable">sayBye()<span class="cm-keyword">throws  {<br/><span><span class="cm-keyword">try {<br/><span><span class="cm-keyword">super.<span class="cm-variable">h.<span class="cm-variable">invoke(<span class="cm-keyword">this,<span class="cm-variable">m4, (<span class="cm-variable-3">Object[])<span class="cm-atom">null);<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">RuntimeException<span class="cm-operator">|<span class="cm-variable">Error<span class="cm-variable">var2) {<br/><span><span class="cm-keyword">throw<span class="cm-variable">var2;<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">Throwable<span class="cm-variable">var3) {<br/><span><span class="cm-keyword">throw<span class="cm-keyword">new<span class="cm-variable">UndeclaredThrowableException(<span class="cm-variable">var3);<br/><span> &nbsp; &nbsp; &nbsp;  }<br/><span> &nbsp;  }<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">int<span class="cm-variable">hashCode()<span class="cm-keyword">throws  {<br/><span><span class="cm-comment">//忽略内容<br/><span> &nbsp;  }<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">boolean<span class="cm-variable">equals(<span class="cm-variable-3">Object<span class="cm-variable">var1)<span class="cm-keyword">throws  {<br/><span><span class="cm-comment">//忽略内容<br/><span> &nbsp;  }<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">String<span class="cm-variable">toString()<span class="cm-keyword">throws  {<br/><span><span class="cm-comment">//忽略内容<br/><span> &nbsp;  }<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <p class="md-end-block md-p"><span class="md-plain">看到了生成的代理对象的字节码文件，是不是一切都明白你了，原理竟然如此简单^_^</span></p> <p class="md-end-block md-p"> <p class="md-end-block md-p"><span class="md-pair-s md-expand"><em>本文为个人学习整理，如有描述错误或者对相关内容感兴趣，欢迎评论或私信交流，一起讨论、共同进步。</em></span></p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1902.htm">树的同构（java实现）</a></p>
                                                        <p>下一个：<a href="/html/category/article-1904.htm">在Python中使用ibis,impyla,pyhive,pyspark连接Kerberos安全认证的Hive、Impala</a></p>
                                                    </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1862.htm" title="将无效字符串作为参数传递给STR_TO_DATE()函数时，MySQL将返回什么？">将无效字符串作为参数传递给STR_TO_DATE()函数时，MySQL将返回什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-1895.htm" title="Vue 学习  之 封装模块方法">Vue 学习  之 封装模块方法</a></li>
                        <li class="py-2"><a href="/html/category/article-1883.htm" title="C#实现文件Move和Copy操作_C#教程_">C#实现文件Move和Copy操作_C#教程_</a></li>
                        <li class="py-2"><a href="/html/category/article-1901.htm" title="如何在MySQL中将算术运算符（+，-，*，/）与INTERVAL关键字的单位值一起使用？">如何在MySQL中将算术运算符（+，-，*，/）与INTERVAL关键字的单位值一起使用？</a></li>
                        <li class="py-2"><a href="/html/category/article-1872.htm" title="python数据可视化-matplotlib入门(5)-饼图和堆叠图">python数据可视化-matplotlib入门(5)-饼图和堆叠图</a></li>
                        <li class="py-2"><a href="/html/category/article-1924.htm" title="js制作简易秒表效果详细讲解、开始、暂停与结束（定时器制作和时间戳制作）">js制作简易秒表效果详细讲解、开始、暂停与结束（定时器制作和时间戳制作）</a></li>
                        <li class="py-2"><a href="/html/category/article-1857.htm" title="Feign 传输 MultipartFile 的一些问题">Feign 传输 MultipartFile 的一些问题</a></li>
                        <li class="py-2"><a href="/html/category/article-1890.htm" title="解决Redis并发带来的雪崩，击穿和穿透问题，以及搭建一个Redis伪集群">解决Redis并发带来的雪崩，击穿和穿透问题，以及搭建一个Redis伪集群</a></li>
                        <li class="py-2"><a href="/html/category/article-1887.htm" title="Vue.Draggable 文档总结">Vue.Draggable 文档总结</a></li>
                        <li class="py-2"><a href="/html/category/article-1882.htm" title="yum安装nginx后报错nginx: [error] open() “/run/nginx.pid“ failed">yum安装nginx后报错nginx: [error] open() “/run/nginx.pid“ failed</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>