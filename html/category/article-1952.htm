<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-1952.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>深入理解Spring的@Order注解和Ordered接口 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">深入理解Spring的@Order注解和Ordered接口</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h2>前言</h2> <p>  Spring的@Order注解或者Ordered接口大家都知道是控制顺序的，那么它们到底是控制什么顺序的？是控制Bean的注入顺序，还是Bean的实例化顺序，还是Bean的执行顺序呢？那么我们先直接给出结论再来验证结论。<br /><strong>结论：Spring的@Order注解或者Ordered接口，不决定Bean的加载顺序和实例化顺序，只决定Bean的执行顺序。</strong></p> <h2>实例论证：@Order不决定Bean的加载和实例化顺序</h2> <p>步骤一：创建DemoService接口和三个实现类，分别打上注解@Order(0)-DemoServiceImpl01、@Order(1)-DemoServiceImpl02、@Order(2)-DemoServiceImpl03，观察实例化顺序。</p> <pre><code>@Service @Order(0) public class DemoServiceImpl01 implements DemoService {      public DemoServiceImpl01() {         System.out.println("DemoServiceImpl01被实例化了");     } }  @Service @Order(1) public class DemoServiceImpl02 implements DemoService {      public DemoServiceImpl02() {         System.out.println("DemoServiceImpl02被实例化了");     }  }  @Service @Order(2) public class DemoServiceImpl03 implements DemoService {      public DemoServiceImpl03() {         System.out.println("DemoServiceImpl03被实例化了");     }  }  // 运行结果如下 DemoServiceImpl01被实例化了 DemoServiceImpl02被实例化了 DemoServiceImpl03被实例化了</code></pre> <p>步骤二：改变DemoService接口三个实现类的注解序值，@Order(2)-DemoServiceImpl01、@Order(1)-DemoServiceImpl02、@Order(0)-DemoServiceImpl03，观察实例化顺序</p> <pre><code>@Service @Order(2) public class DemoServiceImpl01 implements DemoService {      public DemoServiceImpl01() {         System.out.println("DemoServiceImpl01被实例化了");     } }  @Service @Order(1) public class DemoServiceImpl02 implements DemoService {      public DemoServiceImpl02() {         System.out.println("DemoServiceImpl02被实例化了");     }  }  @Service @Order(0) public class DemoServiceImpl03 implements DemoService {      public DemoServiceImpl03() {         System.out.println("DemoServiceImpl03被实例化了");     }  }  // 运行结果如下 DemoServiceImpl01被实例化了 DemoServiceImpl02被实例化了 DemoServiceImpl03被实例化了</code></pre> <p>结果：当改变DemoService接口的三个实现类注解序值时，类的加载和实例化顺序根本没有变化，即@Order注解不决定Bean的加载和实例化顺序。</p> <h2>实例论证：@Order决定Bean的执行顺序</h2> <p>步骤一：创建RunServiceImpl类，并通过构造函数依赖注入DemoService的三个实现类，且循序依次执行三个实现类方法，观察Bean的执行顺序。</p> <pre><code>@Service public class RunServiceImpl implements RunService {      public RunServiceImpl(List<DemoService> demoServices) {         demoServices.forEach(demoService -> demoService.say());     }  }  @Service @Order(0) public class DemoServiceImpl01 implements DemoService {      public DemoServiceImpl01() {         System.out.println("DemoServiceImpl01被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl01被执行了");     } }  @Service @Order(1) public class DemoServiceImpl02 implements DemoService {      public DemoServiceImpl02() {         System.out.println("DemoServiceImpl02被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl02被执行了");     }  }  @Service @Order(2) public class DemoServiceImpl03 implements DemoService {      public DemoServiceImpl03() {         System.out.println("DemoServiceImpl03被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl03被执行了");     }  }  // 运行结果如下 DemoServiceImpl01被执行了 DemoServiceImpl02被执行了 DemoServiceImpl03被执行了</code></pre> <p>步骤二：改变DemoService接口三个实现类的注解序值，@Order(2)-DemoServiceImpl01、@Order(1)-DemoServiceImpl02、@Order(0)-DemoServiceImpl03，观察Bean的执行顺序。</p> <pre><code>@Service public class RunServiceImpl implements RunService {      public RunServiceImpl(List<DemoService> demoServices) {         demoServices.forEach(demoService -> demoService.say());     }  }  @Service @Order(2) public class DemoServiceImpl01 implements DemoService {      public DemoServiceImpl01() {         System.out.println("DemoServiceImpl01被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl01被执行了");     } }  @Service @Order(1) public class DemoServiceImpl02 implements DemoService {      public DemoServiceImpl02() {         System.out.println("DemoServiceImpl02被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl02被执行了");     }  }  @Service @Order(0) public class DemoServiceImpl03 implements DemoService {      public DemoServiceImpl03() {         System.out.println("DemoServiceImpl03被实例化了");     }      @Override     public void say() {         System.out.println("DemoServiceImpl03被执行了");     }  }  // 运行结果如下 DemoServiceImpl03被执行了 DemoServiceImpl02被执行了 DemoServiceImpl01被执行了</code></pre> <p>结果：当改变DemoService接口的三个实现类注解序值时，类的执行顺序也随之发生变化，即@Order决定Bean的执行顺序。</p> <h2>@Order注解或Ordered接口决定Bean的执行顺序原理分析</h2> <p>通过上面实例论证，大家应该清楚@Order注解或Ordered接口只是决定了Bean的执行顺序，那么Spring是如何在依赖注入时完成根据@Order注解或Ordered接口控制Bean执行顺序？<br /><strong>原理分析：<br /> 当通过构造函数或者方法参数注入进某个List<组件实现类>时，Spring的DefaultListableBeanFactory类会在注入时调用AnnotationAwareOrderComparator.sort(listA)帮我们去完成根据@Order或者Ordered接口序值排序。</strong><br /> 备注：<br /> AnnotationAwareOrderComparator是OrderComparator的子类，而OrderComparator实现比较器Comparator接口，AnnotationAwareOrderComparator.sort(listA)会调用父类sort方法，会根据@Order或者Ordered接口设置的int序值重写sort方法进行排序，值越小优先级越高。</p> <h2></h2> <ol></ol> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1951.htm">设计模式学习笔记（十三）组合模式及其在树形结构中的应用</a></p>
                                                        <p>下一个：<a href="/html/category/article-1965.htm">设置网页脚本动态顺序加载</a></p>
                                                    </div>
                                                <div class="panel panel-default mt-5">
                            <div class="panel-heading">
                                <h3 class="m-0">推荐文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0">
                                                                        <li class="py-2"><a href="/html/category/article-1864.htm">springboot基础(6):整合ActiveMQ</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1851.htm">PHP可见性模式</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1842.htm">Springboot过滤器和拦截器实现</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1838.htm">Zookeeper的Watch机制实现配置中心</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1818.htm">MySQL Router重装后重新连接集群进行引导出现的——此主机中之前已配置过的问题</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1783.htm">多语言文本到音素转换工具phonemizer实践</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1782.htm">前端之vue3生命周期、hook封装组合式api</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1760.htm">Vue3知识点整理 常用Composition API（3）- 生命周期、自定义hook、toRef</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1649.htm">一段解决kafka消息处理异常的经典对话</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1644.htm">教你在 Java 中实现 Dijkstra 最短路算法的方法_java</a></li>
                                                                    </ul>
                            </div>
                        </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7317.htm" title="宠物领养网页设计图片素材（宠物领养网站源码）">宠物领养网页设计图片素材（宠物领养网站源码）</a></li>
                        <li class="py-2"><a href="/html/category/article-6994.htm" title="厦门宠物店寄养宠物多少钱一天（厦门 宠物店）">厦门宠物店寄养宠物多少钱一天（厦门 宠物店）</a></li>
                        <li class="py-2"><a href="/html/category/article-7178.htm" title="大型饲料颗粒机（大型饲料颗粒机多少钱一台价格）">大型饲料颗粒机（大型饲料颗粒机多少钱一台价格）</a></li>
                        <li class="py-2"><a href="/html/category/article-6995.htm" title="宠物粮食生产配方表最新（宠物粮的配方）">宠物粮食生产配方表最新（宠物粮的配方）</a></li>
                        <li class="py-2"><a href="/html/category/article-7270.htm" title="国内十大兽药厂排名（全国排名前十的兽药厂）">国内十大兽药厂排名（全国排名前十的兽药厂）</a></li>
                        <li class="py-2"><a href="/html/category/article-7592.htm" title="动物疫苗监管部门电话号码的简单介绍">动物疫苗监管部门电话号码的简单介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-6949.htm" title="北京宠物鸟医院（北京哪家宠物医院能看鸟）">北京宠物鸟医院（北京哪家宠物医院能看鸟）</a></li>
                        <li class="py-2"><a href="/html/category/article-6948.htm" title="关于动物疫苗接种途径有哪些类型的接种方法的信息">关于动物疫苗接种途径有哪些类型的接种方法的信息</a></li>
                        <li class="py-2"><a href="/html/category/article-7133.htm" title="猫咪疫苗可以自己打吗怎么可以自己（猫咪疫苗自己能打吗）">猫咪疫苗可以自己打吗怎么可以自己（猫咪疫苗自己能打吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6856.htm" title="扬州宠物店在什么地方（扬州宠物店在什么地方开）">扬州宠物店在什么地方（扬州宠物店在什么地方开）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>