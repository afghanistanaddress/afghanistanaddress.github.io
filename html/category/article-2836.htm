<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://afghanistanaddress.github.io/html/category/article-2836.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>C语言中常用的字符数组函数 - Afghanistan Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/afghanistanaddress/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/animate/animate.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/maicons.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/afghanistanaddress/theme.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?07d6804a416dbd216ab0e3d3e283ddad";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light navbar-float">
            <div class="container">
                                <a href="/" class="navbar-brand">Afghanistan Address</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-lg-4 pt-3 pt-lg-0">
                                                <li class="nav-item">
                            <a href="/" class="nav-link">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a href="/html/category/" class="nav-link">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a href="#" class="nav-link">关于</a>
                        </li>
                        <li class="nav-item">
                            <a href="#" class="nav-link">联系</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="container mt-5">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-10">
                        <h1 class="text-center">C语言中常用的字符数组函数</h1>
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/html/category/">文章分类</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="page-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <blockquote> <blockquote> <p>所有的字符数组处理函数都包括在 <string.h>这个头文件中</p> </blockquote> </blockquote> <h2>一、strlen 函数</h2> <p>原型：<code>size_t strlen(char const* string);</code></p> <p>在C语言中如何计算一个数组或者一个字符数组的长度？<code>在C语言中没有字符串类型，字符串是存放在字符型数组中</code>，所以一般形式的字符串就是数组。<br /> 一般来说，大家都是使用<code>sizeof</code>来计算数组长度的：</p> <pre><code class="prism language-c"><span class="token comment">// 整型数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> length<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><code>sizeof</code>是一个操作符，返回的是一个对象或类型所占的字节大小。<br /> 但是在字符数组中<code>sizeof</code>返回的往往不是我们需要的。<br /> 因为字符数组的往往需要比其他数组多占一个空间长度。比如一个有效字符串的长度为9，那么实际长度则为10，而第10个字符是<code>'\0'</code>。表示字符串结束。</p> <p>使用<code>strlen</code>函数则会返回有效长度。</p> <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><stdio.h></span></span><span class="token keyword">int</span><span class="token function">myLen</span><span class="token punctuation">(</span><span class="token keyword">const</span><span class="token keyword">char</span><span class="token operator">*</span>line<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> strlen<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>strlen<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     strlen<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> strlen<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token keyword">const</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">char</span> line<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SIZEOF的长度= %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"strlen的长度= %d"</span><span class="token punctuation">,</span><span class="token function">myLen</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span><span class="token keyword">return</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h2>二、strcmp</h2> <p>原型：<code>int strcmp(char const *s1, char const *s2, size_t len);</code>;</p> <p>功能：比较两个字符串。如果s1小于s2，strcmp函数返回一个小于零的值。如果s1大于s2，函数返回一个大于零的值。如果两个字符串相等，函数就返回零。</p> <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><string.h></span></span><span class="token keyword">int</span><span class="token function">mycmp</span><span class="token punctuation">(</span><span class="token keyword">const</span><span class="token keyword">char</span><span class="token operator">*</span>c1<span class="token punctuation">,</span><span class="token keyword">const</span><span class="token keyword">char</span><span class="token operator">*</span>c2<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>c1<span class="token operator">==</span><span class="token operator">*</span>c2<span class="token operator">&&</span><span class="token operator">*</span>c1<span class="token operator">==</span><span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token comment">// 通过指针的自增来比较，同时判断是否有到了结束位置</span><span class="token punctuation">{<!-- --></span>     c1<span class="token operator">++</span><span class="token punctuation">;</span>     c2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> result<span class="token operator">=</span><span class="token operator">*</span>c1<span class="token operator">-</span><span class="token operator">*</span>c2<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">(</span>result<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token keyword">const</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">char</span> char1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"bb"</span><span class="token punctuation">;</span><span class="token keyword">char</span> char2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">strcmp</span><span class="token punctuation">(</span>char1<span class="token punctuation">,</span> char2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">mycmp</span><span class="token punctuation">(</span>char1<span class="token punctuation">,</span> char2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">return</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h2>三、strcat函数</h2> <p>原型：<code>char *strcat(char *dst, char const *src);</code></p> <p>功能：将一个字符串添加(连接)到另一个字符串的后面。</p> <p>注意：src和dst的所指的内存区域不能重叠，如果发生重叠，其结果是未定义的。</p> <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><string.h></span></span><span class="token keyword">char</span><span class="token operator">*</span><span class="token function">mycat</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>des<span class="token punctuation">,</span><span class="token keyword">const</span><span class="token keyword">char</span><span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">char</span><span class="token operator">*</span>temp<span class="token operator">=</span> des<span class="token punctuation">;</span><span class="token comment">//定义临时指针指向目标字符数组</span>   temp<span class="token operator">=</span> des<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将目标字符串移入到结尾</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>temp<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>src<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//通过指针自增实现赋值</span><span class="token operator">*</span>temp<span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token comment">//将目标字符串的结尾</span><span class="token keyword">return</span> des<span class="token punctuation">;</span><span class="token comment">// char *temp = des;</span><span class="token comment">// while (*temp != '\0')</span><span class="token comment">// {<!-- --></span><span class="token comment">//   temp++;</span><span class="token comment">// }</span><span class="token comment">// while ((*temp++ = *src++))</span><span class="token comment">//   *temp = '\0';</span><span class="token comment">// return des;</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token keyword">const</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">/* code */</span><span class="token keyword">char</span> c1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"world"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">mycat</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//helloworld</span><span class="token keyword">return</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre> <h2>四、strcpy</h2> <p>原型：<code>char *strcpy(char *dst, char const *src);</code></p> <p><strong>功能</strong>：将参数src字符串复制到dst参数中。如果参数src和dst在内存中出现重叠，其结果是未定义的。由于dst参数将进行修改，所以它必须是个字符数组或者是一个指向动态分配内存的数组的指针，<code>不能使用字符串常量</code>。返回参数dst的一份拷贝。<br /><strong>注意</strong>：</p> <p>目标参数dst的以前内容将被覆盖并丢失。即使新的字符串比dst原先的内存更短，由于新字符串是以NUL字符结尾，所以老字符串最后剩余的几个字符也会被有效的删除。如果字符串比数组长，多余的字符仍被复制，<code>它们将覆盖原先存储于数组后面的内存空间的值</code>。所以必须保证目标字符数组的空间足以容纳需要复制的字符串。</p> <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><string.h></span></span><span class="token keyword">char</span><span class="token operator">*</span><span class="token function">mycpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>dst<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token keyword">const</span> restrict src<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>c2<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     dst<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span> src<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>     idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   dst<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token keyword">return</span> dst<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token keyword">const</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">char</span> c1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"adcdee"</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"eeeeddddddddd"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">strcpy</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//eeeeddddddddd</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">mycpy</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//eeeeddddddddd</span><span class="token keyword">return</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h2>五、strchr函数</h2> <p>原型：<code>char *strchr(char const *str, int ch);</code></p> <p>功能：在一个字符串中查找一个特定字符。</p> <p>注意：第2个参数是一个整型值。但是，它包含了一个字符值。strchr在字符串str中查找字符ch第一次出现的位置，找到后函数返回一个指向该位置的指针。如果该字符并不存在于str中，函数就返回一个NULL指针。strrchr的功能和strchr基本一致，只是它所返回的是一个指向字符串中该字符最后一次出现的位置(最右边那个)。<br /><strong>为了直观编程显示，第二个参数设成字符型</strong></p> <pre><code class="prism language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><string.h></span></span><span class="token keyword">char</span><span class="token operator">*</span><span class="token function">Strchr</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>dst<span class="token punctuation">,</span><span class="token keyword">const</span><span class="token keyword">char</span> str<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>dst<span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>dst<span class="token operator">==</span> str<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> dst<span class="token punctuation">;</span><span class="token punctuation">}</span>     dst<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token keyword">const</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">char</span> c1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span>p<span class="token operator">=</span><span class="token function">strchr</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//llo</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">Strchr</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//llo</span><span class="token keyword">return</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>// 暂时就总结这么多，以后补充</p> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2835.htm">在C ++中验证堆栈序列</a></p>
                                                        <p>下一个：<a href="/html/category/article-3133.htm">微服务与领域驱动设计，架构实践总结</a></p>
                                                    </div>
                                                <div class="panel panel-default mt-5">
                            <div class="panel-heading">
                                <h3 class="m-0">推荐文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0">
                                                                        <li class="py-2"><a href="/html/category/article-1951.htm">设计模式学习笔记（十三）组合模式及其在树形结构中的应用</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1889.htm">win11系统照相机亮度怎么调节</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1807.htm">JavaScript使用递归从数组中删除连续的重复条目详解</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1762.htm">Python加速技巧</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1753.htm">Python编程语言基础</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1739.htm">Caused by: java.lang.ClassNotFoundException: springfox.documentation.schema.ModelReference 错误解决</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1713.htm">Git基础 Tree对象详解</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1698.htm">关于Java 信号量 Semaphore</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1688.htm">bash: virtualenv: command not found</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1661.htm">vue 内置组件 component 的用法</a></li>
                                                                    </ul>
                            </div>
                        </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4598.htm" title="天使艾美丽电视剧全集爱奇艺（真没想到）《天使艾美丽》，四个女仔三个bar 电视剧，天使艾美丽电视剧，">天使艾美丽电视剧全集爱奇艺（真没想到）《天使艾美丽》，四个女仔三个bar 电视剧，天使艾美丽电视剧，</a></li>
                        <li class="py-2"><a href="/html/category/article-7132.htm" title="法内情2002（袁咏仪法内情国语第一集）">法内情2002（袁咏仪法内情国语第一集）</a></li>
                        <li class="py-2"><a href="/html/category/article-7225.htm" title="被猫抓伤渗了一点点血需要打疫苗吗（被猫抓伤渗了一点点血要打破伤风吗）">被猫抓伤渗了一点点血需要打疫苗吗（被猫抓伤渗了一点点血要打破伤风吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4454.htm" title="闲鱼无货源怎么弄（闲鱼无货源怎么卖货）">闲鱼无货源怎么弄（闲鱼无货源怎么卖货）</a></li>
                        <li class="py-2"><a href="/html/category/article-6673.htm" title="怎么样补脾的效果最好(怎么补脾?)">怎么样补脾的效果最好(怎么补脾?)</a></li>
                        <li class="py-2"><a href="/html/category/article-6580.htm" title="宠物批发微信一手货源（宠物批发平台）">宠物批发微信一手货源（宠物批发平台）</a></li>
                        <li class="py-2"><a href="/html/category/article-6116.htm" title="被猫挠出血了过24小时了（被猫挠出血了过24小时了没打针）">被猫挠出血了过24小时了（被猫挠出血了过24小时了没打针）</a></li>
                        <li class="py-2"><a href="/html/category/article-6626.htm" title="韩式烤肉做法（韩式烤肉做法牛肉腌制窍门）">韩式烤肉做法（韩式烤肉做法牛肉腌制窍门）</a></li>
                        <li class="py-2"><a href="/html/category/article-7362.htm" title="新相亲时代 李丹（万万没想到）">新相亲时代 李丹（万万没想到）</a></li>
                        <li class="py-2"><a href="/html/category/article-7271.htm" title="想开宠物店需要多少钱（我想开个宠物店大概的多少钱）">想开宠物店需要多少钱（我想开个宠物店大概的多少钱）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div> <!-- .container -->
        </div> <!-- .page-section -->
    </main>
        <footer class="page-footer">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 py-2">
                    <p id="copyright">
                        Afghanistan Address 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-sm-6 py-2 text-right">
                    <div class="d-inline-block px-3">
                        <a href="#">Privacy</a>
                    </div>
                    <div class="d-inline-block px-3">
                        <a href="#">Contact Us</a>
                    </div>
                </div>
            </div>
        </div> <!-- .container -->
    </footer> <!-- .page-footer -->
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/jquery-3.5.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/wow/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/owl-carousel/js/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/waypoints/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/animateNumber/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/google-maps.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/afghanistanaddress/theme.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>